
F1_1982.elf:     file format elf32-littlenios2
F1_1982.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000a9f8 memsz 0x0000a9f8 flags r-x
    LOAD off    0x0000ba18 vaddr 0x0400aa18 paddr 0x0400c810 align 2**12
         filesz 0x00001df8 memsz 0x00001df8 flags rw-
    LOAD off    0x0000e608 vaddr 0x0400e608 paddr 0x0400e608 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a2c8  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000520  0400a4f8  0400a4f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001df8  0400aa18  0400c810  0000ba18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0400e608  0400e608  0000e608  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0400e75c  0400e75c  0000d810  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000d810  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b78  00000000  00000000  0000d838  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00011016  00000000  00000000  0000e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005cfd  00000000  00000000  0001f3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000074ce  00000000  00000000  000250c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015a0  00000000  00000000  0002c594  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000032cb  00000000  00000000  0002db34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d4e0  00000000  00000000  00030dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003e2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001338  00000000  00000000  0003e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00041db2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00041db5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00041dc1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00041dc2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00041dc3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00041dc7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00041dcb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00041dcf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00041dda  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00041de5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  00041df0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  00041dff  2**0
                  CONTENTS, READONLY
 29 .jdi          00005606  00000000  00000000  00041e1d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00081b32  00000000  00000000  00047423  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0400a4f8 l    d  .rodata	00000000 .rodata
0400aa18 l    d  .rwdata	00000000 .rwdata
0400e608 l    d  .bss	00000000 .bss
0400e75c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../F1_1982_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 game.c
0400c7cc l     O .rwdata	00000004 vga_ctrl
0400aa18 l     O .rwdata	00000170 colors
0400ab88 l     O .rwdata	00000050 TrackSec
00000000 l    df *ABS*	00000000 main.c
0400c7d0 l     O .rwdata	00000004 vga_ctrl
0400abd8 l     O .rwdata	00000170 colors
0400ad48 l     O .rwdata	00000050 TrackSec
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
0400a580 l     O .rodata	00000318 two_over_pi
0400a500 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
0400a8c4 l     O .rodata	0000000c init_jk
0400a898 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
0400a8d0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0400ad98 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
040080e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400c7e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
04008340 l     F .text	00000034 alt_dev_reg
0400b5c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04008638 l     F .text	0000020c altera_avalon_jtag_uart_irq
04008844 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04008e7c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0400909c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040091d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040091fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400965c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040097bc l     F .text	0000003c alt_get_errno
040097f8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400e630 g     O .bss	00000004 alt_instruction_exception_handler
040081cc g     F .text	0000007c alt_main
0400e65c g     O .bss	00000100 alt_irq
0400c810 g       *ABS*	00000000 __flash_rwdata_start
04005d2c g     F .text	00000088 .hidden __eqdf2
04000378 g     F .text	0000060c gameVAGScreenGenerater
0400e75c g       *ABS*	00000000 __alt_heap_start
0400826c g     F .text	00000024 __malloc_unlock
040039cc g     F .text	00000440 .hidden __divsf3
04000a60 g     F .text	000004a4 powf
0400491c g     F .text	00000070 .hidden __fixsfsi
04009c68 g     F .text	00000024 altera_nios2_gen2_irq_init
04007414 g     F .text	00000010 __errno
0400033c g     F .text	0000003c gameVGAScreenSaver
04000000 g     F .entry	0000000c __reset
04001a28 g     F .text	00000524 __ieee754_rem_pio2f
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400e614 g     O .bss	00000004 errno
0400e61c g     O .bss	00000004 alt_argv
040147cc g       *ABS*	00000000 _gp
04004438 g     F .text	000004e4 .hidden __subsf3
0400c64c g     O .rwdata	00000180 alt_fd_list
04009c8c g     F .text	00000090 alt_find_dev
0400a04c g     F .text	00000148 memcpy
04009740 g     F .text	0000007c alt_io_redirect
0400a4f8 g       *ABS*	00000000 __DTOR_END__
04009ee8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04008a3c g     F .text	0000021c altera_avalon_jtag_uart_read
04007424 g     F .text	00000014 malloc
04007330 g     F .text	00000064 .hidden __udivsi3
04003f40 g     F .text	000000c8 .hidden __lesf2
0400e610 g     O .bss	00000004 __malloc_top_pad
04003348 g     F .text	00000058 __fpclassifyf
0400322c g     F .text	00000018 finitef
04007c58 g     F .text	00000054 _sbrk_r
0400321c g     F .text	00000010 fabsf
0400c7fc g     O .rwdata	00000004 alt_max_fd
0400e60c g     O .bss	00000004 __malloc_max_sbrked_mem
04006f1c g     F .text	00000110 .hidden __extendsfdf2
04004ab0 g     F .text	000008ac .hidden __adddf3
04003e0c g     F .text	00000078 .hidden __nesf2
0400c7d4 g     O .rwdata	00000004 __fdlib_version
0400c7d8 g     O .rwdata	00000004 _global_impure_ptr
04002e70 g     F .text	000001b8 __kernel_sinf
0400e75c g       *ABS*	00000000 __bss_end
0400956c g     F .text	000000f0 alt_iic_isr_register
04009b60 g     F .text	00000108 alt_tick
04009520 g     F .text	0000004c alt_ic_irq_enabled
04009ac4 g     F .text	0000009c alt_alarm_stop
0400e624 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
0400c624 g     O .rwdata	00000028 alt_dev_null
04003030 g     F .text	000001ec rint
040091b0 g     F .text	00000020 alt_dcache_flush_all
040020a0 g     F .text	000002cc __kernel_cosf
0400c810 g       *ABS*	00000000 __ram_rwdata_end
0400c7f4 g     O .rwdata	00000008 alt_dev_list
04003e84 g     F .text	000000bc .hidden __gtsf2
0400aa18 g       *ABS*	00000000 __ram_rodata_end
04007394 g     F .text	00000058 .hidden __umodsi3
0400e75c g       *ABS*	00000000 end
04008578 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400a4f8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04008ef4 g     F .text	0000007c alt_avalon_timer_sc_init
040071d4 g     F .text	00000064 .hidden __clzsi2
04008c58 g     F .text	00000224 altera_avalon_jtag_uart_write
04007dd0 g     F .text	00000310 _free_r
0400a344 g     F .text	00000180 __call_exitprocs
0400c7e0 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
0400e628 g     O .bss	00000004 _alt_tick_rate
0400e62c g     O .bss	00000004 _alt_nticks
040083ac g     F .text	00000068 alt_sys_init
0400498c g     F .text	00000124 .hidden __floatsisf
0400a22c g     F .text	00000118 __register_exitproc
040088e4 g     F .text	00000068 altera_avalon_jtag_uart_close
040073ec g     F .text	00000028 .hidden __mulsi3
0400aa18 g       *ABS*	00000000 __ram_rwdata_start
0400a4f8 g       *ABS*	00000000 __ram_rodata_start
0400e634 g     O .bss	00000028 __malloc_current_mallinfo
04003e0c g     F .text	00000078 .hidden __eqsf2
04008414 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04009e24 g     F .text	000000c4 alt_get_fd
04009fd0 g     F .text	0000007c memcmp
040084d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0400e75c g       *ABS*	00000000 __alt_stack_base
04008524 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400535c g     F .text	000009d0 .hidden __divdf3
0400b1bc g     O .rwdata	00000408 __malloc_av_
04005db4 g     F .text	0000086c .hidden __muldf3
04000f04 g     F .text	00000b24 __ieee754_powf
04009d1c g     F .text	00000108 alt_find_file
04009238 g     F .text	000000a4 alt_dev_llist_insert
04008248 g     F .text	00000024 __malloc_lock
04008290 g     F .text	000000b0 sbrk
040033a8 g     F .text	00000144 scalbnf
0400e608 g       *ABS*	00000000 __bss_start
04001f4c g     F .text	00000154 __ieee754_sqrtf
04000984 g     F .text	0000002c main
0400e620 g     O .bss	00000004 alt_envp
0400e608 g     O .bss	00000004 __malloc_max_total_mem
04008474 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04003f40 g     F .text	000000c8 .hidden __ltsf2
04003028 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0400702c g     F .text	000001a8 .hidden __truncdfsf2
0400744c g     F .text	0000080c _malloc_r
0400c800 g     O .rwdata	00000004 alt_errno
04007238 g     F .text	00000084 .hidden __divsi3
04007cac g     F .text	00000124 _malloc_trim_r
0400a4f8 g       *ABS*	00000000 __CTOR_END__
04004008 g     F .text	00000430 .hidden __mulsf3
0400a4f8 g       *ABS*	00000000 __flash_rodata_start
0400a4f8 g       *ABS*	00000000 __DTOR_LIST__
04005d2c g     F .text	00000088 .hidden __nedf2
04008374 g     F .text	00000038 alt_irq_init
04009a40 g     F .text	00000084 alt_release_fd
040034ec g     F .text	00000018 copysignf
0400a8e0 g     O .rodata	00000100 .hidden __clz_tab
04009f84 g     F .text	00000014 atexit
04003e84 g     F .text	000000bc .hidden __gesf2
040033a0 g     F .text	00000008 nanf
0400c7dc g     O .rwdata	00000004 _impure_ptr
0400e618 g     O .bss	00000004 alt_argc
0400933c g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
0400c7ec g     O .rwdata	00000008 alt_fs_list
040009b0 g     F .text	000000b0 sinf
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400026c g     F .text	000000d0 gameInitGame
040093bc g     F .text	00000050 alt_ic_isr_register
0400c810 g       *ABS*	00000000 _edata
0400e75c g       *ABS*	00000000 _end
04000230 g       *ABS*	00000000 __ram_exceptions_end
0400894c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04009494 g     F .text	0000008c alt_ic_irq_disable
0400c7e4 g     O .rwdata	00000004 __malloc_trim_threshold
04009f98 g     F .text	00000038 exit
040072bc g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400a4c4 g     F .text	00000034 _exit
0400236c g     F .text	00000b04 __kernel_rem_pio2f
04008f70 g     F .text	0000012c alt_alarm_start
0400a194 g     F .text	00000098 strlen
040098e4 g     F .text	0000015c open
0400939c g     F .text	00000020 alt_icache_flush_all
04003244 g     F .text	00000104 floorf
0400c804 g     O .rwdata	00000004 alt_priority_mask
0400940c g     F .text	00000088 alt_ic_irq_enable
04006620 g     F .text	000008fc .hidden __subdf3
0400c808 g     O .rwdata	00000008 alt_alarm_list
040092dc g     F .text	00000060 _do_ctors
040090d8 g     F .text	000000d8 close
04003504 g     F .text	000004c8 .hidden __addsf3
04008148 g     F .text	00000084 alt_load
04007438 g     F .text	00000014 free



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10b99704 	addi	r2,r2,-6564
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10b99704 	addi	r2,r2,-6564
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a79917 	ldw	r2,-24988(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a79917 	ldw	r2,-24988(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d691f314 	ori	gp,gp,18380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000244:	10b98214 	ori	r2,r2,58888

    movhi r3, %hi(__bss_end)
 4000248:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400024c:	18f9d714 	ori	r3,r3,59228

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40081480 	call	4008148 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40081cc0 	call	40081cc <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <gameInitGame>:
#include <time.h>
#include <alt_types.h>
#include "game.h"

void gameInitGame(GameInfo* game)  
{
 400026c:	defffb04 	addi	sp,sp,-20
 4000270:	dfc00415 	stw	ra,16(sp)
 4000274:	df000315 	stw	fp,12(sp)
 4000278:	df000304 	addi	fp,sp,12
 400027c:	e13fff15 	stw	r4,-4(fp)
    float track_length = 0.0;
 4000280:	e03ffd15 	stw	zero,-12(fp)
    for (int s = 0; s < N_TRACK_SEC; s++) {
 4000284:	e03ffe15 	stw	zero,-8(fp)
 4000288:	00000f06 	br	40002c8 <gameInitGame+0x5c>
        track_length += TrackSec[s].length;
 400028c:	00810074 	movhi	r2,1025
 4000290:	10aae204 	addi	r2,r2,-21624
 4000294:	e0fffe17 	ldw	r3,-8(fp)
 4000298:	180690fa 	slli	r3,r3,3
 400029c:	10c5883a 	add	r2,r2,r3
 40002a0:	10800104 	addi	r2,r2,4
 40002a4:	10c00017 	ldw	r3,0(r2)
 40002a8:	180b883a 	mov	r5,r3
 40002ac:	e13ffd17 	ldw	r4,-12(fp)
 40002b0:	40035040 	call	4003504 <__addsf3>
 40002b4:	1007883a 	mov	r3,r2
 40002b8:	e0fffd15 	stw	r3,-12(fp)
#include "game.h"

void gameInitGame(GameInfo* game)  
{
    float track_length = 0.0;
    for (int s = 0; s < N_TRACK_SEC; s++) {
 40002bc:	e0bffe17 	ldw	r2,-8(fp)
 40002c0:	10800044 	addi	r2,r2,1
 40002c4:	e0bffe15 	stw	r2,-8(fp)
 40002c8:	e0bffe17 	ldw	r2,-8(fp)
 40002cc:	10800290 	cmplti	r2,r2,10
 40002d0:	103fee1e 	bne	r2,zero,400028c <__alt_data_end+0xfc00028c>
        track_length += TrackSec[s].length;
    }
    game->fTrackDistance = track_length;
 40002d4:	e0bfff17 	ldw	r2,-4(fp)
 40002d8:	e0fffd17 	ldw	r3,-12(fp)
 40002dc:	10c00015 	stw	r3,0(r2)
    game->fTrackCurvature = 0.0;
 40002e0:	e0bfff17 	ldw	r2,-4(fp)
 40002e4:	10000115 	stw	zero,4(r2)
    game->fCurvature = 0.0;
 40002e8:	e0bfff17 	ldw	r2,-4(fp)
 40002ec:	10000215 	stw	zero,8(r2)
    game->fDistance = 0.0;
 40002f0:	e0bfff17 	ldw	r2,-4(fp)
 40002f4:	10000315 	stw	zero,12(r2)
    game->fSpeed = 1.0;
 40002f8:	e0bfff17 	ldw	r2,-4(fp)
 40002fc:	00cfe034 	movhi	r3,16256
 4000300:	10c00415 	stw	r3,16(r2)
    game->fPlayerCurvature = 0.0;
 4000304:	e0bfff17 	ldw	r2,-4(fp)
 4000308:	10000515 	stw	zero,20(r2)
    game->fCarPos = 0.0;
 400030c:	e0bfff17 	ldw	r2,-4(fp)
 4000310:	10000615 	stw	zero,24(r2)
    game->fLapTime = 0.0;
 4000314:	e0bfff17 	ldw	r2,-4(fp)
 4000318:	10000715 	stw	zero,28(r2)
    game->fFastestLapTime = 0.0;
 400031c:	e0bfff17 	ldw	r2,-4(fp)
 4000320:	10000815 	stw	zero,32(r2)
}
 4000324:	0001883a 	nop
 4000328:	e037883a 	mov	sp,fp
 400032c:	dfc00117 	ldw	ra,4(sp)
 4000330:	df000017 	ldw	fp,0(sp)
 4000334:	dec00204 	addi	sp,sp,8
 4000338:	f800283a 	ret

0400033c <gameVGAScreenSaver>:

void gameVGAScreenSaver()   
{   
 400033c:	defffc04 	addi	sp,sp,-16
 4000340:	dfc00315 	stw	ra,12(sp)
 4000344:	df000215 	stw	fp,8(sp)
 4000348:	df000204 	addi	fp,sp,8
    GameInfo* game = (GameInfo*) malloc(sizeof(GameInfo));
 400034c:	01000904 	movi	r4,36
 4000350:	40074240 	call	4007424 <malloc>
 4000354:	e0bffe15 	stw	r2,-8(fp)
    gameInitGame(game);
 4000358:	e13ffe17 	ldw	r4,-8(fp)
 400035c:	400026c0 	call	400026c <gameInitGame>
    float fElapsedTime = 1.0;
 4000360:	008fe034 	movhi	r2,16256
 4000364:	e0bfff15 	stw	r2,-4(fp)
    // clock_t before = clock ();
    while(1) {
        gameVAGScreenGenerater(fElapsedTime, game);
 4000368:	e17ffe17 	ldw	r5,-8(fp)
 400036c:	e13fff17 	ldw	r4,-4(fp)
 4000370:	40003780 	call	4000378 <gameVAGScreenGenerater>
        // clock_t after = clock ();
        // fElapsedTime = (after - before) / CLOCKS_PER_SEC;
        // before = after;
    }
 4000374:	003ffc06 	br	4000368 <__alt_data_end+0xfc000368>

04000378 <gameVAGScreenGenerater>:
}

void gameVAGScreenGenerater(float fElapsedTime, GameInfo* game)
{   
 4000378:	deffeb04 	addi	sp,sp,-84
 400037c:	dfc01415 	stw	ra,80(sp)
 4000380:	df001315 	stw	fp,76(sp)
 4000384:	dcc01215 	stw	r19,72(sp)
 4000388:	dc801115 	stw	r18,68(sp)
 400038c:	dc401015 	stw	r17,64(sp)
 4000390:	dc000f15 	stw	r16,60(sp)
 4000394:	df001304 	addi	fp,sp,76
 4000398:	e13ffa15 	stw	r4,-24(fp)
 400039c:	e17ffb15 	stw	r5,-20(fp)
    game->fDistance += (70.0 * game->fSpeed) * fElapsedTime;
 40003a0:	e0bffb17 	ldw	r2,-20(fp)
 40003a4:	10c00317 	ldw	r3,12(r2)
 40003a8:	1809883a 	mov	r4,r3
 40003ac:	4006f1c0 	call	4006f1c <__extendsfdf2>
 40003b0:	1021883a 	mov	r16,r2
 40003b4:	1823883a 	mov	r17,r3
 40003b8:	e0bffb17 	ldw	r2,-20(fp)
 40003bc:	10c00417 	ldw	r3,16(r2)
 40003c0:	1809883a 	mov	r4,r3
 40003c4:	4006f1c0 	call	4006f1c <__extendsfdf2>
 40003c8:	1011883a 	mov	r8,r2
 40003cc:	1813883a 	mov	r9,r3
 40003d0:	000d883a 	mov	r6,zero
 40003d4:	01d014b4 	movhi	r7,16466
 40003d8:	39e00004 	addi	r7,r7,-32768
 40003dc:	4009883a 	mov	r4,r8
 40003e0:	480b883a 	mov	r5,r9
 40003e4:	4005db40 	call	4005db4 <__muldf3>
 40003e8:	1009883a 	mov	r4,r2
 40003ec:	180b883a 	mov	r5,r3
 40003f0:	2025883a 	mov	r18,r4
 40003f4:	2827883a 	mov	r19,r5
 40003f8:	e13ffa17 	ldw	r4,-24(fp)
 40003fc:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000400:	1009883a 	mov	r4,r2
 4000404:	180b883a 	mov	r5,r3
 4000408:	200d883a 	mov	r6,r4
 400040c:	280f883a 	mov	r7,r5
 4000410:	9009883a 	mov	r4,r18
 4000414:	980b883a 	mov	r5,r19
 4000418:	4005db40 	call	4005db4 <__muldf3>
 400041c:	1009883a 	mov	r4,r2
 4000420:	180b883a 	mov	r5,r3
 4000424:	2005883a 	mov	r2,r4
 4000428:	2807883a 	mov	r3,r5
 400042c:	100d883a 	mov	r6,r2
 4000430:	180f883a 	mov	r7,r3
 4000434:	8009883a 	mov	r4,r16
 4000438:	880b883a 	mov	r5,r17
 400043c:	4004ab00 	call	4004ab0 <__adddf3>
 4000440:	1009883a 	mov	r4,r2
 4000444:	180b883a 	mov	r5,r3
 4000448:	2005883a 	mov	r2,r4
 400044c:	2807883a 	mov	r3,r5
 4000450:	1009883a 	mov	r4,r2
 4000454:	180b883a 	mov	r5,r3
 4000458:	400702c0 	call	400702c <__truncdfsf2>
 400045c:	1007883a 	mov	r3,r2
 4000460:	e0bffb17 	ldw	r2,-20(fp)
 4000464:	10c00315 	stw	r3,12(r2)
    game->fLapTime += fElapsedTime;
 4000468:	e0bffb17 	ldw	r2,-20(fp)
 400046c:	10c00717 	ldw	r3,28(r2)
 4000470:	e17ffa17 	ldw	r5,-24(fp)
 4000474:	1809883a 	mov	r4,r3
 4000478:	40035040 	call	4003504 <__addsf3>
 400047c:	1009883a 	mov	r4,r2
 4000480:	2007883a 	mov	r3,r4
 4000484:	e0bffb17 	ldw	r2,-20(fp)
 4000488:	10c00715 	stw	r3,28(r2)
	if (game->fDistance >= game->fTrackDistance)
 400048c:	e0bffb17 	ldw	r2,-20(fp)
 4000490:	10c00317 	ldw	r3,12(r2)
 4000494:	e0bffb17 	ldw	r2,-20(fp)
 4000498:	11000017 	ldw	r4,0(r2)
 400049c:	200b883a 	mov	r5,r4
 40004a0:	1809883a 	mov	r4,r3
 40004a4:	4003e840 	call	4003e84 <__gesf2>
 40004a8:	10001f16 	blt	r2,zero,4000528 <gameVAGScreenGenerater+0x1b0>
    {
        game->fDistance -= game->fTrackDistance;
 40004ac:	e0bffb17 	ldw	r2,-20(fp)
 40004b0:	10c00317 	ldw	r3,12(r2)
 40004b4:	e0bffb17 	ldw	r2,-20(fp)
 40004b8:	11000017 	ldw	r4,0(r2)
 40004bc:	200b883a 	mov	r5,r4
 40004c0:	1809883a 	mov	r4,r3
 40004c4:	40044380 	call	4004438 <__subsf3>
 40004c8:	1009883a 	mov	r4,r2
 40004cc:	2007883a 	mov	r3,r4
 40004d0:	e0bffb17 	ldw	r2,-20(fp)
 40004d4:	10c00315 	stw	r3,12(r2)
        if (game->fLapTime < game->fFastestLapTime || game->fFastestLapTime == 0.0) 
 40004d8:	e0bffb17 	ldw	r2,-20(fp)
 40004dc:	10c00717 	ldw	r3,28(r2)
 40004e0:	e0bffb17 	ldw	r2,-20(fp)
 40004e4:	11000817 	ldw	r4,32(r2)
 40004e8:	200b883a 	mov	r5,r4
 40004ec:	1809883a 	mov	r4,r3
 40004f0:	4003f400 	call	4003f40 <__lesf2>
 40004f4:	10000616 	blt	r2,zero,4000510 <gameVAGScreenGenerater+0x198>
 40004f8:	e0bffb17 	ldw	r2,-20(fp)
 40004fc:	10c00817 	ldw	r3,32(r2)
 4000500:	000b883a 	mov	r5,zero
 4000504:	1809883a 	mov	r4,r3
 4000508:	4003e0c0 	call	4003e0c <__eqsf2>
 400050c:	1000041e 	bne	r2,zero,4000520 <gameVAGScreenGenerater+0x1a8>
            game->fFastestLapTime = game->fLapTime;
 4000510:	e0bffb17 	ldw	r2,-20(fp)
 4000514:	10c00717 	ldw	r3,28(r2)
 4000518:	e0bffb17 	ldw	r2,-20(fp)
 400051c:	10c00815 	stw	r3,32(r2)
        game->fLapTime = 0.0;
 4000520:	e0bffb17 	ldw	r2,-20(fp)
 4000524:	10000715 	stw	zero,28(r2)
    }
    // Get Point on track
    float fOffset = 0;
 4000528:	e03fed15 	stw	zero,-76(fp)
    int nTrackSection = 0;
 400052c:	e03fee15 	stw	zero,-72(fp)

    while (nTrackSection < N_TRACK_SEC && fOffset <= game->fDistance)
 4000530:	00000f06 	br	4000570 <gameVAGScreenGenerater+0x1f8>
    {			
        fOffset += TrackSec[nTrackSection].length;
 4000534:	00810074 	movhi	r2,1025
 4000538:	10aae204 	addi	r2,r2,-21624
 400053c:	e0ffee17 	ldw	r3,-72(fp)
 4000540:	180690fa 	slli	r3,r3,3
 4000544:	10c5883a 	add	r2,r2,r3
 4000548:	10800104 	addi	r2,r2,4
 400054c:	10c00017 	ldw	r3,0(r2)
 4000550:	180b883a 	mov	r5,r3
 4000554:	e13fed17 	ldw	r4,-76(fp)
 4000558:	40035040 	call	4003504 <__addsf3>
 400055c:	1007883a 	mov	r3,r2
 4000560:	e0ffed15 	stw	r3,-76(fp)
        nTrackSection++;
 4000564:	e0bfee17 	ldw	r2,-72(fp)
 4000568:	10800044 	addi	r2,r2,1
 400056c:	e0bfee15 	stw	r2,-72(fp)
    }
    // Get Point on track
    float fOffset = 0;
    int nTrackSection = 0;

    while (nTrackSection < N_TRACK_SEC && fOffset <= game->fDistance)
 4000570:	e0bfee17 	ldw	r2,-72(fp)
 4000574:	10800288 	cmpgei	r2,r2,10
 4000578:	1000061e 	bne	r2,zero,4000594 <gameVAGScreenGenerater+0x21c>
 400057c:	e0bffb17 	ldw	r2,-20(fp)
 4000580:	10c00317 	ldw	r3,12(r2)
 4000584:	e17fed17 	ldw	r5,-76(fp)
 4000588:	1809883a 	mov	r4,r3
 400058c:	4003e840 	call	4003e84 <__gesf2>
 4000590:	103fe80e 	bge	r2,zero,4000534 <__alt_data_end+0xfc000534>
    {			
        fOffset += TrackSec[nTrackSection].length;
        nTrackSection++;
    }

    float fTargetCurvature = TrackSec[nTrackSection - 1].curve;
 4000594:	e0bfee17 	ldw	r2,-72(fp)
 4000598:	10ffffc4 	addi	r3,r2,-1
 400059c:	00810074 	movhi	r2,1025
 40005a0:	10aae204 	addi	r2,r2,-21624
 40005a4:	180690fa 	slli	r3,r3,3
 40005a8:	10c5883a 	add	r2,r2,r3
 40005ac:	10800017 	ldw	r2,0(r2)
 40005b0:	e0bff015 	stw	r2,-64(fp)
	float fTrackCurveDiff = (fTargetCurvature - game->fCurvature) * fElapsedTime * game->fSpeed;
 40005b4:	e0bffb17 	ldw	r2,-20(fp)
 40005b8:	10c00217 	ldw	r3,8(r2)
 40005bc:	180b883a 	mov	r5,r3
 40005c0:	e13ff017 	ldw	r4,-64(fp)
 40005c4:	40044380 	call	4004438 <__subsf3>
 40005c8:	1007883a 	mov	r3,r2
 40005cc:	1805883a 	mov	r2,r3
 40005d0:	e17ffa17 	ldw	r5,-24(fp)
 40005d4:	1009883a 	mov	r4,r2
 40005d8:	40040080 	call	4004008 <__mulsf3>
 40005dc:	1007883a 	mov	r3,r2
 40005e0:	1809883a 	mov	r4,r3
 40005e4:	e0bffb17 	ldw	r2,-20(fp)
 40005e8:	10c00417 	ldw	r3,16(r2)
 40005ec:	180b883a 	mov	r5,r3
 40005f0:	40040080 	call	4004008 <__mulsf3>
 40005f4:	1007883a 	mov	r3,r2
 40005f8:	e0fff115 	stw	r3,-60(fp)

    game->fCurvature += fTrackCurveDiff;
 40005fc:	e0bffb17 	ldw	r2,-20(fp)
 4000600:	10c00217 	ldw	r3,8(r2)
 4000604:	e17ff117 	ldw	r5,-60(fp)
 4000608:	1809883a 	mov	r4,r3
 400060c:	40035040 	call	4003504 <__addsf3>
 4000610:	1009883a 	mov	r4,r2
 4000614:	2007883a 	mov	r3,r4
 4000618:	e0bffb17 	ldw	r2,-20(fp)
 400061c:	10c00215 	stw	r3,8(r2)

    // Accumulate track curvature
    game->fTrackCurvature += (game->fCurvature) * fElapsedTime * game->fSpeed;
 4000620:	e0bffb17 	ldw	r2,-20(fp)
 4000624:	14000117 	ldw	r16,4(r2)
 4000628:	e0bffb17 	ldw	r2,-20(fp)
 400062c:	10c00217 	ldw	r3,8(r2)
 4000630:	e17ffa17 	ldw	r5,-24(fp)
 4000634:	1809883a 	mov	r4,r3
 4000638:	40040080 	call	4004008 <__mulsf3>
 400063c:	1007883a 	mov	r3,r2
 4000640:	1809883a 	mov	r4,r3
 4000644:	e0bffb17 	ldw	r2,-20(fp)
 4000648:	10c00417 	ldw	r3,16(r2)
 400064c:	180b883a 	mov	r5,r3
 4000650:	40040080 	call	4004008 <__mulsf3>
 4000654:	1007883a 	mov	r3,r2
 4000658:	1805883a 	mov	r2,r3
 400065c:	100b883a 	mov	r5,r2
 4000660:	8009883a 	mov	r4,r16
 4000664:	40035040 	call	4003504 <__addsf3>
 4000668:	1009883a 	mov	r4,r2
 400066c:	2007883a 	mov	r3,r4
 4000670:	e0bffb17 	ldw	r2,-20(fp)
 4000674:	10c00115 	stw	r3,4(r2)

    for (int y = 0; y < WINDOW_H / 2; y++) {
 4000678:	e03fef15 	stw	zero,-68(fp)
 400067c:	0000b406 	br	4000950 <gameVAGScreenGenerater+0x5d8>
        // Perspective is used to modify the width of the track row segments
        float fPerspective = (float)y / (WINDOW_H/2.0);
 4000680:	e13fef17 	ldw	r4,-68(fp)
 4000684:	400498c0 	call	400498c <__floatsisf>
 4000688:	1007883a 	mov	r3,r2
 400068c:	0150dc34 	movhi	r5,17264
 4000690:	1809883a 	mov	r4,r3
 4000694:	40039cc0 	call	40039cc <__divsf3>
 4000698:	1007883a 	mov	r3,r2
 400069c:	e0fff215 	stw	r3,-56(fp)
        float fRoadWidth = 0.1 + fPerspective * 0.8; // Min 10% Max 90%
 40006a0:	e13ff217 	ldw	r4,-56(fp)
 40006a4:	4006f1c0 	call	4006f1c <__extendsfdf2>
 40006a8:	1011883a 	mov	r8,r2
 40006ac:	1813883a 	mov	r9,r3
 40006b0:	01a666b4 	movhi	r6,39322
 40006b4:	31a66684 	addi	r6,r6,-26214
 40006b8:	01cffab4 	movhi	r7,16362
 40006bc:	39e66644 	addi	r7,r7,-26215
 40006c0:	4009883a 	mov	r4,r8
 40006c4:	480b883a 	mov	r5,r9
 40006c8:	4005db40 	call	4005db4 <__muldf3>
 40006cc:	1009883a 	mov	r4,r2
 40006d0:	180b883a 	mov	r5,r3
 40006d4:	2005883a 	mov	r2,r4
 40006d8:	2807883a 	mov	r3,r5
 40006dc:	01a666b4 	movhi	r6,39322
 40006e0:	31a66684 	addi	r6,r6,-26214
 40006e4:	01cfeeb4 	movhi	r7,16314
 40006e8:	39e66644 	addi	r7,r7,-26215
 40006ec:	1009883a 	mov	r4,r2
 40006f0:	180b883a 	mov	r5,r3
 40006f4:	4004ab00 	call	4004ab0 <__adddf3>
 40006f8:	1009883a 	mov	r4,r2
 40006fc:	180b883a 	mov	r5,r3
 4000700:	2005883a 	mov	r2,r4
 4000704:	2807883a 	mov	r3,r5
 4000708:	1009883a 	mov	r4,r2
 400070c:	180b883a 	mov	r5,r3
 4000710:	400702c0 	call	400702c <__truncdfsf2>
 4000714:	1007883a 	mov	r3,r2
 4000718:	e0fff315 	stw	r3,-52(fp)
        float fClipWidth = fRoadWidth * 0.15;
 400071c:	e13ff317 	ldw	r4,-52(fp)
 4000720:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000724:	1011883a 	mov	r8,r2
 4000728:	1813883a 	mov	r9,r3
 400072c:	018cccf4 	movhi	r6,13107
 4000730:	318cccc4 	addi	r6,r6,13107
 4000734:	01cff0f4 	movhi	r7,16323
 4000738:	39ccccc4 	addi	r7,r7,13107
 400073c:	4009883a 	mov	r4,r8
 4000740:	480b883a 	mov	r5,r9
 4000744:	4005db40 	call	4005db4 <__muldf3>
 4000748:	1009883a 	mov	r4,r2
 400074c:	180b883a 	mov	r5,r3
 4000750:	2005883a 	mov	r2,r4
 4000754:	2807883a 	mov	r3,r5
 4000758:	1009883a 	mov	r4,r2
 400075c:	180b883a 	mov	r5,r3
 4000760:	400702c0 	call	400702c <__truncdfsf2>
 4000764:	1007883a 	mov	r3,r2
 4000768:	e0fff415 	stw	r3,-48(fp)
        fRoadWidth *= 0.5;	// Halve it as track is symmetrical around center of track, but offset...
 400076c:	014fc034 	movhi	r5,16128
 4000770:	e13ff317 	ldw	r4,-52(fp)
 4000774:	40040080 	call	4004008 <__mulsf3>
 4000778:	1007883a 	mov	r3,r2
 400077c:	e0fff315 	stw	r3,-52(fp)

        // ...depending on where the middle point is, which is defined by the current
        // track curvature.
        float fMiddlePoint = 0.5 + game->fCurvature * powf((1.0 - fPerspective), 3);
 4000780:	e0bffb17 	ldw	r2,-20(fp)
 4000784:	14000217 	ldw	r16,8(r2)
 4000788:	e17ff217 	ldw	r5,-56(fp)
 400078c:	010fe034 	movhi	r4,16256
 4000790:	40044380 	call	4004438 <__subsf3>
 4000794:	1007883a 	mov	r3,r2
 4000798:	1805883a 	mov	r2,r3
 400079c:	01501034 	movhi	r5,16448
 40007a0:	1009883a 	mov	r4,r2
 40007a4:	4000a600 	call	4000a60 <powf>
 40007a8:	1007883a 	mov	r3,r2
 40007ac:	180b883a 	mov	r5,r3
 40007b0:	8009883a 	mov	r4,r16
 40007b4:	40040080 	call	4004008 <__mulsf3>
 40007b8:	1007883a 	mov	r3,r2
 40007bc:	1805883a 	mov	r2,r3
 40007c0:	014fc034 	movhi	r5,16128
 40007c4:	1009883a 	mov	r4,r2
 40007c8:	40035040 	call	4003504 <__addsf3>
 40007cc:	1007883a 	mov	r3,r2
 40007d0:	e0fff515 	stw	r3,-44(fp)

        int nMiddlePoint = fMiddlePoint * WINDOW_W;
 40007d4:	01510834 	movhi	r5,17440
 40007d8:	e13ff517 	ldw	r4,-44(fp)
 40007dc:	40040080 	call	4004008 <__mulsf3>
 40007e0:	1007883a 	mov	r3,r2
 40007e4:	1805883a 	mov	r2,r3
 40007e8:	1009883a 	mov	r4,r2
 40007ec:	400491c0 	call	400491c <__fixsfsi>
 40007f0:	e0bff615 	stw	r2,-40(fp)
        int nRoadWidth = fRoadWidth * WINDOW_W;
 40007f4:	01510834 	movhi	r5,17440
 40007f8:	e13ff317 	ldw	r4,-52(fp)
 40007fc:	40040080 	call	4004008 <__mulsf3>
 4000800:	1007883a 	mov	r3,r2
 4000804:	1805883a 	mov	r2,r3
 4000808:	1009883a 	mov	r4,r2
 400080c:	400491c0 	call	400491c <__fixsfsi>
 4000810:	e0bff715 	stw	r2,-36(fp)
        int nClipWidth = fClipWidth * WINDOW_W;
 4000814:	01510834 	movhi	r5,17440
 4000818:	e13ff417 	ldw	r4,-48(fp)
 400081c:	40040080 	call	4004008 <__mulsf3>
 4000820:	1007883a 	mov	r3,r2
 4000824:	1805883a 	mov	r2,r3
 4000828:	1009883a 	mov	r4,r2
 400082c:	400491c0 	call	400491c <__fixsfsi>
 4000830:	e0bff815 	stw	r2,-32(fp)
        // int nRow = WINDOW_H / 2;

        // // Using periodic oscillatory functions to give lines, where the phase is controlled
        // // by the distance around the track. These take some fine tuning to give the right "feel"
        // int nGrassColour = sinf(20.0 *  powf(1.0 - fPerspective,3) + fDistance * 0.1f) > 0.0f ? FG_GREEN : FG_DARK_GREEN;
        char nClipColour = sinf(80.0 *  powf(1.0 - fPerspective, 2) + game->fDistance) > 0.0 ? 1 : 0;
 4000834:	e17ff217 	ldw	r5,-56(fp)
 4000838:	010fe034 	movhi	r4,16256
 400083c:	40044380 	call	4004438 <__subsf3>
 4000840:	1007883a 	mov	r3,r2
 4000844:	1805883a 	mov	r2,r3
 4000848:	01500034 	movhi	r5,16384
 400084c:	1009883a 	mov	r4,r2
 4000850:	4000a600 	call	4000a60 <powf>
 4000854:	1007883a 	mov	r3,r2
 4000858:	1809883a 	mov	r4,r3
 400085c:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000860:	1011883a 	mov	r8,r2
 4000864:	1813883a 	mov	r9,r3
 4000868:	000d883a 	mov	r6,zero
 400086c:	01d01534 	movhi	r7,16468
 4000870:	4009883a 	mov	r4,r8
 4000874:	480b883a 	mov	r5,r9
 4000878:	4005db40 	call	4005db4 <__muldf3>
 400087c:	1009883a 	mov	r4,r2
 4000880:	180b883a 	mov	r5,r3
 4000884:	2021883a 	mov	r16,r4
 4000888:	2823883a 	mov	r17,r5
 400088c:	e0bffb17 	ldw	r2,-20(fp)
 4000890:	10c00317 	ldw	r3,12(r2)
 4000894:	1809883a 	mov	r4,r3
 4000898:	4006f1c0 	call	4006f1c <__extendsfdf2>
 400089c:	1009883a 	mov	r4,r2
 40008a0:	180b883a 	mov	r5,r3
 40008a4:	200d883a 	mov	r6,r4
 40008a8:	280f883a 	mov	r7,r5
 40008ac:	8009883a 	mov	r4,r16
 40008b0:	880b883a 	mov	r5,r17
 40008b4:	4004ab00 	call	4004ab0 <__adddf3>
 40008b8:	1009883a 	mov	r4,r2
 40008bc:	180b883a 	mov	r5,r3
 40008c0:	2005883a 	mov	r2,r4
 40008c4:	2807883a 	mov	r3,r5
 40008c8:	1009883a 	mov	r4,r2
 40008cc:	180b883a 	mov	r5,r3
 40008d0:	400702c0 	call	400702c <__truncdfsf2>
 40008d4:	1007883a 	mov	r3,r2
 40008d8:	1809883a 	mov	r4,r3
 40008dc:	40009b00 	call	40009b0 <sinf>
 40008e0:	1007883a 	mov	r3,r2
 40008e4:	04000044 	movi	r16,1
 40008e8:	000b883a 	mov	r5,zero
 40008ec:	1809883a 	mov	r4,r3
 40008f0:	4003e840 	call	4003e84 <__gesf2>
 40008f4:	00800116 	blt	zero,r2,40008fc <gameVAGScreenGenerater+0x584>
 40008f8:	0021883a 	mov	r16,zero
 40008fc:	e43ff905 	stb	r16,-28(fp)
        
        // // Start finish straight changes the road colour to inform the player lap is reset
        // int nRoadColour = (nTrackSection-1) == 0 ? FG_WHITE : FG_GREY;
        vga_ctrl -> VRAM[y + WINDOW_H / 2] = nClipColour << 31 | nMiddlePoint << 20 | nRoadWidth << 10 | nClipWidth;
 4000900:	d0e00017 	ldw	r3,-32768(gp)
 4000904:	e0bfef17 	ldw	r2,-68(fp)
 4000908:	10803c04 	addi	r2,r2,240
 400090c:	e13ff907 	ldb	r4,-28(fp)
 4000910:	200a97fa 	slli	r5,r4,31
 4000914:	e13ff617 	ldw	r4,-40(fp)
 4000918:	2008953a 	slli	r4,r4,20
 400091c:	290ab03a 	or	r5,r5,r4
 4000920:	e13ff717 	ldw	r4,-36(fp)
 4000924:	200892ba 	slli	r4,r4,10
 4000928:	290ab03a 	or	r5,r5,r4
 400092c:	e13ff817 	ldw	r4,-32(fp)
 4000930:	2908b03a 	or	r4,r5,r4
 4000934:	1085883a 	add	r2,r2,r2
 4000938:	1085883a 	add	r2,r2,r2
 400093c:	1885883a 	add	r2,r3,r2
 4000940:	11000015 	stw	r4,0(r2)
    game->fCurvature += fTrackCurveDiff;

    // Accumulate track curvature
    game->fTrackCurvature += (game->fCurvature) * fElapsedTime * game->fSpeed;

    for (int y = 0; y < WINDOW_H / 2; y++) {
 4000944:	e0bfef17 	ldw	r2,-68(fp)
 4000948:	10800044 	addi	r2,r2,1
 400094c:	e0bfef15 	stw	r2,-68(fp)
 4000950:	e0bfef17 	ldw	r2,-68(fp)
 4000954:	10803c10 	cmplti	r2,r2,240
 4000958:	103f491e 	bne	r2,zero,4000680 <__alt_data_end+0xfc000680>
        // int nRoadColour = (nTrackSection-1) == 0 ? FG_WHITE : FG_GREY;
        vga_ctrl -> VRAM[y + WINDOW_H / 2] = nClipColour << 31 | nMiddlePoint << 20 | nRoadWidth << 10 | nClipWidth;
        // vga_ctrl -> VRAM[y] = nClipColour << 31 | nLeftGrass << 10 | nLeftClip;
        // vga_ctrl -> VRAM[y + WINDOW_H / 2] =  nClipColour << 31 | nRightClip << 10 | nRightGrass;
    }
}
 400095c:	0001883a 	nop
 4000960:	e6fffc04 	addi	sp,fp,-16
 4000964:	dfc00517 	ldw	ra,20(sp)
 4000968:	df000417 	ldw	fp,16(sp)
 400096c:	dcc00317 	ldw	r19,12(sp)
 4000970:	dc800217 	ldw	r18,8(sp)
 4000974:	dc400117 	ldw	r17,4(sp)
 4000978:	dc000017 	ldw	r16,0(sp)
 400097c:	dec00604 	addi	sp,sp,24
 4000980:	f800283a 	ret

04000984 <main>:
#include "game.h"

void main() {
 4000984:	defffe04 	addi	sp,sp,-8
 4000988:	dfc00115 	stw	ra,4(sp)
 400098c:	df000015 	stw	fp,0(sp)
 4000990:	d839883a 	mov	fp,sp
	gameVGAScreenSaver();
 4000994:	400033c0 	call	400033c <gameVGAScreenSaver>
}
 4000998:	0001883a 	nop
 400099c:	e037883a 	mov	sp,fp
 40009a0:	dfc00117 	ldw	ra,4(sp)
 40009a4:	df000017 	ldw	fp,0(sp)
 40009a8:	dec00204 	addi	sp,sp,8
 40009ac:	f800283a 	ret

040009b0 <sinf>:
 40009b0:	00a00034 	movhi	r2,32768
 40009b4:	defffd04 	addi	sp,sp,-12
 40009b8:	10bfffc4 	addi	r2,r2,-1
 40009bc:	00cfd274 	movhi	r3,16201
 40009c0:	dfc00215 	stw	ra,8(sp)
 40009c4:	1104703a 	and	r2,r2,r4
 40009c8:	18c3f604 	addi	r3,r3,4056
 40009cc:	1880150e 	bge	r3,r2,4000a24 <sinf+0x74>
 40009d0:	00dfe034 	movhi	r3,32640
 40009d4:	18ffffc4 	addi	r3,r3,-1
 40009d8:	1880050e 	bge	r3,r2,40009f0 <sinf+0x40>
 40009dc:	200b883a 	mov	r5,r4
 40009e0:	40044380 	call	4004438 <__subsf3>
 40009e4:	dfc00217 	ldw	ra,8(sp)
 40009e8:	dec00304 	addi	sp,sp,12
 40009ec:	f800283a 	ret
 40009f0:	d80b883a 	mov	r5,sp
 40009f4:	4001a280 	call	4001a28 <__ieee754_rem_pio2f>
 40009f8:	108000cc 	andi	r2,r2,3
 40009fc:	01800044 	movi	r6,1
 4000a00:	11801126 	beq	r2,r6,4000a48 <sinf+0x98>
 4000a04:	00c00084 	movi	r3,2
 4000a08:	d9400117 	ldw	r5,4(sp)
 4000a0c:	d9000017 	ldw	r4,0(sp)
 4000a10:	10c00a26 	beq	r2,r3,4000a3c <sinf+0x8c>
 4000a14:	10001026 	beq	r2,zero,4000a58 <sinf+0xa8>
 4000a18:	40020a00 	call	40020a0 <__kernel_cosf>
 4000a1c:	10a0003c 	xorhi	r2,r2,32768
 4000a20:	003ff006 	br	40009e4 <__alt_data_end+0xfc0009e4>
 4000a24:	000d883a 	mov	r6,zero
 4000a28:	000b883a 	mov	r5,zero
 4000a2c:	4002e700 	call	4002e70 <__kernel_sinf>
 4000a30:	dfc00217 	ldw	ra,8(sp)
 4000a34:	dec00304 	addi	sp,sp,12
 4000a38:	f800283a 	ret
 4000a3c:	4002e700 	call	4002e70 <__kernel_sinf>
 4000a40:	10a0003c 	xorhi	r2,r2,32768
 4000a44:	003fe706 	br	40009e4 <__alt_data_end+0xfc0009e4>
 4000a48:	d9400117 	ldw	r5,4(sp)
 4000a4c:	d9000017 	ldw	r4,0(sp)
 4000a50:	40020a00 	call	40020a0 <__kernel_cosf>
 4000a54:	003fe306 	br	40009e4 <__alt_data_end+0xfc0009e4>
 4000a58:	4002e700 	call	4002e70 <__kernel_sinf>
 4000a5c:	003fe106 	br	40009e4 <__alt_data_end+0xfc0009e4>

04000a60 <powf>:
 4000a60:	defff104 	addi	sp,sp,-60
 4000a64:	dc400a15 	stw	r17,40(sp)
 4000a68:	04410074 	movhi	r17,1025
 4000a6c:	dd000d15 	stw	r20,52(sp)
 4000a70:	dcc00c15 	stw	r19,48(sp)
 4000a74:	dc800b15 	stw	r18,44(sp)
 4000a78:	dc000915 	stw	r16,36(sp)
 4000a7c:	dfc00e15 	stw	ra,56(sp)
 4000a80:	8c71f504 	addi	r17,r17,-14380
 4000a84:	2029883a 	mov	r20,r4
 4000a88:	2827883a 	mov	r19,r5
 4000a8c:	4000f040 	call	4000f04 <__ieee754_powf>
 4000a90:	1021883a 	mov	r16,r2
 4000a94:	88800017 	ldw	r2,0(r17)
 4000a98:	04bfffc4 	movi	r18,-1
 4000a9c:	14800326 	beq	r2,r18,4000aac <powf+0x4c>
 4000aa0:	9809883a 	mov	r4,r19
 4000aa4:	40033480 	call	4003348 <__fpclassifyf>
 4000aa8:	1000091e 	bne	r2,zero,4000ad0 <powf+0x70>
 4000aac:	8005883a 	mov	r2,r16
 4000ab0:	dfc00e17 	ldw	ra,56(sp)
 4000ab4:	dd000d17 	ldw	r20,52(sp)
 4000ab8:	dcc00c17 	ldw	r19,48(sp)
 4000abc:	dc800b17 	ldw	r18,44(sp)
 4000ac0:	dc400a17 	ldw	r17,40(sp)
 4000ac4:	dc000917 	ldw	r16,36(sp)
 4000ac8:	dec00f04 	addi	sp,sp,60
 4000acc:	f800283a 	ret
 4000ad0:	a009883a 	mov	r4,r20
 4000ad4:	40033480 	call	4003348 <__fpclassifyf>
 4000ad8:	000b883a 	mov	r5,zero
 4000adc:	1000241e 	bne	r2,zero,4000b70 <powf+0x110>
 4000ae0:	9809883a 	mov	r4,r19
 4000ae4:	4003e0c0 	call	4003e0c <__eqsf2>
 4000ae8:	103ff01e 	bne	r2,zero,4000aac <__alt_data_end+0xfc000aac>
 4000aec:	00800044 	movi	r2,1
 4000af0:	d8800015 	stw	r2,0(sp)
 4000af4:	00810074 	movhi	r2,1025
 4000af8:	a009883a 	mov	r4,r20
 4000afc:	10a93e04 	addi	r2,r2,-23304
 4000b00:	d8800115 	stw	r2,4(sp)
 4000b04:	d8000815 	stw	zero,32(sp)
 4000b08:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000b0c:	9809883a 	mov	r4,r19
 4000b10:	d8800215 	stw	r2,8(sp)
 4000b14:	d8c00315 	stw	r3,12(sp)
 4000b18:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000b1c:	89000017 	ldw	r4,0(r17)
 4000b20:	d8800415 	stw	r2,16(sp)
 4000b24:	008ffc34 	movhi	r2,16368
 4000b28:	d8c00515 	stw	r3,20(sp)
 4000b2c:	d8000615 	stw	zero,24(sp)
 4000b30:	d8800715 	stw	r2,28(sp)
 4000b34:	24802726 	beq	r4,r18,4000bd4 <powf+0x174>
 4000b38:	00800084 	movi	r2,2
 4000b3c:	20802526 	beq	r4,r2,4000bd4 <powf+0x174>
 4000b40:	d809883a 	mov	r4,sp
 4000b44:	40030280 	call	4003028 <matherr>
 4000b48:	10006a26 	beq	r2,zero,4000cf4 <powf+0x294>
 4000b4c:	d8800817 	ldw	r2,32(sp)
 4000b50:	10000326 	beq	r2,zero,4000b60 <powf+0x100>
 4000b54:	40074140 	call	4007414 <__errno>
 4000b58:	d8c00817 	ldw	r3,32(sp)
 4000b5c:	10c00015 	stw	r3,0(r2)
 4000b60:	d9000617 	ldw	r4,24(sp)
 4000b64:	d9400717 	ldw	r5,28(sp)
 4000b68:	400702c0 	call	400702c <__truncdfsf2>
 4000b6c:	003fd006 	br	4000ab0 <__alt_data_end+0xfc000ab0>
 4000b70:	a009883a 	mov	r4,r20
 4000b74:	4003e0c0 	call	4003e0c <__eqsf2>
 4000b78:	1000181e 	bne	r2,zero,4000bdc <powf+0x17c>
 4000b7c:	000b883a 	mov	r5,zero
 4000b80:	9809883a 	mov	r4,r19
 4000b84:	4003e0c0 	call	4003e0c <__eqsf2>
 4000b88:	10003a1e 	bne	r2,zero,4000c74 <powf+0x214>
 4000b8c:	00800044 	movi	r2,1
 4000b90:	d8800015 	stw	r2,0(sp)
 4000b94:	00810074 	movhi	r2,1025
 4000b98:	a009883a 	mov	r4,r20
 4000b9c:	10a93e04 	addi	r2,r2,-23304
 4000ba0:	d8800115 	stw	r2,4(sp)
 4000ba4:	d8000815 	stw	zero,32(sp)
 4000ba8:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000bac:	9809883a 	mov	r4,r19
 4000bb0:	d8800215 	stw	r2,8(sp)
 4000bb4:	d8c00315 	stw	r3,12(sp)
 4000bb8:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000bbc:	89000017 	ldw	r4,0(r17)
 4000bc0:	d8800415 	stw	r2,16(sp)
 4000bc4:	d8c00515 	stw	r3,20(sp)
 4000bc8:	d8000615 	stw	zero,24(sp)
 4000bcc:	d8000715 	stw	zero,28(sp)
 4000bd0:	203fdb26 	beq	r4,zero,4000b40 <__alt_data_end+0xfc000b40>
 4000bd4:	008fe034 	movhi	r2,16256
 4000bd8:	003fb506 	br	4000ab0 <__alt_data_end+0xfc000ab0>
 4000bdc:	8009883a 	mov	r4,r16
 4000be0:	400322c0 	call	400322c <finitef>
 4000be4:	10004726 	beq	r2,zero,4000d04 <powf+0x2a4>
 4000be8:	000b883a 	mov	r5,zero
 4000bec:	8009883a 	mov	r4,r16
 4000bf0:	4003e0c0 	call	4003e0c <__eqsf2>
 4000bf4:	103fad1e 	bne	r2,zero,4000aac <__alt_data_end+0xfc000aac>
 4000bf8:	a009883a 	mov	r4,r20
 4000bfc:	400322c0 	call	400322c <finitef>
 4000c00:	103faa26 	beq	r2,zero,4000aac <__alt_data_end+0xfc000aac>
 4000c04:	9809883a 	mov	r4,r19
 4000c08:	400322c0 	call	400322c <finitef>
 4000c0c:	103fa726 	beq	r2,zero,4000aac <__alt_data_end+0xfc000aac>
 4000c10:	00800104 	movi	r2,4
 4000c14:	d8800015 	stw	r2,0(sp)
 4000c18:	00810074 	movhi	r2,1025
 4000c1c:	a009883a 	mov	r4,r20
 4000c20:	10a93e04 	addi	r2,r2,-23304
 4000c24:	d8800115 	stw	r2,4(sp)
 4000c28:	d8000815 	stw	zero,32(sp)
 4000c2c:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000c30:	9809883a 	mov	r4,r19
 4000c34:	d8800215 	stw	r2,8(sp)
 4000c38:	d8c00315 	stw	r3,12(sp)
 4000c3c:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000c40:	89000017 	ldw	r4,0(r17)
 4000c44:	d8800415 	stw	r2,16(sp)
 4000c48:	d8c00515 	stw	r3,20(sp)
 4000c4c:	d8000615 	stw	zero,24(sp)
 4000c50:	d8000715 	stw	zero,28(sp)
 4000c54:	00800084 	movi	r2,2
 4000c58:	20804926 	beq	r4,r2,4000d80 <powf+0x320>
 4000c5c:	d809883a 	mov	r4,sp
 4000c60:	40030280 	call	4003028 <matherr>
 4000c64:	10004626 	beq	r2,zero,4000d80 <powf+0x320>
 4000c68:	d8800817 	ldw	r2,32(sp)
 4000c6c:	103fbc26 	beq	r2,zero,4000b60 <__alt_data_end+0xfc000b60>
 4000c70:	003fb806 	br	4000b54 <__alt_data_end+0xfc000b54>
 4000c74:	9809883a 	mov	r4,r19
 4000c78:	400322c0 	call	400322c <finitef>
 4000c7c:	103f8b26 	beq	r2,zero,4000aac <__alt_data_end+0xfc000aac>
 4000c80:	000b883a 	mov	r5,zero
 4000c84:	9809883a 	mov	r4,r19
 4000c88:	4003f400 	call	4003f40 <__lesf2>
 4000c8c:	103f870e 	bge	r2,zero,4000aac <__alt_data_end+0xfc000aac>
 4000c90:	00800044 	movi	r2,1
 4000c94:	d8800015 	stw	r2,0(sp)
 4000c98:	00810074 	movhi	r2,1025
 4000c9c:	a009883a 	mov	r4,r20
 4000ca0:	10a93e04 	addi	r2,r2,-23304
 4000ca4:	d8800115 	stw	r2,4(sp)
 4000ca8:	d8000815 	stw	zero,32(sp)
 4000cac:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000cb0:	9809883a 	mov	r4,r19
 4000cb4:	d8800215 	stw	r2,8(sp)
 4000cb8:	d8c00315 	stw	r3,12(sp)
 4000cbc:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000cc0:	89000017 	ldw	r4,0(r17)
 4000cc4:	d8800415 	stw	r2,16(sp)
 4000cc8:	d8c00515 	stw	r3,20(sp)
 4000ccc:	d8000615 	stw	zero,24(sp)
 4000cd0:	20002626 	beq	r4,zero,4000d6c <powf+0x30c>
 4000cd4:	00bffc34 	movhi	r2,65520
 4000cd8:	d8800715 	stw	r2,28(sp)
 4000cdc:	00800084 	movi	r2,2
 4000ce0:	2080231e 	bne	r4,r2,4000d70 <powf+0x310>
 4000ce4:	40074140 	call	4007414 <__errno>
 4000ce8:	00c00844 	movi	r3,33
 4000cec:	10c00015 	stw	r3,0(r2)
 4000cf0:	003fdd06 	br	4000c68 <__alt_data_end+0xfc000c68>
 4000cf4:	40074140 	call	4007414 <__errno>
 4000cf8:	00c00844 	movi	r3,33
 4000cfc:	10c00015 	stw	r3,0(r2)
 4000d00:	003f9206 	br	4000b4c <__alt_data_end+0xfc000b4c>
 4000d04:	a009883a 	mov	r4,r20
 4000d08:	400322c0 	call	400322c <finitef>
 4000d0c:	103fb626 	beq	r2,zero,4000be8 <__alt_data_end+0xfc000be8>
 4000d10:	9809883a 	mov	r4,r19
 4000d14:	400322c0 	call	400322c <finitef>
 4000d18:	103fb326 	beq	r2,zero,4000be8 <__alt_data_end+0xfc000be8>
 4000d1c:	8009883a 	mov	r4,r16
 4000d20:	40033480 	call	4003348 <__fpclassifyf>
 4000d24:	a009883a 	mov	r4,r20
 4000d28:	1000191e 	bne	r2,zero,4000d90 <powf+0x330>
 4000d2c:	00800044 	movi	r2,1
 4000d30:	d8800015 	stw	r2,0(sp)
 4000d34:	00810074 	movhi	r2,1025
 4000d38:	10a93e04 	addi	r2,r2,-23304
 4000d3c:	d8800115 	stw	r2,4(sp)
 4000d40:	d8000815 	stw	zero,32(sp)
 4000d44:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000d48:	9809883a 	mov	r4,r19
 4000d4c:	d8800215 	stw	r2,8(sp)
 4000d50:	d8c00315 	stw	r3,12(sp)
 4000d54:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000d58:	8c000017 	ldw	r16,0(r17)
 4000d5c:	d8800415 	stw	r2,16(sp)
 4000d60:	d8c00515 	stw	r3,20(sp)
 4000d64:	8000291e 	bne	r16,zero,4000e0c <powf+0x3ac>
 4000d68:	d8000615 	stw	zero,24(sp)
 4000d6c:	d8000715 	stw	zero,28(sp)
 4000d70:	d809883a 	mov	r4,sp
 4000d74:	40030280 	call	4003028 <matherr>
 4000d78:	103fbb1e 	bne	r2,zero,4000c68 <__alt_data_end+0xfc000c68>
 4000d7c:	003fd906 	br	4000ce4 <__alt_data_end+0xfc000ce4>
 4000d80:	40074140 	call	4007414 <__errno>
 4000d84:	00c00884 	movi	r3,34
 4000d88:	10c00015 	stw	r3,0(r2)
 4000d8c:	003fb606 	br	4000c68 <__alt_data_end+0xfc000c68>
 4000d90:	008000c4 	movi	r2,3
 4000d94:	d8800015 	stw	r2,0(sp)
 4000d98:	00810074 	movhi	r2,1025
 4000d9c:	10a93e04 	addi	r2,r2,-23304
 4000da0:	d8800115 	stw	r2,4(sp)
 4000da4:	d8000815 	stw	zero,32(sp)
 4000da8:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000dac:	9809883a 	mov	r4,r19
 4000db0:	d8800215 	stw	r2,8(sp)
 4000db4:	d8c00315 	stw	r3,12(sp)
 4000db8:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000dbc:	89000017 	ldw	r4,0(r17)
 4000dc0:	d8800415 	stw	r2,16(sp)
 4000dc4:	d8c00515 	stw	r3,20(sp)
 4000dc8:	000b883a 	mov	r5,zero
 4000dcc:	2000191e 	bne	r4,zero,4000e34 <powf+0x3d4>
 4000dd0:	00b80034 	movhi	r2,57344
 4000dd4:	d8800615 	stw	r2,24(sp)
 4000dd8:	0091fc34 	movhi	r2,18416
 4000ddc:	10bfffc4 	addi	r2,r2,-1
 4000de0:	a009883a 	mov	r4,r20
 4000de4:	d8800715 	stw	r2,28(sp)
 4000de8:	4003f400 	call	4003f40 <__lesf2>
 4000dec:	10001b16 	blt	r2,zero,4000e5c <powf+0x3fc>
 4000df0:	d809883a 	mov	r4,sp
 4000df4:	40030280 	call	4003028 <matherr>
 4000df8:	103f541e 	bne	r2,zero,4000b4c <__alt_data_end+0xfc000b4c>
 4000dfc:	40074140 	call	4007414 <__errno>
 4000e00:	00c00884 	movi	r3,34
 4000e04:	10c00015 	stw	r3,0(r2)
 4000e08:	003f5006 	br	4000b4c <__alt_data_end+0xfc000b4c>
 4000e0c:	000d883a 	mov	r6,zero
 4000e10:	000f883a 	mov	r7,zero
 4000e14:	0009883a 	mov	r4,zero
 4000e18:	000b883a 	mov	r5,zero
 4000e1c:	400535c0 	call	400535c <__divdf3>
 4000e20:	d8800615 	stw	r2,24(sp)
 4000e24:	d8c00715 	stw	r3,28(sp)
 4000e28:	00800084 	movi	r2,2
 4000e2c:	80bfad26 	beq	r16,r2,4000ce4 <__alt_data_end+0xfc000ce4>
 4000e30:	003fcf06 	br	4000d70 <__alt_data_end+0xfc000d70>
 4000e34:	009ffc34 	movhi	r2,32752
 4000e38:	a009883a 	mov	r4,r20
 4000e3c:	d8000615 	stw	zero,24(sp)
 4000e40:	d8800715 	stw	r2,28(sp)
 4000e44:	4003f400 	call	4003f40 <__lesf2>
 4000e48:	10001a16 	blt	r2,zero,4000eb4 <powf+0x454>
 4000e4c:	88c00017 	ldw	r3,0(r17)
 4000e50:	00800084 	movi	r2,2
 4000e54:	18bfe61e 	bne	r3,r2,4000df0 <__alt_data_end+0xfc000df0>
 4000e58:	003fe806 	br	4000dfc <__alt_data_end+0xfc000dfc>
 4000e5c:	014fc034 	movhi	r5,16128
 4000e60:	9809883a 	mov	r4,r19
 4000e64:	40040080 	call	4004008 <__mulsf3>
 4000e68:	1009883a 	mov	r4,r2
 4000e6c:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000e70:	1009883a 	mov	r4,r2
 4000e74:	180b883a 	mov	r5,r3
 4000e78:	1025883a 	mov	r18,r2
 4000e7c:	1821883a 	mov	r16,r3
 4000e80:	40030300 	call	4003030 <rint>
 4000e84:	100d883a 	mov	r6,r2
 4000e88:	180f883a 	mov	r7,r3
 4000e8c:	9009883a 	mov	r4,r18
 4000e90:	800b883a 	mov	r5,r16
 4000e94:	4005d2c0 	call	4005d2c <__eqdf2>
 4000e98:	103fec26 	beq	r2,zero,4000e4c <__alt_data_end+0xfc000e4c>
 4000e9c:	00b80034 	movhi	r2,57344
 4000ea0:	d8800615 	stw	r2,24(sp)
 4000ea4:	00b1fc34 	movhi	r2,51184
 4000ea8:	10bfffc4 	addi	r2,r2,-1
 4000eac:	d8800715 	stw	r2,28(sp)
 4000eb0:	003fe606 	br	4000e4c <__alt_data_end+0xfc000e4c>
 4000eb4:	014fc034 	movhi	r5,16128
 4000eb8:	9809883a 	mov	r4,r19
 4000ebc:	40040080 	call	4004008 <__mulsf3>
 4000ec0:	1009883a 	mov	r4,r2
 4000ec4:	4006f1c0 	call	4006f1c <__extendsfdf2>
 4000ec8:	1009883a 	mov	r4,r2
 4000ecc:	180b883a 	mov	r5,r3
 4000ed0:	1025883a 	mov	r18,r2
 4000ed4:	1821883a 	mov	r16,r3
 4000ed8:	40030300 	call	4003030 <rint>
 4000edc:	100d883a 	mov	r6,r2
 4000ee0:	180f883a 	mov	r7,r3
 4000ee4:	9009883a 	mov	r4,r18
 4000ee8:	800b883a 	mov	r5,r16
 4000eec:	4005d2c0 	call	4005d2c <__eqdf2>
 4000ef0:	103fd626 	beq	r2,zero,4000e4c <__alt_data_end+0xfc000e4c>
 4000ef4:	00bffc34 	movhi	r2,65520
 4000ef8:	d8000615 	stw	zero,24(sp)
 4000efc:	d8800715 	stw	r2,28(sp)
 4000f00:	003fd206 	br	4000e4c <__alt_data_end+0xfc000e4c>

04000f04 <__ieee754_powf>:
 4000f04:	00a00034 	movhi	r2,32768
 4000f08:	defff104 	addi	sp,sp,-60
 4000f0c:	10bfffc4 	addi	r2,r2,-1
 4000f10:	dc800715 	stw	r18,28(sp)
 4000f14:	dfc00e15 	stw	ra,56(sp)
 4000f18:	df000d15 	stw	fp,52(sp)
 4000f1c:	ddc00c15 	stw	r23,48(sp)
 4000f20:	dd800b15 	stw	r22,44(sp)
 4000f24:	dd400a15 	stw	r21,40(sp)
 4000f28:	dd000915 	stw	r20,36(sp)
 4000f2c:	dcc00815 	stw	r19,32(sp)
 4000f30:	dc400615 	stw	r17,24(sp)
 4000f34:	dc000515 	stw	r16,20(sp)
 4000f38:	1164703a 	and	r18,r2,r5
 4000f3c:	90003426 	beq	r18,zero,4001010 <__ieee754_powf+0x10c>
 4000f40:	1126703a 	and	r19,r2,r4
 4000f44:	009fe034 	movhi	r2,32640
 4000f48:	2021883a 	mov	r16,r4
 4000f4c:	202b883a 	mov	r21,r4
 4000f50:	14c00e0e 	bge	r2,r19,4000f8c <__ieee754_powf+0x88>
 4000f54:	01010074 	movhi	r4,1025
 4000f58:	21293f04 	addi	r4,r4,-23300
 4000f5c:	dfc00e17 	ldw	ra,56(sp)
 4000f60:	df000d17 	ldw	fp,52(sp)
 4000f64:	ddc00c17 	ldw	r23,48(sp)
 4000f68:	dd800b17 	ldw	r22,44(sp)
 4000f6c:	dd400a17 	ldw	r21,40(sp)
 4000f70:	dd000917 	ldw	r20,36(sp)
 4000f74:	dcc00817 	ldw	r19,32(sp)
 4000f78:	dc800717 	ldw	r18,28(sp)
 4000f7c:	dc400617 	ldw	r17,24(sp)
 4000f80:	dc000517 	ldw	r16,20(sp)
 4000f84:	dec00f04 	addi	sp,sp,60
 4000f88:	40033a01 	jmpi	40033a0 <nanf>
 4000f8c:	14802d16 	blt	r2,r18,4001044 <__ieee754_powf+0x140>
 4000f90:	2823883a 	mov	r17,r5
 4000f94:	2829883a 	mov	r20,r5
 4000f98:	20004216 	blt	r4,zero,40010a4 <__ieee754_powf+0x1a0>
 4000f9c:	002d883a 	mov	r22,zero
 4000fa0:	009fe034 	movhi	r2,32640
 4000fa4:	90803926 	beq	r18,r2,400108c <__ieee754_powf+0x188>
 4000fa8:	008fe034 	movhi	r2,16256
 4000fac:	90804b26 	beq	r18,r2,40010dc <__ieee754_powf+0x1d8>
 4000fb0:	00900034 	movhi	r2,16384
 4000fb4:	a0805926 	beq	r20,r2,400111c <__ieee754_powf+0x218>
 4000fb8:	008fc034 	movhi	r2,16128
 4000fbc:	8009883a 	mov	r4,r16
 4000fc0:	a0802426 	beq	r20,r2,4001054 <__ieee754_powf+0x150>
 4000fc4:	400321c0 	call	400321c <fabsf>
 4000fc8:	1009883a 	mov	r4,r2
 4000fcc:	009fe034 	movhi	r2,32640
 4000fd0:	98804526 	beq	r19,r2,40010e8 <__ieee754_powf+0x1e4>
 4000fd4:	98004426 	beq	r19,zero,40010e8 <__ieee754_powf+0x1e4>
 4000fd8:	014fe034 	movhi	r5,16256
 4000fdc:	99404226 	beq	r19,r5,40010e8 <__ieee754_powf+0x1e4>
 4000fe0:	802ad7fa 	srli	r21,r16,31
 4000fe4:	ad7fffc4 	addi	r21,r21,-1
 4000fe8:	b544b03a 	or	r2,r22,r21
 4000fec:	10006726 	beq	r2,zero,400118c <__ieee754_powf+0x288>
 4000ff0:	00934034 	movhi	r2,19712
 4000ff4:	14806c0e 	bge	r2,r18,40011a8 <__ieee754_powf+0x2a4>
 4000ff8:	008fe034 	movhi	r2,16256
 4000ffc:	10bffdc4 	addi	r2,r2,-9
 4001000:	14c1f816 	blt	r2,r19,40017e4 <__ieee754_powf+0x8e0>
 4001004:	a001fb16 	blt	r20,zero,40017f4 <__ieee754_powf+0x8f0>
 4001008:	0005883a 	mov	r2,zero
 400100c:	00000106 	br	4001014 <__ieee754_powf+0x110>
 4001010:	008fe034 	movhi	r2,16256
 4001014:	dfc00e17 	ldw	ra,56(sp)
 4001018:	df000d17 	ldw	fp,52(sp)
 400101c:	ddc00c17 	ldw	r23,48(sp)
 4001020:	dd800b17 	ldw	r22,44(sp)
 4001024:	dd400a17 	ldw	r21,40(sp)
 4001028:	dd000917 	ldw	r20,36(sp)
 400102c:	dcc00817 	ldw	r19,32(sp)
 4001030:	dc800717 	ldw	r18,28(sp)
 4001034:	dc400617 	ldw	r17,24(sp)
 4001038:	dc000517 	ldw	r16,20(sp)
 400103c:	dec00f04 	addi	sp,sp,60
 4001040:	f800283a 	ret
 4001044:	00cfe034 	movhi	r3,16256
 4001048:	9805883a 	mov	r2,r19
 400104c:	98fff126 	beq	r19,r3,4001014 <__alt_data_end+0xfc001014>
 4001050:	003fc006 	br	4000f54 <__alt_data_end+0xfc000f54>
 4001054:	a800350e 	bge	r21,zero,400112c <__ieee754_powf+0x228>
 4001058:	400321c0 	call	400321c <fabsf>
 400105c:	1009883a 	mov	r4,r2
 4001060:	009fe034 	movhi	r2,32640
 4001064:	98800126 	beq	r19,r2,400106c <__ieee754_powf+0x168>
 4001068:	983fdb1e 	bne	r19,zero,4000fd8 <__alt_data_end+0xfc000fd8>
 400106c:	00b02034 	movhi	r2,49280
 4001070:	9885883a 	add	r2,r19,r2
 4001074:	1584b03a 	or	r2,r2,r22
 4001078:	10003e26 	beq	r2,zero,4001174 <__ieee754_powf+0x270>
 400107c:	00800044 	movi	r2,1
 4001080:	b081cf26 	beq	r22,r2,40017c0 <__ieee754_powf+0x8bc>
 4001084:	2005883a 	mov	r2,r4
 4001088:	003fe206 	br	4001014 <__alt_data_end+0xfc001014>
 400108c:	008fe034 	movhi	r2,16256
 4001090:	98803226 	beq	r19,r2,400115c <__ieee754_powf+0x258>
 4001094:	14c01e0e 	bge	r2,r19,4001110 <__ieee754_powf+0x20c>
 4001098:	a03fdb16 	blt	r20,zero,4001008 <__alt_data_end+0xfc001008>
 400109c:	8805883a 	mov	r2,r17
 40010a0:	003fdc06 	br	4001014 <__alt_data_end+0xfc001014>
 40010a4:	0092e034 	movhi	r2,19328
 40010a8:	10bfffc4 	addi	r2,r2,-1
 40010ac:	14801616 	blt	r2,r18,4001108 <__ieee754_powf+0x204>
 40010b0:	008fe034 	movhi	r2,16256
 40010b4:	10bfffc4 	addi	r2,r2,-1
 40010b8:	1480060e 	bge	r2,r18,40010d4 <__ieee754_powf+0x1d0>
 40010bc:	9005d5fa 	srai	r2,r18,23
 40010c0:	00c02584 	movi	r3,150
 40010c4:	1885c83a 	sub	r2,r3,r2
 40010c8:	9087d83a 	sra	r3,r18,r2
 40010cc:	1884983a 	sll	r2,r3,r2
 40010d0:	9081b526 	beq	r18,r2,40017a8 <__ieee754_powf+0x8a4>
 40010d4:	002d883a 	mov	r22,zero
 40010d8:	003fb306 	br	4000fa8 <__alt_data_end+0xfc000fa8>
 40010dc:	a0002116 	blt	r20,zero,4001164 <__ieee754_powf+0x260>
 40010e0:	8005883a 	mov	r2,r16
 40010e4:	003fcb06 	br	4001014 <__alt_data_end+0xfc001014>
 40010e8:	a000040e 	bge	r20,zero,40010fc <__ieee754_powf+0x1f8>
 40010ec:	200b883a 	mov	r5,r4
 40010f0:	010fe034 	movhi	r4,16256
 40010f4:	40039cc0 	call	40039cc <__divsf3>
 40010f8:	1009883a 	mov	r4,r2
 40010fc:	2005883a 	mov	r2,r4
 4001100:	a83fc40e 	bge	r21,zero,4001014 <__alt_data_end+0xfc001014>
 4001104:	003fd906 	br	400106c <__alt_data_end+0xfc00106c>
 4001108:	05800084 	movi	r22,2
 400110c:	003fa406 	br	4000fa0 <__alt_data_end+0xfc000fa0>
 4001110:	a03fbd0e 	bge	r20,zero,4001008 <__alt_data_end+0xfc001008>
 4001114:	88a0003c 	xorhi	r2,r17,32768
 4001118:	003fbe06 	br	4001014 <__alt_data_end+0xfc001014>
 400111c:	800b883a 	mov	r5,r16
 4001120:	8009883a 	mov	r4,r16
 4001124:	40040080 	call	4004008 <__mulsf3>
 4001128:	003fba06 	br	4001014 <__alt_data_end+0xfc001014>
 400112c:	dfc00e17 	ldw	ra,56(sp)
 4001130:	df000d17 	ldw	fp,52(sp)
 4001134:	ddc00c17 	ldw	r23,48(sp)
 4001138:	dd800b17 	ldw	r22,44(sp)
 400113c:	dd400a17 	ldw	r21,40(sp)
 4001140:	dd000917 	ldw	r20,36(sp)
 4001144:	dcc00817 	ldw	r19,32(sp)
 4001148:	dc800717 	ldw	r18,28(sp)
 400114c:	dc400617 	ldw	r17,24(sp)
 4001150:	dc000517 	ldw	r16,20(sp)
 4001154:	dec00f04 	addi	sp,sp,60
 4001158:	4001f4c1 	jmpi	4001f4c <__ieee754_sqrtf>
 400115c:	9805883a 	mov	r2,r19
 4001160:	003fac06 	br	4001014 <__alt_data_end+0xfc001014>
 4001164:	800b883a 	mov	r5,r16
 4001168:	9009883a 	mov	r4,r18
 400116c:	40039cc0 	call	40039cc <__divsf3>
 4001170:	003fa806 	br	4001014 <__alt_data_end+0xfc001014>
 4001174:	200b883a 	mov	r5,r4
 4001178:	40044380 	call	4004438 <__subsf3>
 400117c:	100b883a 	mov	r5,r2
 4001180:	1009883a 	mov	r4,r2
 4001184:	40039cc0 	call	40039cc <__divsf3>
 4001188:	003fa206 	br	4001014 <__alt_data_end+0xfc001014>
 400118c:	800b883a 	mov	r5,r16
 4001190:	8009883a 	mov	r4,r16
 4001194:	40044380 	call	4004438 <__subsf3>
 4001198:	100b883a 	mov	r5,r2
 400119c:	1009883a 	mov	r4,r2
 40011a0:	40039cc0 	call	40039cc <__divsf3>
 40011a4:	003f9b06 	br	4001014 <__alt_data_end+0xfc001014>
 40011a8:	00802034 	movhi	r2,128
 40011ac:	10bfffc4 	addi	r2,r2,-1
 40011b0:	14c18a16 	blt	r2,r19,40017dc <__ieee754_powf+0x8d8>
 40011b4:	0152e034 	movhi	r5,19328
 40011b8:	40040080 	call	4004008 <__mulsf3>
 40011bc:	1027883a 	mov	r19,r2
 40011c0:	01bffa04 	movi	r6,-24
 40011c4:	9807d5fa 	srai	r3,r19,23
 40011c8:	00802034 	movhi	r2,128
 40011cc:	10bfffc4 	addi	r2,r2,-1
 40011d0:	18ffe044 	addi	r3,r3,-127
 40011d4:	198d883a 	add	r6,r3,r6
 40011d8:	00c00774 	movhi	r3,29
 40011dc:	9884703a 	and	r2,r19,r2
 40011e0:	18f11c44 	addi	r3,r3,-15247
 40011e4:	140fe034 	orhi	r16,r2,16256
 40011e8:	1881770e 	bge	r3,r2,40017c8 <__ieee754_powf+0x8c4>
 40011ec:	00c017b4 	movhi	r3,94
 40011f0:	18ecf584 	addi	r3,r3,-19498
 40011f4:	1881fc0e 	bge	r3,r2,40019e8 <__ieee754_powf+0xae4>
 40011f8:	00bfe034 	movhi	r2,65408
 40011fc:	31800044 	addi	r6,r6,1
 4001200:	80a1883a 	add	r16,r16,r2
 4001204:	d8000015 	stw	zero,0(sp)
 4001208:	0011883a 	mov	r8,zero
 400120c:	0007883a 	mov	r3,zero
 4001210:	050fe034 	movhi	r20,16256
 4001214:	a00b883a 	mov	r5,r20
 4001218:	8009883a 	mov	r4,r16
 400121c:	d9800415 	stw	r6,16(sp)
 4001220:	da000315 	stw	r8,12(sp)
 4001224:	d8c00115 	stw	r3,4(sp)
 4001228:	40044380 	call	4004438 <__subsf3>
 400122c:	a00b883a 	mov	r5,r20
 4001230:	8009883a 	mov	r4,r16
 4001234:	1039883a 	mov	fp,r2
 4001238:	40035040 	call	4003504 <__addsf3>
 400123c:	100b883a 	mov	r5,r2
 4001240:	010fe034 	movhi	r4,16256
 4001244:	40039cc0 	call	40039cc <__divsf3>
 4001248:	e009883a 	mov	r4,fp
 400124c:	100b883a 	mov	r5,r2
 4001250:	d8800215 	stw	r2,8(sp)
 4001254:	40040080 	call	4004008 <__mulsf3>
 4001258:	102f883a 	mov	r23,r2
 400125c:	8005d07a 	srai	r2,r16,1
 4001260:	d8c00117 	ldw	r3,4(sp)
 4001264:	04bc0004 	movi	r18,-4096
 4001268:	11080034 	orhi	r4,r2,8192
 400126c:	00800134 	movhi	r2,4
 4001270:	2085883a 	add	r2,r4,r2
 4001274:	95e6703a 	and	r19,r18,r23
 4001278:	10c7883a 	add	r3,r2,r3
 400127c:	180b883a 	mov	r5,r3
 4001280:	9809883a 	mov	r4,r19
 4001284:	d8c00115 	stw	r3,4(sp)
 4001288:	40040080 	call	4004008 <__mulsf3>
 400128c:	e009883a 	mov	r4,fp
 4001290:	100b883a 	mov	r5,r2
 4001294:	40044380 	call	4004438 <__subsf3>
 4001298:	d8c00117 	ldw	r3,4(sp)
 400129c:	a00b883a 	mov	r5,r20
 40012a0:	1039883a 	mov	fp,r2
 40012a4:	1809883a 	mov	r4,r3
 40012a8:	40044380 	call	4004438 <__subsf3>
 40012ac:	8009883a 	mov	r4,r16
 40012b0:	100b883a 	mov	r5,r2
 40012b4:	40044380 	call	4004438 <__subsf3>
 40012b8:	980b883a 	mov	r5,r19
 40012bc:	1009883a 	mov	r4,r2
 40012c0:	40040080 	call	4004008 <__mulsf3>
 40012c4:	e009883a 	mov	r4,fp
 40012c8:	100b883a 	mov	r5,r2
 40012cc:	40044380 	call	4004438 <__subsf3>
 40012d0:	da400217 	ldw	r9,8(sp)
 40012d4:	1009883a 	mov	r4,r2
 40012d8:	480b883a 	mov	r5,r9
 40012dc:	40040080 	call	4004008 <__mulsf3>
 40012e0:	b80b883a 	mov	r5,r23
 40012e4:	b809883a 	mov	r4,r23
 40012e8:	1029883a 	mov	r20,r2
 40012ec:	40040080 	call	4004008 <__mulsf3>
 40012f0:	014f9534 	movhi	r5,15956
 40012f4:	297c5084 	addi	r5,r5,-3774
 40012f8:	1009883a 	mov	r4,r2
 40012fc:	1021883a 	mov	r16,r2
 4001300:	40040080 	call	4004008 <__mulsf3>
 4001304:	014f9b34 	movhi	r5,15980
 4001308:	294c9544 	addi	r5,r5,12885
 400130c:	1009883a 	mov	r4,r2
 4001310:	40035040 	call	4003504 <__addsf3>
 4001314:	800b883a 	mov	r5,r16
 4001318:	1009883a 	mov	r4,r2
 400131c:	40040080 	call	4004008 <__mulsf3>
 4001320:	014fa334 	movhi	r5,16012
 4001324:	2968c144 	addi	r5,r5,-23803
 4001328:	1009883a 	mov	r4,r2
 400132c:	40035040 	call	4003504 <__addsf3>
 4001330:	800b883a 	mov	r5,r16
 4001334:	1009883a 	mov	r4,r2
 4001338:	40040080 	call	4004008 <__mulsf3>
 400133c:	014faaf4 	movhi	r5,16043
 4001340:	296aaac4 	addi	r5,r5,-21845
 4001344:	1009883a 	mov	r4,r2
 4001348:	40035040 	call	4003504 <__addsf3>
 400134c:	800b883a 	mov	r5,r16
 4001350:	1009883a 	mov	r4,r2
 4001354:	40040080 	call	4004008 <__mulsf3>
 4001358:	014fb6f4 	movhi	r5,16091
 400135c:	295b6dc4 	addi	r5,r5,28087
 4001360:	1009883a 	mov	r4,r2
 4001364:	40035040 	call	4003504 <__addsf3>
 4001368:	800b883a 	mov	r5,r16
 400136c:	1009883a 	mov	r4,r2
 4001370:	40040080 	call	4004008 <__mulsf3>
 4001374:	014fc6b4 	movhi	r5,16154
 4001378:	29666684 	addi	r5,r5,-26214
 400137c:	1009883a 	mov	r4,r2
 4001380:	40035040 	call	4003504 <__addsf3>
 4001384:	800b883a 	mov	r5,r16
 4001388:	8009883a 	mov	r4,r16
 400138c:	1039883a 	mov	fp,r2
 4001390:	40040080 	call	4004008 <__mulsf3>
 4001394:	e009883a 	mov	r4,fp
 4001398:	100b883a 	mov	r5,r2
 400139c:	40040080 	call	4004008 <__mulsf3>
 40013a0:	980b883a 	mov	r5,r19
 40013a4:	b809883a 	mov	r4,r23
 40013a8:	1021883a 	mov	r16,r2
 40013ac:	40035040 	call	4003504 <__addsf3>
 40013b0:	a00b883a 	mov	r5,r20
 40013b4:	1009883a 	mov	r4,r2
 40013b8:	40040080 	call	4004008 <__mulsf3>
 40013bc:	800b883a 	mov	r5,r16
 40013c0:	1009883a 	mov	r4,r2
 40013c4:	40035040 	call	4003504 <__addsf3>
 40013c8:	980b883a 	mov	r5,r19
 40013cc:	9809883a 	mov	r4,r19
 40013d0:	1021883a 	mov	r16,r2
 40013d4:	40040080 	call	4004008 <__mulsf3>
 40013d8:	01501034 	movhi	r5,16448
 40013dc:	1009883a 	mov	r4,r2
 40013e0:	d8800115 	stw	r2,4(sp)
 40013e4:	40035040 	call	4003504 <__addsf3>
 40013e8:	800b883a 	mov	r5,r16
 40013ec:	1009883a 	mov	r4,r2
 40013f0:	40035040 	call	4003504 <__addsf3>
 40013f4:	14b8703a 	and	fp,r2,r18
 40013f8:	e00b883a 	mov	r5,fp
 40013fc:	9809883a 	mov	r4,r19
 4001400:	40040080 	call	4004008 <__mulsf3>
 4001404:	e009883a 	mov	r4,fp
 4001408:	01501034 	movhi	r5,16448
 400140c:	1027883a 	mov	r19,r2
 4001410:	40044380 	call	4004438 <__subsf3>
 4001414:	d9c00117 	ldw	r7,4(sp)
 4001418:	1009883a 	mov	r4,r2
 400141c:	380b883a 	mov	r5,r7
 4001420:	40044380 	call	4004438 <__subsf3>
 4001424:	8009883a 	mov	r4,r16
 4001428:	100b883a 	mov	r5,r2
 400142c:	40044380 	call	4004438 <__subsf3>
 4001430:	b80b883a 	mov	r5,r23
 4001434:	1009883a 	mov	r4,r2
 4001438:	40040080 	call	4004008 <__mulsf3>
 400143c:	e00b883a 	mov	r5,fp
 4001440:	a009883a 	mov	r4,r20
 4001444:	1021883a 	mov	r16,r2
 4001448:	40040080 	call	4004008 <__mulsf3>
 400144c:	8009883a 	mov	r4,r16
 4001450:	100b883a 	mov	r5,r2
 4001454:	40035040 	call	4003504 <__addsf3>
 4001458:	9809883a 	mov	r4,r19
 400145c:	100b883a 	mov	r5,r2
 4001460:	1039883a 	mov	fp,r2
 4001464:	40035040 	call	4003504 <__addsf3>
 4001468:	14a0703a 	and	r16,r2,r18
 400146c:	014fddb4 	movhi	r5,16246
 4001470:	8009883a 	mov	r4,r16
 4001474:	294e0004 	addi	r5,r5,14336
 4001478:	40040080 	call	4004008 <__mulsf3>
 400147c:	980b883a 	mov	r5,r19
 4001480:	8009883a 	mov	r4,r16
 4001484:	102f883a 	mov	r23,r2
 4001488:	40044380 	call	4004438 <__subsf3>
 400148c:	100b883a 	mov	r5,r2
 4001490:	e009883a 	mov	r4,fp
 4001494:	40044380 	call	4004438 <__subsf3>
 4001498:	014fddb4 	movhi	r5,16246
 400149c:	294e13c4 	addi	r5,r5,14415
 40014a0:	1009883a 	mov	r4,r2
 40014a4:	40040080 	call	4004008 <__mulsf3>
 40014a8:	014da7b4 	movhi	r5,13982
 40014ac:	8009883a 	mov	r4,r16
 40014b0:	2970e804 	addi	r5,r5,-15456
 40014b4:	1027883a 	mov	r19,r2
 40014b8:	40040080 	call	4004008 <__mulsf3>
 40014bc:	9809883a 	mov	r4,r19
 40014c0:	100b883a 	mov	r5,r2
 40014c4:	40035040 	call	4003504 <__addsf3>
 40014c8:	da000317 	ldw	r8,12(sp)
 40014cc:	1009883a 	mov	r4,r2
 40014d0:	400b883a 	mov	r5,r8
 40014d4:	40035040 	call	4003504 <__addsf3>
 40014d8:	d9800417 	ldw	r6,16(sp)
 40014dc:	1027883a 	mov	r19,r2
 40014e0:	3009883a 	mov	r4,r6
 40014e4:	400498c0 	call	400498c <__floatsisf>
 40014e8:	b809883a 	mov	r4,r23
 40014ec:	980b883a 	mov	r5,r19
 40014f0:	1021883a 	mov	r16,r2
 40014f4:	40035040 	call	4003504 <__addsf3>
 40014f8:	d9400017 	ldw	r5,0(sp)
 40014fc:	1009883a 	mov	r4,r2
 4001500:	40035040 	call	4003504 <__addsf3>
 4001504:	800b883a 	mov	r5,r16
 4001508:	1009883a 	mov	r4,r2
 400150c:	40035040 	call	4003504 <__addsf3>
 4001510:	1484703a 	and	r2,r2,r18
 4001514:	800b883a 	mov	r5,r16
 4001518:	1009883a 	mov	r4,r2
 400151c:	1021883a 	mov	r16,r2
 4001520:	40044380 	call	4004438 <__subsf3>
 4001524:	d9400017 	ldw	r5,0(sp)
 4001528:	1009883a 	mov	r4,r2
 400152c:	40044380 	call	4004438 <__subsf3>
 4001530:	b80b883a 	mov	r5,r23
 4001534:	1009883a 	mov	r4,r2
 4001538:	40044380 	call	4004438 <__subsf3>
 400153c:	100b883a 	mov	r5,r2
 4001540:	9809883a 	mov	r4,r19
 4001544:	40044380 	call	4004438 <__subsf3>
 4001548:	102f883a 	mov	r23,r2
 400154c:	b5bfffc4 	addi	r22,r22,-1
 4001550:	b56ab03a 	or	r21,r22,r21
 4001554:	a8009826 	beq	r21,zero,40017b8 <__ieee754_powf+0x8b4>
 4001558:	048fe034 	movhi	r18,16256
 400155c:	053c0004 	movi	r20,-4096
 4001560:	a468703a 	and	r20,r20,r17
 4001564:	a00b883a 	mov	r5,r20
 4001568:	8809883a 	mov	r4,r17
 400156c:	40044380 	call	4004438 <__subsf3>
 4001570:	800b883a 	mov	r5,r16
 4001574:	1009883a 	mov	r4,r2
 4001578:	40040080 	call	4004008 <__mulsf3>
 400157c:	880b883a 	mov	r5,r17
 4001580:	b809883a 	mov	r4,r23
 4001584:	1027883a 	mov	r19,r2
 4001588:	40040080 	call	4004008 <__mulsf3>
 400158c:	9809883a 	mov	r4,r19
 4001590:	100b883a 	mov	r5,r2
 4001594:	40035040 	call	4003504 <__addsf3>
 4001598:	a00b883a 	mov	r5,r20
 400159c:	8009883a 	mov	r4,r16
 40015a0:	1027883a 	mov	r19,r2
 40015a4:	40040080 	call	4004008 <__mulsf3>
 40015a8:	100b883a 	mov	r5,r2
 40015ac:	9809883a 	mov	r4,r19
 40015b0:	04200034 	movhi	r16,32768
 40015b4:	1029883a 	mov	r20,r2
 40015b8:	843fffc4 	addi	r16,r16,-1
 40015bc:	40035040 	call	4003504 <__addsf3>
 40015c0:	1023883a 	mov	r17,r2
 40015c4:	a02d883a 	mov	r22,r20
 40015c8:	102f883a 	mov	r23,r2
 40015cc:	80a0703a 	and	r16,r16,r2
 40015d0:	0080bc0e 	bge	zero,r2,40018c4 <__ieee754_powf+0x9c0>
 40015d4:	00d0c034 	movhi	r3,17152
 40015d8:	1c009716 	blt	r3,r16,4001838 <__ieee754_powf+0x934>
 40015dc:	80c08a26 	beq	r16,r3,4001808 <__ieee754_powf+0x904>
 40015e0:	00cfc034 	movhi	r3,16128
 40015e4:	1c009d16 	blt	r3,r16,400185c <__ieee754_powf+0x958>
 40015e8:	0023883a 	mov	r17,zero
 40015ec:	002b883a 	mov	r21,zero
 40015f0:	043c0004 	movi	r16,-4096
 40015f4:	1420703a 	and	r16,r2,r16
 40015f8:	014fcc74 	movhi	r5,16177
 40015fc:	8009883a 	mov	r4,r16
 4001600:	295c8004 	addi	r5,r5,29184
 4001604:	40040080 	call	4004008 <__mulsf3>
 4001608:	b00b883a 	mov	r5,r22
 400160c:	8009883a 	mov	r4,r16
 4001610:	1029883a 	mov	r20,r2
 4001614:	40044380 	call	4004438 <__subsf3>
 4001618:	9809883a 	mov	r4,r19
 400161c:	100b883a 	mov	r5,r2
 4001620:	40044380 	call	4004438 <__subsf3>
 4001624:	014fcc74 	movhi	r5,16177
 4001628:	295c8604 	addi	r5,r5,29208
 400162c:	1009883a 	mov	r4,r2
 4001630:	40040080 	call	4004008 <__mulsf3>
 4001634:	014d7034 	movhi	r5,13760
 4001638:	8009883a 	mov	r4,r16
 400163c:	296fa304 	addi	r5,r5,-16756
 4001640:	1027883a 	mov	r19,r2
 4001644:	40040080 	call	4004008 <__mulsf3>
 4001648:	9809883a 	mov	r4,r19
 400164c:	100b883a 	mov	r5,r2
 4001650:	40035040 	call	4003504 <__addsf3>
 4001654:	a009883a 	mov	r4,r20
 4001658:	100b883a 	mov	r5,r2
 400165c:	1027883a 	mov	r19,r2
 4001660:	40035040 	call	4003504 <__addsf3>
 4001664:	a00b883a 	mov	r5,r20
 4001668:	1009883a 	mov	r4,r2
 400166c:	1021883a 	mov	r16,r2
 4001670:	40044380 	call	4004438 <__subsf3>
 4001674:	9809883a 	mov	r4,r19
 4001678:	100b883a 	mov	r5,r2
 400167c:	40044380 	call	4004438 <__subsf3>
 4001680:	800b883a 	mov	r5,r16
 4001684:	8009883a 	mov	r4,r16
 4001688:	1029883a 	mov	r20,r2
 400168c:	40040080 	call	4004008 <__mulsf3>
 4001690:	014cccb4 	movhi	r5,13106
 4001694:	296ed304 	addi	r5,r5,-17588
 4001698:	1009883a 	mov	r4,r2
 400169c:	1027883a 	mov	r19,r2
 40016a0:	40040080 	call	4004008 <__mulsf3>
 40016a4:	014d77b4 	movhi	r5,13790
 40016a8:	297a8384 	addi	r5,r5,-5618
 40016ac:	1009883a 	mov	r4,r2
 40016b0:	40044380 	call	4004438 <__subsf3>
 40016b4:	980b883a 	mov	r5,r19
 40016b8:	1009883a 	mov	r4,r2
 40016bc:	40040080 	call	4004008 <__mulsf3>
 40016c0:	014e22f4 	movhi	r5,14475
 40016c4:	296cd544 	addi	r5,r5,-19627
 40016c8:	1009883a 	mov	r4,r2
 40016cc:	40035040 	call	4003504 <__addsf3>
 40016d0:	980b883a 	mov	r5,r19
 40016d4:	1009883a 	mov	r4,r2
 40016d8:	40040080 	call	4004008 <__mulsf3>
 40016dc:	014ecdb4 	movhi	r5,15158
 40016e0:	2942d844 	addi	r5,r5,2913
 40016e4:	1009883a 	mov	r4,r2
 40016e8:	40044380 	call	4004438 <__subsf3>
 40016ec:	980b883a 	mov	r5,r19
 40016f0:	1009883a 	mov	r4,r2
 40016f4:	40040080 	call	4004008 <__mulsf3>
 40016f8:	014f8af4 	movhi	r5,15915
 40016fc:	296aaac4 	addi	r5,r5,-21845
 4001700:	1009883a 	mov	r4,r2
 4001704:	40035040 	call	4003504 <__addsf3>
 4001708:	980b883a 	mov	r5,r19
 400170c:	1009883a 	mov	r4,r2
 4001710:	40040080 	call	4004008 <__mulsf3>
 4001714:	100b883a 	mov	r5,r2
 4001718:	8009883a 	mov	r4,r16
 400171c:	40044380 	call	4004438 <__subsf3>
 4001720:	100b883a 	mov	r5,r2
 4001724:	8009883a 	mov	r4,r16
 4001728:	1027883a 	mov	r19,r2
 400172c:	40040080 	call	4004008 <__mulsf3>
 4001730:	9809883a 	mov	r4,r19
 4001734:	01500034 	movhi	r5,16384
 4001738:	102d883a 	mov	r22,r2
 400173c:	40044380 	call	4004438 <__subsf3>
 4001740:	100b883a 	mov	r5,r2
 4001744:	b009883a 	mov	r4,r22
 4001748:	40039cc0 	call	40039cc <__divsf3>
 400174c:	a00b883a 	mov	r5,r20
 4001750:	8009883a 	mov	r4,r16
 4001754:	1027883a 	mov	r19,r2
 4001758:	40040080 	call	4004008 <__mulsf3>
 400175c:	a00b883a 	mov	r5,r20
 4001760:	1009883a 	mov	r4,r2
 4001764:	40035040 	call	4003504 <__addsf3>
 4001768:	100b883a 	mov	r5,r2
 400176c:	9809883a 	mov	r4,r19
 4001770:	40044380 	call	4004438 <__subsf3>
 4001774:	800b883a 	mov	r5,r16
 4001778:	1009883a 	mov	r4,r2
 400177c:	40044380 	call	4004438 <__subsf3>
 4001780:	010fe034 	movhi	r4,16256
 4001784:	100b883a 	mov	r5,r2
 4001788:	40044380 	call	4004438 <__subsf3>
 400178c:	8887883a 	add	r3,r17,r2
 4001790:	1809d5fa 	srai	r4,r3,23
 4001794:	01009f0e 	bge	zero,r4,4001a14 <__ieee754_powf+0xb10>
 4001798:	1809883a 	mov	r4,r3
 400179c:	900b883a 	mov	r5,r18
 40017a0:	40040080 	call	4004008 <__mulsf3>
 40017a4:	003e1b06 	br	4001014 <__alt_data_end+0xfc001014>
 40017a8:	18c0004c 	andi	r3,r3,1
 40017ac:	05800084 	movi	r22,2
 40017b0:	b0edc83a 	sub	r22,r22,r3
 40017b4:	003dfc06 	br	4000fa8 <__alt_data_end+0xfc000fa8>
 40017b8:	04afe034 	movhi	r18,49024
 40017bc:	003f6706 	br	400155c <__alt_data_end+0xfc00155c>
 40017c0:	20a0003c 	xorhi	r2,r4,32768
 40017c4:	003e1306 	br	4001014 <__alt_data_end+0xfc001014>
 40017c8:	0011883a 	mov	r8,zero
 40017cc:	d8000015 	stw	zero,0(sp)
 40017d0:	0007883a 	mov	r3,zero
 40017d4:	050fe034 	movhi	r20,16256
 40017d8:	003e8e06 	br	4001214 <__alt_data_end+0xfc001214>
 40017dc:	000d883a 	mov	r6,zero
 40017e0:	003e7806 	br	40011c4 <__alt_data_end+0xfc0011c4>
 40017e4:	008fe034 	movhi	r2,16256
 40017e8:	108001c4 	addi	r2,r2,7
 40017ec:	14c0480e 	bge	r2,r19,4001910 <__ieee754_powf+0xa0c>
 40017f0:	053e050e 	bge	zero,r20,4001008 <__alt_data_end+0xfc001008>
 40017f4:	015c52b4 	movhi	r5,29002
 40017f8:	297cb284 	addi	r5,r5,-3382
 40017fc:	2809883a 	mov	r4,r5
 4001800:	40040080 	call	4004008 <__mulsf3>
 4001804:	003e0306 	br	4001014 <__alt_data_end+0xfc001014>
 4001808:	014cce74 	movhi	r5,13113
 400180c:	296a8f04 	addi	r5,r5,-21956
 4001810:	9809883a 	mov	r4,r19
 4001814:	40035040 	call	4003504 <__addsf3>
 4001818:	a00b883a 	mov	r5,r20
 400181c:	8809883a 	mov	r4,r17
 4001820:	102b883a 	mov	r21,r2
 4001824:	40044380 	call	4004438 <__subsf3>
 4001828:	100b883a 	mov	r5,r2
 400182c:	a809883a 	mov	r4,r21
 4001830:	4003e840 	call	4003e84 <__gesf2>
 4001834:	0080090e 	bge	zero,r2,400185c <__ieee754_powf+0x958>
 4001838:	015c52b4 	movhi	r5,29002
 400183c:	9009883a 	mov	r4,r18
 4001840:	297cb284 	addi	r5,r5,-3382
 4001844:	40040080 	call	4004008 <__mulsf3>
 4001848:	015c52b4 	movhi	r5,29002
 400184c:	297cb284 	addi	r5,r5,-3382
 4001850:	1009883a 	mov	r4,r2
 4001854:	40040080 	call	4004008 <__mulsf3>
 4001858:	003dee06 	br	4001014 <__alt_data_end+0xfc001014>
 400185c:	8021d5fa 	srai	r16,r16,23
 4001860:	00802034 	movhi	r2,128
 4001864:	843fe084 	addi	r16,r16,-126
 4001868:	1421d83a 	sra	r16,r2,r16
 400186c:	10bfffc4 	addi	r2,r2,-1
 4001870:	8463883a 	add	r17,r16,r17
 4001874:	8806d5fa 	srli	r3,r17,23
 4001878:	88aa703a 	and	r21,r17,r2
 400187c:	ad402034 	orhi	r21,r21,128
 4001880:	18c03fcc 	andi	r3,r3,255
 4001884:	18ffe044 	addi	r3,r3,-127
 4001888:	10cbd83a 	sra	r5,r2,r3
 400188c:	008005c4 	movi	r2,23
 4001890:	10c7c83a 	sub	r3,r2,r3
 4001894:	014a303a 	nor	r5,zero,r5
 4001898:	a8ebd83a 	sra	r21,r21,r3
 400189c:	2c4a703a 	and	r5,r5,r17
 40018a0:	b8005a16 	blt	r23,zero,4001a0c <__ieee754_powf+0xb08>
 40018a4:	a009883a 	mov	r4,r20
 40018a8:	40044380 	call	4004438 <__subsf3>
 40018ac:	100b883a 	mov	r5,r2
 40018b0:	9809883a 	mov	r4,r19
 40018b4:	102d883a 	mov	r22,r2
 40018b8:	a82295fa 	slli	r17,r21,23
 40018bc:	40035040 	call	4003504 <__addsf3>
 40018c0:	003f4b06 	br	40015f0 <__alt_data_end+0xfc0015f0>
 40018c4:	00d0c5b4 	movhi	r3,17174
 40018c8:	1c000816 	blt	r3,r16,40018ec <__ieee754_powf+0x9e8>
 40018cc:	80ff441e 	bne	r16,r3,40015e0 <__alt_data_end+0xfc0015e0>
 40018d0:	a00b883a 	mov	r5,r20
 40018d4:	1009883a 	mov	r4,r2
 40018d8:	40044380 	call	4004438 <__subsf3>
 40018dc:	100b883a 	mov	r5,r2
 40018e0:	9809883a 	mov	r4,r19
 40018e4:	4003f400 	call	4003f40 <__lesf2>
 40018e8:	00bfdc16 	blt	zero,r2,400185c <__alt_data_end+0xfc00185c>
 40018ec:	014368b4 	movhi	r5,3490
 40018f0:	9009883a 	mov	r4,r18
 40018f4:	29509804 	addi	r5,r5,16992
 40018f8:	40040080 	call	4004008 <__mulsf3>
 40018fc:	014368b4 	movhi	r5,3490
 4001900:	29509804 	addi	r5,r5,16992
 4001904:	1009883a 	mov	r4,r2
 4001908:	40040080 	call	4004008 <__mulsf3>
 400190c:	003dc106 	br	4001014 <__alt_data_end+0xfc001014>
 4001910:	40044380 	call	4004438 <__subsf3>
 4001914:	014fee74 	movhi	r5,16313
 4001918:	296a8004 	addi	r5,r5,-22016
 400191c:	1009883a 	mov	r4,r2
 4001920:	1021883a 	mov	r16,r2
 4001924:	40040080 	call	4004008 <__mulsf3>
 4001928:	014dbb74 	movhi	r5,14061
 400192c:	8009883a 	mov	r4,r16
 4001930:	29695c04 	addi	r5,r5,-23184
 4001934:	1027883a 	mov	r19,r2
 4001938:	40040080 	call	4004008 <__mulsf3>
 400193c:	8009883a 	mov	r4,r16
 4001940:	014fa034 	movhi	r5,16000
 4001944:	1025883a 	mov	r18,r2
 4001948:	40040080 	call	4004008 <__mulsf3>
 400194c:	010faaf4 	movhi	r4,16043
 4001950:	100b883a 	mov	r5,r2
 4001954:	212aaac4 	addi	r4,r4,-21845
 4001958:	40044380 	call	4004438 <__subsf3>
 400195c:	800b883a 	mov	r5,r16
 4001960:	1009883a 	mov	r4,r2
 4001964:	40040080 	call	4004008 <__mulsf3>
 4001968:	100b883a 	mov	r5,r2
 400196c:	010fc034 	movhi	r4,16128
 4001970:	40044380 	call	4004438 <__subsf3>
 4001974:	800b883a 	mov	r5,r16
 4001978:	8009883a 	mov	r4,r16
 400197c:	1029883a 	mov	r20,r2
 4001980:	40040080 	call	4004008 <__mulsf3>
 4001984:	100b883a 	mov	r5,r2
 4001988:	a009883a 	mov	r4,r20
 400198c:	40040080 	call	4004008 <__mulsf3>
 4001990:	014fee74 	movhi	r5,16313
 4001994:	296a8ec4 	addi	r5,r5,-21957
 4001998:	1009883a 	mov	r4,r2
 400199c:	40040080 	call	4004008 <__mulsf3>
 40019a0:	9009883a 	mov	r4,r18
 40019a4:	100b883a 	mov	r5,r2
 40019a8:	40044380 	call	4004438 <__subsf3>
 40019ac:	100b883a 	mov	r5,r2
 40019b0:	9809883a 	mov	r4,r19
 40019b4:	1025883a 	mov	r18,r2
 40019b8:	043c0004 	movi	r16,-4096
 40019bc:	40035040 	call	4003504 <__addsf3>
 40019c0:	1404703a 	and	r2,r2,r16
 40019c4:	980b883a 	mov	r5,r19
 40019c8:	1009883a 	mov	r4,r2
 40019cc:	1021883a 	mov	r16,r2
 40019d0:	40044380 	call	4004438 <__subsf3>
 40019d4:	100b883a 	mov	r5,r2
 40019d8:	9009883a 	mov	r4,r18
 40019dc:	40044380 	call	4004438 <__subsf3>
 40019e0:	102f883a 	mov	r23,r2
 40019e4:	003ed906 	br	400154c <__alt_data_end+0xfc00154c>
 40019e8:	008fc5b4 	movhi	r2,16150
 40019ec:	020d74b4 	movhi	r8,13778
 40019f0:	d8800015 	stw	r2,0(sp)
 40019f4:	10b00004 	addi	r2,r2,-16384
 40019f8:	4233f704 	addi	r8,r8,-12324
 40019fc:	d8800015 	stw	r2,0(sp)
 4001a00:	00c00834 	movhi	r3,32
 4001a04:	050ff034 	movhi	r20,16320
 4001a08:	003e0206 	br	4001214 <__alt_data_end+0xfc001214>
 4001a0c:	056bc83a 	sub	r21,zero,r21
 4001a10:	003fa406 	br	40018a4 <__alt_data_end+0xfc0018a4>
 4001a14:	1009883a 	mov	r4,r2
 4001a18:	a80b883a 	mov	r5,r21
 4001a1c:	40033a80 	call	40033a8 <scalbnf>
 4001a20:	1009883a 	mov	r4,r2
 4001a24:	003f5d06 	br	400179c <__alt_data_end+0xfc00179c>

04001a28 <__ieee754_rem_pio2f>:
 4001a28:	defff104 	addi	sp,sp,-60
 4001a2c:	dc000515 	stw	r16,20(sp)
 4001a30:	04200034 	movhi	r16,32768
 4001a34:	843fffc4 	addi	r16,r16,-1
 4001a38:	00cfd274 	movhi	r3,16201
 4001a3c:	dfc00e15 	stw	ra,56(sp)
 4001a40:	df000d15 	stw	fp,52(sp)
 4001a44:	ddc00c15 	stw	r23,48(sp)
 4001a48:	dd800b15 	stw	r22,44(sp)
 4001a4c:	dd400a15 	stw	r21,40(sp)
 4001a50:	dd000915 	stw	r20,36(sp)
 4001a54:	dcc00815 	stw	r19,32(sp)
 4001a58:	dc800715 	stw	r18,28(sp)
 4001a5c:	dc400615 	stw	r17,24(sp)
 4001a60:	8120703a 	and	r16,r16,r4
 4001a64:	18c3f604 	addi	r3,r3,4056
 4001a68:	1c005d0e 	bge	r3,r16,4001be0 <__ieee754_rem_pio2f+0x1b8>
 4001a6c:	00d005f4 	movhi	r3,16407
 4001a70:	18f2f8c4 	addi	r3,r3,-13341
 4001a74:	2027883a 	mov	r19,r4
 4001a78:	2823883a 	mov	r17,r5
 4001a7c:	1c001916 	blt	r3,r16,4001ae4 <__ieee754_rem_pio2f+0xbc>
 4001a80:	014ff274 	movhi	r5,16329
 4001a84:	2943e004 	addi	r5,r5,3968
 4001a88:	0100c00e 	bge	zero,r4,4001d8c <__ieee754_rem_pio2f+0x364>
 4001a8c:	40044380 	call	4004438 <__subsf3>
 4001a90:	1025883a 	mov	r18,r2
 4001a94:	00bffc04 	movi	r2,-16
 4001a98:	80a0703a 	and	r16,r16,r2
 4001a9c:	008ff274 	movhi	r2,16329
 4001aa0:	1083f404 	addi	r2,r2,4048
 4001aa4:	014dcd74 	movhi	r5,14133
 4001aa8:	80806226 	beq	r16,r2,4001c34 <__ieee754_rem_pio2f+0x20c>
 4001aac:	295110c4 	addi	r5,r5,17475
 4001ab0:	9009883a 	mov	r4,r18
 4001ab4:	40044380 	call	4004438 <__subsf3>
 4001ab8:	100b883a 	mov	r5,r2
 4001abc:	9009883a 	mov	r4,r18
 4001ac0:	88800015 	stw	r2,0(r17)
 4001ac4:	40044380 	call	4004438 <__subsf3>
 4001ac8:	014dcd74 	movhi	r5,14133
 4001acc:	295110c4 	addi	r5,r5,17475
 4001ad0:	1009883a 	mov	r4,r2
 4001ad4:	40044380 	call	4004438 <__subsf3>
 4001ad8:	88800115 	stw	r2,4(r17)
 4001adc:	00800044 	movi	r2,1
 4001ae0:	00004206 	br	4001bec <__ieee754_rem_pio2f+0x1c4>
 4001ae4:	00d0d274 	movhi	r3,17225
 4001ae8:	18c3e004 	addi	r3,r3,3968
 4001aec:	1c00640e 	bge	r3,r16,4001c80 <__ieee754_rem_pio2f+0x258>
 4001af0:	00dfe034 	movhi	r3,32640
 4001af4:	18ffffc4 	addi	r3,r3,-1
 4001af8:	1c004816 	blt	r3,r16,4001c1c <__ieee754_rem_pio2f+0x1f4>
 4001afc:	8025d5fa 	srai	r18,r16,23
 4001b00:	94bfde84 	addi	r18,r18,-134
 4001b04:	900495fa 	slli	r2,r18,23
 4001b08:	80a1c83a 	sub	r16,r16,r2
 4001b0c:	8009883a 	mov	r4,r16
 4001b10:	400491c0 	call	400491c <__fixsfsi>
 4001b14:	1009883a 	mov	r4,r2
 4001b18:	400498c0 	call	400498c <__floatsisf>
 4001b1c:	8009883a 	mov	r4,r16
 4001b20:	100b883a 	mov	r5,r2
 4001b24:	d8800215 	stw	r2,8(sp)
 4001b28:	40044380 	call	4004438 <__subsf3>
 4001b2c:	0150e034 	movhi	r5,17280
 4001b30:	1009883a 	mov	r4,r2
 4001b34:	40040080 	call	4004008 <__mulsf3>
 4001b38:	1009883a 	mov	r4,r2
 4001b3c:	1029883a 	mov	r20,r2
 4001b40:	400491c0 	call	400491c <__fixsfsi>
 4001b44:	1009883a 	mov	r4,r2
 4001b48:	400498c0 	call	400498c <__floatsisf>
 4001b4c:	100b883a 	mov	r5,r2
 4001b50:	a009883a 	mov	r4,r20
 4001b54:	1021883a 	mov	r16,r2
 4001b58:	d8800315 	stw	r2,12(sp)
 4001b5c:	40044380 	call	4004438 <__subsf3>
 4001b60:	0150e034 	movhi	r5,17280
 4001b64:	1009883a 	mov	r4,r2
 4001b68:	40040080 	call	4004008 <__mulsf3>
 4001b6c:	000b883a 	mov	r5,zero
 4001b70:	1009883a 	mov	r4,r2
 4001b74:	d8800415 	stw	r2,16(sp)
 4001b78:	4003e0c0 	call	4003e0c <__eqsf2>
 4001b7c:	1000d81e 	bne	r2,zero,4001ee0 <__ieee754_rem_pio2f+0x4b8>
 4001b80:	000b883a 	mov	r5,zero
 4001b84:	8009883a 	mov	r4,r16
 4001b88:	4003e0c0 	call	4003e0c <__eqsf2>
 4001b8c:	100f003a 	cmpeq	r7,r2,zero
 4001b90:	00800084 	movi	r2,2
 4001b94:	11cfc83a 	sub	r7,r2,r7
 4001b98:	00800084 	movi	r2,2
 4001b9c:	d8800015 	stw	r2,0(sp)
 4001ba0:	00810074 	movhi	r2,1025
 4001ba4:	10a96004 	addi	r2,r2,-23168
 4001ba8:	d8800115 	stw	r2,4(sp)
 4001bac:	900d883a 	mov	r6,r18
 4001bb0:	880b883a 	mov	r5,r17
 4001bb4:	d9000204 	addi	r4,sp,8
 4001bb8:	400236c0 	call	400236c <__kernel_rem_pio2f>
 4001bbc:	98000b0e 	bge	r19,zero,4001bec <__ieee754_rem_pio2f+0x1c4>
 4001bc0:	89000017 	ldw	r4,0(r17)
 4001bc4:	88c00117 	ldw	r3,4(r17)
 4001bc8:	0085c83a 	sub	r2,zero,r2
 4001bcc:	2120003c 	xorhi	r4,r4,32768
 4001bd0:	18e0003c 	xorhi	r3,r3,32768
 4001bd4:	89000015 	stw	r4,0(r17)
 4001bd8:	88c00115 	stw	r3,4(r17)
 4001bdc:	00000306 	br	4001bec <__ieee754_rem_pio2f+0x1c4>
 4001be0:	29000015 	stw	r4,0(r5)
 4001be4:	28000115 	stw	zero,4(r5)
 4001be8:	0005883a 	mov	r2,zero
 4001bec:	dfc00e17 	ldw	ra,56(sp)
 4001bf0:	df000d17 	ldw	fp,52(sp)
 4001bf4:	ddc00c17 	ldw	r23,48(sp)
 4001bf8:	dd800b17 	ldw	r22,44(sp)
 4001bfc:	dd400a17 	ldw	r21,40(sp)
 4001c00:	dd000917 	ldw	r20,36(sp)
 4001c04:	dcc00817 	ldw	r19,32(sp)
 4001c08:	dc800717 	ldw	r18,28(sp)
 4001c0c:	dc400617 	ldw	r17,24(sp)
 4001c10:	dc000517 	ldw	r16,20(sp)
 4001c14:	dec00f04 	addi	sp,sp,60
 4001c18:	f800283a 	ret
 4001c1c:	200b883a 	mov	r5,r4
 4001c20:	40044380 	call	4004438 <__subsf3>
 4001c24:	88800115 	stw	r2,4(r17)
 4001c28:	88800015 	stw	r2,0(r17)
 4001c2c:	0005883a 	mov	r2,zero
 4001c30:	003fee06 	br	4001bec <__alt_data_end+0xfc001bec>
 4001c34:	29510004 	addi	r5,r5,17408
 4001c38:	9009883a 	mov	r4,r18
 4001c3c:	40044380 	call	4004438 <__subsf3>
 4001c40:	014ba1b4 	movhi	r5,11910
 4001c44:	2968c204 	addi	r5,r5,-23800
 4001c48:	1009883a 	mov	r4,r2
 4001c4c:	1021883a 	mov	r16,r2
 4001c50:	40044380 	call	4004438 <__subsf3>
 4001c54:	100b883a 	mov	r5,r2
 4001c58:	8009883a 	mov	r4,r16
 4001c5c:	88800015 	stw	r2,0(r17)
 4001c60:	40044380 	call	4004438 <__subsf3>
 4001c64:	014ba1b4 	movhi	r5,11910
 4001c68:	2968c204 	addi	r5,r5,-23800
 4001c6c:	1009883a 	mov	r4,r2
 4001c70:	40044380 	call	4004438 <__subsf3>
 4001c74:	88800115 	stw	r2,4(r17)
 4001c78:	00800044 	movi	r2,1
 4001c7c:	003fdb06 	br	4001bec <__alt_data_end+0xfc001bec>
 4001c80:	400321c0 	call	400321c <fabsf>
 4001c84:	014fc8f4 	movhi	r5,16163
 4001c88:	297e6104 	addi	r5,r5,-1660
 4001c8c:	1009883a 	mov	r4,r2
 4001c90:	102b883a 	mov	r21,r2
 4001c94:	40040080 	call	4004008 <__mulsf3>
 4001c98:	014fc034 	movhi	r5,16128
 4001c9c:	1009883a 	mov	r4,r2
 4001ca0:	40035040 	call	4003504 <__addsf3>
 4001ca4:	1009883a 	mov	r4,r2
 4001ca8:	400491c0 	call	400491c <__fixsfsi>
 4001cac:	1009883a 	mov	r4,r2
 4001cb0:	1025883a 	mov	r18,r2
 4001cb4:	400498c0 	call	400498c <__floatsisf>
 4001cb8:	014ff274 	movhi	r5,16329
 4001cbc:	2943e004 	addi	r5,r5,3968
 4001cc0:	1009883a 	mov	r4,r2
 4001cc4:	1029883a 	mov	r20,r2
 4001cc8:	40040080 	call	4004008 <__mulsf3>
 4001ccc:	a809883a 	mov	r4,r21
 4001cd0:	100b883a 	mov	r5,r2
 4001cd4:	40044380 	call	4004438 <__subsf3>
 4001cd8:	014dcd74 	movhi	r5,14133
 4001cdc:	295110c4 	addi	r5,r5,17475
 4001ce0:	a009883a 	mov	r4,r20
 4001ce4:	102f883a 	mov	r23,r2
 4001ce8:	102d883a 	mov	r22,r2
 4001cec:	40040080 	call	4004008 <__mulsf3>
 4001cf0:	00c007c4 	movi	r3,31
 4001cf4:	102b883a 	mov	r21,r2
 4001cf8:	100b883a 	mov	r5,r2
 4001cfc:	1c800f16 	blt	r3,r18,4001d3c <__ieee754_rem_pio2f+0x314>
 4001d00:	90ffffc4 	addi	r3,r18,-1
 4001d04:	18c7883a 	add	r3,r3,r3
 4001d08:	01010074 	movhi	r4,1025
 4001d0c:	21294004 	addi	r4,r4,-23296
 4001d10:	18c7883a 	add	r3,r3,r3
 4001d14:	20c7883a 	add	r3,r4,r3
 4001d18:	19000017 	ldw	r4,0(r3)
 4001d1c:	00ffc004 	movi	r3,-256
 4001d20:	80c6703a 	and	r3,r16,r3
 4001d24:	19000526 	beq	r3,r4,4001d3c <__ieee754_rem_pio2f+0x314>
 4001d28:	b809883a 	mov	r4,r23
 4001d2c:	40044380 	call	4004438 <__subsf3>
 4001d30:	1039883a 	mov	fp,r2
 4001d34:	88800015 	stw	r2,0(r17)
 4001d38:	00000a06 	br	4001d64 <__ieee754_rem_pio2f+0x33c>
 4001d3c:	b809883a 	mov	r4,r23
 4001d40:	40044380 	call	4004438 <__subsf3>
 4001d44:	1006d5fa 	srli	r3,r2,23
 4001d48:	8021d5fa 	srai	r16,r16,23
 4001d4c:	01000204 	movi	r4,8
 4001d50:	18c03fcc 	andi	r3,r3,255
 4001d54:	80c7c83a 	sub	r3,r16,r3
 4001d58:	1039883a 	mov	fp,r2
 4001d5c:	20c02116 	blt	r4,r3,4001de4 <__ieee754_rem_pio2f+0x3bc>
 4001d60:	88800015 	stw	r2,0(r17)
 4001d64:	e00b883a 	mov	r5,fp
 4001d68:	b009883a 	mov	r4,r22
 4001d6c:	40044380 	call	4004438 <__subsf3>
 4001d70:	a80b883a 	mov	r5,r21
 4001d74:	1009883a 	mov	r4,r2
 4001d78:	40044380 	call	4004438 <__subsf3>
 4001d7c:	88800115 	stw	r2,4(r17)
 4001d80:	98005916 	blt	r19,zero,4001ee8 <__ieee754_rem_pio2f+0x4c0>
 4001d84:	9005883a 	mov	r2,r18
 4001d88:	003f9806 	br	4001bec <__alt_data_end+0xfc001bec>
 4001d8c:	40035040 	call	4003504 <__addsf3>
 4001d90:	1025883a 	mov	r18,r2
 4001d94:	00bffc04 	movi	r2,-16
 4001d98:	80a0703a 	and	r16,r16,r2
 4001d9c:	008ff274 	movhi	r2,16329
 4001da0:	1083f404 	addi	r2,r2,4048
 4001da4:	014dcd74 	movhi	r5,14133
 4001da8:	80805526 	beq	r16,r2,4001f00 <__ieee754_rem_pio2f+0x4d8>
 4001dac:	295110c4 	addi	r5,r5,17475
 4001db0:	9009883a 	mov	r4,r18
 4001db4:	40035040 	call	4003504 <__addsf3>
 4001db8:	100b883a 	mov	r5,r2
 4001dbc:	9009883a 	mov	r4,r18
 4001dc0:	88800015 	stw	r2,0(r17)
 4001dc4:	40044380 	call	4004438 <__subsf3>
 4001dc8:	014dcd74 	movhi	r5,14133
 4001dcc:	295110c4 	addi	r5,r5,17475
 4001dd0:	1009883a 	mov	r4,r2
 4001dd4:	40035040 	call	4003504 <__addsf3>
 4001dd8:	88800115 	stw	r2,4(r17)
 4001ddc:	00bfffc4 	movi	r2,-1
 4001de0:	003f8206 	br	4001bec <__alt_data_end+0xfc001bec>
 4001de4:	014dcd74 	movhi	r5,14133
 4001de8:	29510004 	addi	r5,r5,17408
 4001dec:	a009883a 	mov	r4,r20
 4001df0:	40040080 	call	4004008 <__mulsf3>
 4001df4:	100b883a 	mov	r5,r2
 4001df8:	b809883a 	mov	r4,r23
 4001dfc:	102b883a 	mov	r21,r2
 4001e00:	40044380 	call	4004438 <__subsf3>
 4001e04:	100b883a 	mov	r5,r2
 4001e08:	b809883a 	mov	r4,r23
 4001e0c:	102d883a 	mov	r22,r2
 4001e10:	40044380 	call	4004438 <__subsf3>
 4001e14:	a80b883a 	mov	r5,r21
 4001e18:	1009883a 	mov	r4,r2
 4001e1c:	40044380 	call	4004438 <__subsf3>
 4001e20:	014ba1b4 	movhi	r5,11910
 4001e24:	2968c204 	addi	r5,r5,-23800
 4001e28:	a009883a 	mov	r4,r20
 4001e2c:	102b883a 	mov	r21,r2
 4001e30:	40040080 	call	4004008 <__mulsf3>
 4001e34:	a80b883a 	mov	r5,r21
 4001e38:	1009883a 	mov	r4,r2
 4001e3c:	40044380 	call	4004438 <__subsf3>
 4001e40:	100b883a 	mov	r5,r2
 4001e44:	b009883a 	mov	r4,r22
 4001e48:	102b883a 	mov	r21,r2
 4001e4c:	40044380 	call	4004438 <__subsf3>
 4001e50:	1006d5fa 	srli	r3,r2,23
 4001e54:	1039883a 	mov	fp,r2
 4001e58:	18c03fcc 	andi	r3,r3,255
 4001e5c:	80e1c83a 	sub	r16,r16,r3
 4001e60:	00c00644 	movi	r3,25
 4001e64:	1c3fbe0e 	bge	r3,r16,4001d60 <__alt_data_end+0xfc001d60>
 4001e68:	014ba1b4 	movhi	r5,11910
 4001e6c:	2968c004 	addi	r5,r5,-23808
 4001e70:	a009883a 	mov	r4,r20
 4001e74:	40040080 	call	4004008 <__mulsf3>
 4001e78:	b009883a 	mov	r4,r22
 4001e7c:	100b883a 	mov	r5,r2
 4001e80:	102b883a 	mov	r21,r2
 4001e84:	40044380 	call	4004438 <__subsf3>
 4001e88:	b009883a 	mov	r4,r22
 4001e8c:	100b883a 	mov	r5,r2
 4001e90:	1021883a 	mov	r16,r2
 4001e94:	40044380 	call	4004438 <__subsf3>
 4001e98:	a80b883a 	mov	r5,r21
 4001e9c:	1009883a 	mov	r4,r2
 4001ea0:	40044380 	call	4004438 <__subsf3>
 4001ea4:	01492374 	movhi	r5,9357
 4001ea8:	294c4c84 	addi	r5,r5,12594
 4001eac:	a009883a 	mov	r4,r20
 4001eb0:	102b883a 	mov	r21,r2
 4001eb4:	40040080 	call	4004008 <__mulsf3>
 4001eb8:	a80b883a 	mov	r5,r21
 4001ebc:	1009883a 	mov	r4,r2
 4001ec0:	40044380 	call	4004438 <__subsf3>
 4001ec4:	100b883a 	mov	r5,r2
 4001ec8:	8009883a 	mov	r4,r16
 4001ecc:	102b883a 	mov	r21,r2
 4001ed0:	40044380 	call	4004438 <__subsf3>
 4001ed4:	802d883a 	mov	r22,r16
 4001ed8:	1039883a 	mov	fp,r2
 4001edc:	003fa006 	br	4001d60 <__alt_data_end+0xfc001d60>
 4001ee0:	01c000c4 	movi	r7,3
 4001ee4:	003f2c06 	br	4001b98 <__alt_data_end+0xfc001b98>
 4001ee8:	10a0003c 	xorhi	r2,r2,32768
 4001eec:	e720003c 	xorhi	fp,fp,32768
 4001ef0:	88800115 	stw	r2,4(r17)
 4001ef4:	8f000015 	stw	fp,0(r17)
 4001ef8:	0485c83a 	sub	r2,zero,r18
 4001efc:	003f3b06 	br	4001bec <__alt_data_end+0xfc001bec>
 4001f00:	29510004 	addi	r5,r5,17408
 4001f04:	9009883a 	mov	r4,r18
 4001f08:	40035040 	call	4003504 <__addsf3>
 4001f0c:	014ba1b4 	movhi	r5,11910
 4001f10:	2968c204 	addi	r5,r5,-23800
 4001f14:	1009883a 	mov	r4,r2
 4001f18:	1021883a 	mov	r16,r2
 4001f1c:	40035040 	call	4003504 <__addsf3>
 4001f20:	100b883a 	mov	r5,r2
 4001f24:	8009883a 	mov	r4,r16
 4001f28:	88800015 	stw	r2,0(r17)
 4001f2c:	40044380 	call	4004438 <__subsf3>
 4001f30:	014ba1b4 	movhi	r5,11910
 4001f34:	2968c204 	addi	r5,r5,-23800
 4001f38:	1009883a 	mov	r4,r2
 4001f3c:	40035040 	call	4003504 <__addsf3>
 4001f40:	88800115 	stw	r2,4(r17)
 4001f44:	00bfffc4 	movi	r2,-1
 4001f48:	003f2806 	br	4001bec <__alt_data_end+0xfc001bec>

04001f4c <__ieee754_sqrtf>:
 4001f4c:	00a00034 	movhi	r2,32768
 4001f50:	defffe04 	addi	sp,sp,-8
 4001f54:	10bfffc4 	addi	r2,r2,-1
 4001f58:	00dfe034 	movhi	r3,32640
 4001f5c:	dc000015 	stw	r16,0(sp)
 4001f60:	dfc00115 	stw	ra,4(sp)
 4001f64:	1104703a 	and	r2,r2,r4
 4001f68:	18ffffc4 	addi	r3,r3,-1
 4001f6c:	2021883a 	mov	r16,r4
 4001f70:	200b883a 	mov	r5,r4
 4001f74:	18803836 	bltu	r3,r2,4002058 <__ieee754_sqrtf+0x10c>
 4001f78:	10003226 	beq	r2,zero,4002044 <__ieee754_sqrtf+0xf8>
 4001f7c:	2007883a 	mov	r3,r4
 4001f80:	20003f16 	blt	r4,zero,4002080 <__ieee754_sqrtf+0x134>
 4001f84:	200bd5fa 	srai	r5,r4,23
 4001f88:	01002034 	movhi	r4,128
 4001f8c:	213fffc4 	addi	r4,r4,-1
 4001f90:	20800a36 	bltu	r4,r2,4001fbc <__ieee754_sqrtf+0x70>
 4001f94:	8400202c 	andhi	r16,r16,128
 4001f98:	80003f1e 	bne	r16,zero,4002098 <__ieee754_sqrtf+0x14c>
 4001f9c:	0005883a 	mov	r2,zero
 4001fa0:	00000106 	br	4001fa8 <__ieee754_sqrtf+0x5c>
 4001fa4:	3005883a 	mov	r2,r6
 4001fa8:	18c7883a 	add	r3,r3,r3
 4001fac:	1900202c 	andhi	r4,r3,128
 4001fb0:	11800044 	addi	r6,r2,1
 4001fb4:	203ffb26 	beq	r4,zero,4001fa4 <__alt_data_end+0xfc001fa4>
 4001fb8:	288bc83a 	sub	r5,r5,r2
 4001fbc:	00802034 	movhi	r2,128
 4001fc0:	293fe044 	addi	r4,r5,-127
 4001fc4:	10bfffc4 	addi	r2,r2,-1
 4001fc8:	1884703a 	and	r2,r3,r2
 4001fcc:	2140004c 	andi	r5,r4,1
 4001fd0:	10802034 	orhi	r2,r2,128
 4001fd4:	2800281e 	bne	r5,zero,4002078 <__ieee754_sqrtf+0x12c>
 4001fd8:	2021d07a 	srai	r16,r4,1
 4001fdc:	1085883a 	add	r2,r2,r2
 4001fe0:	01000644 	movi	r4,25
 4001fe4:	000f883a 	mov	r7,zero
 4001fe8:	000d883a 	mov	r6,zero
 4001fec:	00c04034 	movhi	r3,256
 4001ff0:	30cb883a 	add	r5,r6,r3
 4001ff4:	213fffc4 	addi	r4,r4,-1
 4001ff8:	11400316 	blt	r2,r5,4002008 <__ieee754_sqrtf+0xbc>
 4001ffc:	28cd883a 	add	r6,r5,r3
 4002000:	1145c83a 	sub	r2,r2,r5
 4002004:	38cf883a 	add	r7,r7,r3
 4002008:	1085883a 	add	r2,r2,r2
 400200c:	1806d07a 	srli	r3,r3,1
 4002010:	203ff71e 	bne	r4,zero,4001ff0 <__alt_data_end+0xfc001ff0>
 4002014:	10000226 	beq	r2,zero,4002020 <__ieee754_sqrtf+0xd4>
 4002018:	3880004c 	andi	r2,r7,1
 400201c:	388f883a 	add	r7,r7,r2
 4002020:	380fd07a 	srai	r7,r7,1
 4002024:	802095fa 	slli	r16,r16,23
 4002028:	008fc034 	movhi	r2,16128
 400202c:	388f883a 	add	r7,r7,r2
 4002030:	81c5883a 	add	r2,r16,r7
 4002034:	dfc00117 	ldw	ra,4(sp)
 4002038:	dc000017 	ldw	r16,0(sp)
 400203c:	dec00204 	addi	sp,sp,8
 4002040:	f800283a 	ret
 4002044:	2005883a 	mov	r2,r4
 4002048:	dfc00117 	ldw	ra,4(sp)
 400204c:	dc000017 	ldw	r16,0(sp)
 4002050:	dec00204 	addi	sp,sp,8
 4002054:	f800283a 	ret
 4002058:	40040080 	call	4004008 <__mulsf3>
 400205c:	800b883a 	mov	r5,r16
 4002060:	1009883a 	mov	r4,r2
 4002064:	40035040 	call	4003504 <__addsf3>
 4002068:	dfc00117 	ldw	ra,4(sp)
 400206c:	dc000017 	ldw	r16,0(sp)
 4002070:	dec00204 	addi	sp,sp,8
 4002074:	f800283a 	ret
 4002078:	1085883a 	add	r2,r2,r2
 400207c:	003fd606 	br	4001fd8 <__alt_data_end+0xfc001fd8>
 4002080:	200b883a 	mov	r5,r4
 4002084:	40044380 	call	4004438 <__subsf3>
 4002088:	100b883a 	mov	r5,r2
 400208c:	1009883a 	mov	r4,r2
 4002090:	40039cc0 	call	40039cc <__divsf3>
 4002094:	003fec06 	br	4002048 <__alt_data_end+0xfc002048>
 4002098:	00bfffc4 	movi	r2,-1
 400209c:	003fc606 	br	4001fb8 <__alt_data_end+0xfc001fb8>

040020a0 <__kernel_cosf>:
 40020a0:	defff804 	addi	sp,sp,-32
 40020a4:	dc000015 	stw	r16,0(sp)
 40020a8:	04200034 	movhi	r16,32768
 40020ac:	843fffc4 	addi	r16,r16,-1
 40020b0:	008c8034 	movhi	r2,12800
 40020b4:	dcc00315 	stw	r19,12(sp)
 40020b8:	dc800215 	stw	r18,8(sp)
 40020bc:	dfc00715 	stw	ra,28(sp)
 40020c0:	dd800615 	stw	r22,24(sp)
 40020c4:	dd400515 	stw	r21,20(sp)
 40020c8:	dd000415 	stw	r20,16(sp)
 40020cc:	dc400115 	stw	r17,4(sp)
 40020d0:	8120703a 	and	r16,r16,r4
 40020d4:	10bfffc4 	addi	r2,r2,-1
 40020d8:	2025883a 	mov	r18,r4
 40020dc:	2827883a 	mov	r19,r5
 40020e0:	14004416 	blt	r2,r16,40021f4 <__kernel_cosf+0x154>
 40020e4:	400491c0 	call	400491c <__fixsfsi>
 40020e8:	10009e26 	beq	r2,zero,4002364 <__kernel_cosf+0x2c4>
 40020ec:	900b883a 	mov	r5,r18
 40020f0:	9009883a 	mov	r4,r18
 40020f4:	40040080 	call	4004008 <__mulsf3>
 40020f8:	016b5234 	movhi	r5,44360
 40020fc:	2975d384 	addi	r5,r5,-10418
 4002100:	1009883a 	mov	r4,r2
 4002104:	1021883a 	mov	r16,r2
 4002108:	102b883a 	mov	r21,r2
 400210c:	40040080 	call	4004008 <__mulsf3>
 4002110:	014c43f4 	movhi	r5,12559
 4002114:	295d3d84 	addi	r5,r5,29942
 4002118:	1009883a 	mov	r4,r2
 400211c:	40035040 	call	4003504 <__addsf3>
 4002120:	800b883a 	mov	r5,r16
 4002124:	1009883a 	mov	r4,r2
 4002128:	40040080 	call	4004008 <__mulsf3>
 400212c:	014d2534 	movhi	r5,13460
 4002130:	297c9f04 	addi	r5,r5,-3460
 4002134:	1009883a 	mov	r4,r2
 4002138:	40044380 	call	4004438 <__subsf3>
 400213c:	800b883a 	mov	r5,r16
 4002140:	1009883a 	mov	r4,r2
 4002144:	40040080 	call	4004008 <__mulsf3>
 4002148:	014df434 	movhi	r5,14288
 400214c:	29434044 	addi	r5,r5,3329
 4002150:	1009883a 	mov	r4,r2
 4002154:	40035040 	call	4003504 <__addsf3>
 4002158:	800b883a 	mov	r5,r16
 400215c:	1009883a 	mov	r4,r2
 4002160:	40040080 	call	4004008 <__mulsf3>
 4002164:	014eadb4 	movhi	r5,15030
 4002168:	2942d844 	addi	r5,r5,2913
 400216c:	1009883a 	mov	r4,r2
 4002170:	40044380 	call	4004438 <__subsf3>
 4002174:	800b883a 	mov	r5,r16
 4002178:	1009883a 	mov	r4,r2
 400217c:	40040080 	call	4004008 <__mulsf3>
 4002180:	014f4af4 	movhi	r5,15659
 4002184:	296aaac4 	addi	r5,r5,-21845
 4002188:	1009883a 	mov	r4,r2
 400218c:	40035040 	call	4003504 <__addsf3>
 4002190:	800b883a 	mov	r5,r16
 4002194:	1009883a 	mov	r4,r2
 4002198:	40040080 	call	4004008 <__mulsf3>
 400219c:	102d883a 	mov	r22,r2
 40021a0:	a809883a 	mov	r4,r21
 40021a4:	014fc034 	movhi	r5,16128
 40021a8:	40040080 	call	4004008 <__mulsf3>
 40021ac:	b00b883a 	mov	r5,r22
 40021b0:	a809883a 	mov	r4,r21
 40021b4:	1021883a 	mov	r16,r2
 40021b8:	40040080 	call	4004008 <__mulsf3>
 40021bc:	980b883a 	mov	r5,r19
 40021c0:	9009883a 	mov	r4,r18
 40021c4:	1023883a 	mov	r17,r2
 40021c8:	40040080 	call	4004008 <__mulsf3>
 40021cc:	8809883a 	mov	r4,r17
 40021d0:	100b883a 	mov	r5,r2
 40021d4:	40044380 	call	4004438 <__subsf3>
 40021d8:	8009883a 	mov	r4,r16
 40021dc:	100b883a 	mov	r5,r2
 40021e0:	40044380 	call	4004438 <__subsf3>
 40021e4:	100b883a 	mov	r5,r2
 40021e8:	010fe034 	movhi	r4,16256
 40021ec:	40044380 	call	4004438 <__subsf3>
 40021f0:	00004f06 	br	4002330 <__kernel_cosf+0x290>
 40021f4:	200b883a 	mov	r5,r4
 40021f8:	40040080 	call	4004008 <__mulsf3>
 40021fc:	016b5234 	movhi	r5,44360
 4002200:	2975d384 	addi	r5,r5,-10418
 4002204:	1009883a 	mov	r4,r2
 4002208:	1023883a 	mov	r17,r2
 400220c:	102b883a 	mov	r21,r2
 4002210:	40040080 	call	4004008 <__mulsf3>
 4002214:	014c43f4 	movhi	r5,12559
 4002218:	295d3d84 	addi	r5,r5,29942
 400221c:	1009883a 	mov	r4,r2
 4002220:	40035040 	call	4003504 <__addsf3>
 4002224:	880b883a 	mov	r5,r17
 4002228:	1009883a 	mov	r4,r2
 400222c:	40040080 	call	4004008 <__mulsf3>
 4002230:	014d2534 	movhi	r5,13460
 4002234:	297c9f04 	addi	r5,r5,-3460
 4002238:	1009883a 	mov	r4,r2
 400223c:	40044380 	call	4004438 <__subsf3>
 4002240:	880b883a 	mov	r5,r17
 4002244:	1009883a 	mov	r4,r2
 4002248:	40040080 	call	4004008 <__mulsf3>
 400224c:	014df434 	movhi	r5,14288
 4002250:	29434044 	addi	r5,r5,3329
 4002254:	1009883a 	mov	r4,r2
 4002258:	40035040 	call	4003504 <__addsf3>
 400225c:	880b883a 	mov	r5,r17
 4002260:	1009883a 	mov	r4,r2
 4002264:	40040080 	call	4004008 <__mulsf3>
 4002268:	014eadb4 	movhi	r5,15030
 400226c:	2942d844 	addi	r5,r5,2913
 4002270:	1009883a 	mov	r4,r2
 4002274:	40044380 	call	4004438 <__subsf3>
 4002278:	880b883a 	mov	r5,r17
 400227c:	1009883a 	mov	r4,r2
 4002280:	40040080 	call	4004008 <__mulsf3>
 4002284:	014f4af4 	movhi	r5,15659
 4002288:	296aaac4 	addi	r5,r5,-21845
 400228c:	1009883a 	mov	r4,r2
 4002290:	40035040 	call	4003504 <__addsf3>
 4002294:	880b883a 	mov	r5,r17
 4002298:	1009883a 	mov	r4,r2
 400229c:	40040080 	call	4004008 <__mulsf3>
 40022a0:	1029883a 	mov	r20,r2
 40022a4:	102d883a 	mov	r22,r2
 40022a8:	008fa6b4 	movhi	r2,16026
 40022ac:	10a66644 	addi	r2,r2,-26215
 40022b0:	143fbb0e 	bge	r2,r16,40021a0 <__alt_data_end+0xfc0021a0>
 40022b4:	008fd234 	movhi	r2,16200
 40022b8:	14002716 	blt	r2,r16,4002358 <__kernel_cosf+0x2b8>
 40022bc:	00bfc034 	movhi	r2,65280
 40022c0:	80a1883a 	add	r16,r16,r2
 40022c4:	800b883a 	mov	r5,r16
 40022c8:	010fe034 	movhi	r4,16256
 40022cc:	40044380 	call	4004438 <__subsf3>
 40022d0:	102b883a 	mov	r21,r2
 40022d4:	8809883a 	mov	r4,r17
 40022d8:	014fc034 	movhi	r5,16128
 40022dc:	40040080 	call	4004008 <__mulsf3>
 40022e0:	800b883a 	mov	r5,r16
 40022e4:	1009883a 	mov	r4,r2
 40022e8:	40044380 	call	4004438 <__subsf3>
 40022ec:	8809883a 	mov	r4,r17
 40022f0:	a00b883a 	mov	r5,r20
 40022f4:	1021883a 	mov	r16,r2
 40022f8:	40040080 	call	4004008 <__mulsf3>
 40022fc:	980b883a 	mov	r5,r19
 4002300:	9009883a 	mov	r4,r18
 4002304:	1023883a 	mov	r17,r2
 4002308:	40040080 	call	4004008 <__mulsf3>
 400230c:	100b883a 	mov	r5,r2
 4002310:	8809883a 	mov	r4,r17
 4002314:	40044380 	call	4004438 <__subsf3>
 4002318:	100b883a 	mov	r5,r2
 400231c:	8009883a 	mov	r4,r16
 4002320:	40044380 	call	4004438 <__subsf3>
 4002324:	100b883a 	mov	r5,r2
 4002328:	a809883a 	mov	r4,r21
 400232c:	40044380 	call	4004438 <__subsf3>
 4002330:	dfc00717 	ldw	ra,28(sp)
 4002334:	dd800617 	ldw	r22,24(sp)
 4002338:	dd400517 	ldw	r21,20(sp)
 400233c:	dd000417 	ldw	r20,16(sp)
 4002340:	dcc00317 	ldw	r19,12(sp)
 4002344:	dc800217 	ldw	r18,8(sp)
 4002348:	dc400117 	ldw	r17,4(sp)
 400234c:	dc000017 	ldw	r16,0(sp)
 4002350:	dec00804 	addi	sp,sp,32
 4002354:	f800283a 	ret
 4002358:	054fce34 	movhi	r21,16184
 400235c:	040fa434 	movhi	r16,16016
 4002360:	003fdc06 	br	40022d4 <__alt_data_end+0xfc0022d4>
 4002364:	008fe034 	movhi	r2,16256
 4002368:	003ff106 	br	4002330 <__alt_data_end+0xfc002330>

0400236c <__kernel_rem_pio2f>:
 400236c:	deff9804 	addi	sp,sp,-416
 4002370:	d8c06817 	ldw	r3,416(sp)
 4002374:	ddc06515 	stw	r23,404(sp)
 4002378:	dd806415 	stw	r22,400(sp)
 400237c:	18c5883a 	add	r2,r3,r3
 4002380:	00c10074 	movhi	r3,1025
 4002384:	18ea3104 	addi	r3,r3,-22332
 4002388:	1085883a 	add	r2,r2,r2
 400238c:	1885883a 	add	r2,r3,r2
 4002390:	dfc06715 	stw	ra,412(sp)
 4002394:	df006615 	stw	fp,408(sp)
 4002398:	dd406315 	stw	r21,396(sp)
 400239c:	dd006215 	stw	r20,392(sp)
 40023a0:	dcc06115 	stw	r19,388(sp)
 40023a4:	dc806015 	stw	r18,384(sp)
 40023a8:	dc405f15 	stw	r17,380(sp)
 40023ac:	dc005e15 	stw	r16,376(sp)
 40023b0:	d9c05615 	stw	r7,344(sp)
 40023b4:	30ffff44 	addi	r3,r6,-3
 40023b8:	d9005115 	stw	r4,324(sp)
 40023bc:	d9405415 	stw	r5,336(sp)
 40023c0:	15800017 	ldw	r22,0(r2)
 40023c4:	3dffffc4 	addi	r23,r7,-1
 40023c8:	1802a716 	blt	r3,zero,4002e68 <__kernel_rem_pio2f+0xafc>
 40023cc:	1807d0fa 	srai	r3,r3,3
 40023d0:	d8c05515 	stw	r3,340(sp)
 40023d4:	1802a216 	blt	r3,zero,4002e60 <__kernel_rem_pio2f+0xaf4>
 40023d8:	da005517 	ldw	r8,340(sp)
 40023dc:	b5c5883a 	add	r2,r22,r23
 40023e0:	42000044 	addi	r8,r8,1
 40023e4:	400690fa 	slli	r3,r8,3
 40023e8:	da005815 	stw	r8,352(sp)
 40023ec:	da005517 	ldw	r8,340(sp)
 40023f0:	30c7c83a 	sub	r3,r6,r3
 40023f4:	d8c05215 	stw	r3,328(sp)
 40023f8:	45e3c83a 	sub	r17,r8,r23
 40023fc:	10000f16 	blt	r2,zero,400243c <__kernel_rem_pio2f+0xd0>
 4002400:	d8c06917 	ldw	r3,420(sp)
 4002404:	8c65883a 	add	r18,r17,r17
 4002408:	94a5883a 	add	r18,r18,r18
 400240c:	1445883a 	add	r2,r2,r17
 4002410:	dcc02804 	addi	r19,sp,160
 4002414:	1ca5883a 	add	r18,r3,r18
 4002418:	14000044 	addi	r16,r2,1
 400241c:	88011f16 	blt	r17,zero,400289c <__kernel_rem_pio2f+0x530>
 4002420:	91000017 	ldw	r4,0(r18)
 4002424:	400498c0 	call	400498c <__floatsisf>
 4002428:	98800015 	stw	r2,0(r19)
 400242c:	8c400044 	addi	r17,r17,1
 4002430:	9cc00104 	addi	r19,r19,4
 4002434:	94800104 	addi	r18,r18,4
 4002438:	8c3ff81e 	bne	r17,r16,400241c <__alt_data_end+0xfc00241c>
 400243c:	b0002116 	blt	r22,zero,40024c4 <__kernel_rem_pio2f+0x158>
 4002440:	d9805117 	ldw	r6,324(sp)
 4002444:	bde3883a 	add	r17,r23,r23
 4002448:	b4c00044 	addi	r19,r22,1
 400244c:	8c63883a 	add	r17,r17,r17
 4002450:	9ce7883a 	add	r19,r19,r19
 4002454:	8c000104 	addi	r16,r17,4
 4002458:	9ce7883a 	add	r19,r19,r19
 400245c:	d9002804 	addi	r4,sp,160
 4002460:	d825883a 	mov	r18,sp
 4002464:	2463883a 	add	r17,r4,r17
 4002468:	dce7883a 	add	r19,sp,r19
 400246c:	3421883a 	add	r16,r6,r16
 4002470:	dd805315 	stw	r22,332(sp)
 4002474:	3039883a 	mov	fp,r6
 4002478:	b8012616 	blt	r23,zero,4002914 <__kernel_rem_pio2f+0x5a8>
 400247c:	e029883a 	mov	r20,fp
 4002480:	882b883a 	mov	r21,r17
 4002484:	002d883a 	mov	r22,zero
 4002488:	a9400017 	ldw	r5,0(r21)
 400248c:	a1000017 	ldw	r4,0(r20)
 4002490:	a5000104 	addi	r20,r20,4
 4002494:	ad7fff04 	addi	r21,r21,-4
 4002498:	40040080 	call	4004008 <__mulsf3>
 400249c:	b009883a 	mov	r4,r22
 40024a0:	100b883a 	mov	r5,r2
 40024a4:	40035040 	call	4003504 <__addsf3>
 40024a8:	102d883a 	mov	r22,r2
 40024ac:	a43ff61e 	bne	r20,r16,4002488 <__alt_data_end+0xfc002488>
 40024b0:	95800015 	stw	r22,0(r18)
 40024b4:	94800104 	addi	r18,r18,4
 40024b8:	8c400104 	addi	r17,r17,4
 40024bc:	94ffee1e 	bne	r18,r19,4002478 <__alt_data_end+0xfc002478>
 40024c0:	dd805317 	ldw	r22,332(sp)
 40024c4:	00900034 	movhi	r2,16384
 40024c8:	da005617 	ldw	r8,344(sp)
 40024cc:	10bfff84 	addi	r2,r2,-2
 40024d0:	b085883a 	add	r2,r22,r2
 40024d4:	b0ffffc4 	addi	r3,r22,-1
 40024d8:	1085883a 	add	r2,r2,r2
 40024dc:	1085883a 	add	r2,r2,r2
 40024e0:	4221883a 	add	r16,r8,r8
 40024e4:	18c7883a 	add	r3,r3,r3
 40024e8:	da005117 	ldw	r8,324(sp)
 40024ec:	d9803c04 	addi	r6,sp,240
 40024f0:	308d883a 	add	r6,r6,r2
 40024f4:	18c7883a 	add	r3,r3,r3
 40024f8:	8421883a 	add	r16,r16,r16
 40024fc:	11000104 	addi	r4,r2,4
 4002500:	d8c7883a 	add	r3,sp,r3
 4002504:	d9805915 	stw	r6,356(sp)
 4002508:	d9803c04 	addi	r6,sp,240
 400250c:	4421883a 	add	r16,r8,r16
 4002510:	310d883a 	add	r6,r6,r4
 4002514:	da3fff04 	addi	r8,sp,-4
 4002518:	18c03c04 	addi	r3,r3,240
 400251c:	d9805a15 	stw	r6,360(sp)
 4002520:	b023883a 	mov	r17,r22
 4002524:	da005015 	stw	r8,320(sp)
 4002528:	d8c05b15 	stw	r3,364(sp)
 400252c:	dd805715 	stw	r22,348(sp)
 4002530:	8c6b883a 	add	r21,r17,r17
 4002534:	ad45883a 	add	r2,r21,r21
 4002538:	d885883a 	add	r2,sp,r2
 400253c:	15000017 	ldw	r20,0(r2)
 4002540:	0440200e 	bge	zero,r17,40025c4 <__kernel_rem_pio2f+0x258>
 4002544:	00900034 	movhi	r2,16384
 4002548:	10bfffc4 	addi	r2,r2,-1
 400254c:	88a7883a 	add	r19,r17,r2
 4002550:	9ce7883a 	add	r19,r19,r19
 4002554:	9ce7883a 	add	r19,r19,r19
 4002558:	dc803c04 	addi	r18,sp,240
 400255c:	dce7883a 	add	r19,sp,r19
 4002560:	014ee034 	movhi	r5,15232
 4002564:	a009883a 	mov	r4,r20
 4002568:	40040080 	call	4004008 <__mulsf3>
 400256c:	1009883a 	mov	r4,r2
 4002570:	400491c0 	call	400491c <__fixsfsi>
 4002574:	1009883a 	mov	r4,r2
 4002578:	400498c0 	call	400498c <__floatsisf>
 400257c:	0150e034 	movhi	r5,17280
 4002580:	1009883a 	mov	r4,r2
 4002584:	102d883a 	mov	r22,r2
 4002588:	40040080 	call	4004008 <__mulsf3>
 400258c:	100b883a 	mov	r5,r2
 4002590:	a009883a 	mov	r4,r20
 4002594:	40044380 	call	4004438 <__subsf3>
 4002598:	1009883a 	mov	r4,r2
 400259c:	400491c0 	call	400491c <__fixsfsi>
 40025a0:	99400017 	ldw	r5,0(r19)
 40025a4:	90800015 	stw	r2,0(r18)
 40025a8:	b009883a 	mov	r4,r22
 40025ac:	40035040 	call	4003504 <__addsf3>
 40025b0:	d8c05017 	ldw	r3,320(sp)
 40025b4:	9cffff04 	addi	r19,r19,-4
 40025b8:	1029883a 	mov	r20,r2
 40025bc:	94800104 	addi	r18,r18,4
 40025c0:	98ffe71e 	bne	r19,r3,4002560 <__alt_data_end+0xfc002560>
 40025c4:	d9405217 	ldw	r5,328(sp)
 40025c8:	a009883a 	mov	r4,r20
 40025cc:	40033a80 	call	40033a8 <scalbnf>
 40025d0:	014f8034 	movhi	r5,15872
 40025d4:	1009883a 	mov	r4,r2
 40025d8:	1025883a 	mov	r18,r2
 40025dc:	40040080 	call	4004008 <__mulsf3>
 40025e0:	1009883a 	mov	r4,r2
 40025e4:	40032440 	call	4003244 <floorf>
 40025e8:	01504034 	movhi	r5,16640
 40025ec:	1009883a 	mov	r4,r2
 40025f0:	40040080 	call	4004008 <__mulsf3>
 40025f4:	100b883a 	mov	r5,r2
 40025f8:	9009883a 	mov	r4,r18
 40025fc:	40044380 	call	4004438 <__subsf3>
 4002600:	1009883a 	mov	r4,r2
 4002604:	1025883a 	mov	r18,r2
 4002608:	400491c0 	call	400491c <__fixsfsi>
 400260c:	1009883a 	mov	r4,r2
 4002610:	1029883a 	mov	r20,r2
 4002614:	400498c0 	call	400498c <__floatsisf>
 4002618:	100b883a 	mov	r5,r2
 400261c:	9009883a 	mov	r4,r18
 4002620:	40044380 	call	4004438 <__subsf3>
 4002624:	d9805217 	ldw	r6,328(sp)
 4002628:	1013883a 	mov	r9,r2
 400262c:	1011883a 	mov	r8,r2
 4002630:	01809c0e 	bge	zero,r6,40028a4 <__kernel_rem_pio2f+0x538>
 4002634:	88bfffc4 	addi	r2,r17,-1
 4002638:	1085883a 	add	r2,r2,r2
 400263c:	1085883a 	add	r2,r2,r2
 4002640:	d885883a 	add	r2,sp,r2
 4002644:	10803c04 	addi	r2,r2,240
 4002648:	11000017 	ldw	r4,0(r2)
 400264c:	00c00204 	movi	r3,8
 4002650:	1987c83a 	sub	r3,r3,r6
 4002654:	20cbd83a 	sra	r5,r4,r3
 4002658:	04c001c4 	movi	r19,7
 400265c:	99a7c83a 	sub	r19,r19,r6
 4002660:	28c6983a 	sll	r3,r5,r3
 4002664:	a169883a 	add	r20,r20,r5
 4002668:	20c7c83a 	sub	r3,r4,r3
 400266c:	1ce7d83a 	sra	r19,r3,r19
 4002670:	10c00015 	stw	r3,0(r2)
 4002674:	04c0270e 	bge	zero,r19,4002714 <__kernel_rem_pio2f+0x3a8>
 4002678:	a5000044 	addi	r20,r20,1
 400267c:	0441d10e 	bge	zero,r17,4002dc4 <__kernel_rem_pio2f+0xa58>
 4002680:	d8803c04 	addi	r2,sp,240
 4002684:	0009883a 	mov	r4,zero
 4002688:	0025883a 	mov	r18,zero
 400268c:	01c03fc4 	movi	r7,255
 4002690:	01804004 	movi	r6,256
 4002694:	00000706 	br	40026b4 <__kernel_rem_pio2f+0x348>
 4002698:	30cbc83a 	sub	r5,r6,r3
 400269c:	18000226 	beq	r3,zero,40026a8 <__kernel_rem_pio2f+0x33c>
 40026a0:	11400015 	stw	r5,0(r2)
 40026a4:	04800044 	movi	r18,1
 40026a8:	21000044 	addi	r4,r4,1
 40026ac:	10800104 	addi	r2,r2,4
 40026b0:	2440080e 	bge	r4,r17,40026d4 <__kernel_rem_pio2f+0x368>
 40026b4:	10c00017 	ldw	r3,0(r2)
 40026b8:	903ff726 	beq	r18,zero,4002698 <__alt_data_end+0xfc002698>
 40026bc:	38c7c83a 	sub	r3,r7,r3
 40026c0:	10c00015 	stw	r3,0(r2)
 40026c4:	21000044 	addi	r4,r4,1
 40026c8:	04800044 	movi	r18,1
 40026cc:	10800104 	addi	r2,r2,4
 40026d0:	247ff816 	blt	r4,r17,40026b4 <__alt_data_end+0xfc0026b4>
 40026d4:	d9805217 	ldw	r6,328(sp)
 40026d8:	01800c0e 	bge	zero,r6,400270c <__kernel_rem_pio2f+0x3a0>
 40026dc:	00800044 	movi	r2,1
 40026e0:	30807926 	beq	r6,r2,40028c8 <__kernel_rem_pio2f+0x55c>
 40026e4:	00800084 	movi	r2,2
 40026e8:	3080081e 	bne	r6,r2,400270c <__kernel_rem_pio2f+0x3a0>
 40026ec:	88bfffc4 	addi	r2,r17,-1
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	1085883a 	add	r2,r2,r2
 40026f8:	d885883a 	add	r2,sp,r2
 40026fc:	10803c04 	addi	r2,r2,240
 4002700:	10c00017 	ldw	r3,0(r2)
 4002704:	18c00fcc 	andi	r3,r3,63
 4002708:	10c00015 	stw	r3,0(r2)
 400270c:	00800084 	movi	r2,2
 4002710:	98805326 	beq	r19,r2,4002860 <__kernel_rem_pio2f+0x4f4>
 4002714:	4009883a 	mov	r4,r8
 4002718:	000b883a 	mov	r5,zero
 400271c:	da005d15 	stw	r8,372(sp)
 4002720:	4003e0c0 	call	4003e0c <__eqsf2>
 4002724:	da005d17 	ldw	r8,372(sp)
 4002728:	10017a1e 	bne	r2,zero,4002d14 <__kernel_rem_pio2f+0x9a8>
 400272c:	da005717 	ldw	r8,348(sp)
 4002730:	8cbfffc4 	addi	r18,r17,-1
 4002734:	92000e16 	blt	r18,r8,4002770 <__kernel_rem_pio2f+0x404>
 4002738:	00d00034 	movhi	r3,16384
 400273c:	18ffffc4 	addi	r3,r3,-1
 4002740:	88c5883a 	add	r2,r17,r3
 4002744:	1085883a 	add	r2,r2,r2
 4002748:	d9405a17 	ldw	r5,360(sp)
 400274c:	1085883a 	add	r2,r2,r2
 4002750:	d9003c04 	addi	r4,sp,240
 4002754:	2085883a 	add	r2,r4,r2
 4002758:	0007883a 	mov	r3,zero
 400275c:	11000017 	ldw	r4,0(r2)
 4002760:	10bfff04 	addi	r2,r2,-4
 4002764:	1906b03a 	or	r3,r3,r4
 4002768:	117ffc1e 	bne	r2,r5,400275c <__alt_data_end+0xfc00275c>
 400276c:	18006f1e 	bne	r3,zero,400292c <__kernel_rem_pio2f+0x5c0>
 4002770:	d9805b17 	ldw	r6,364(sp)
 4002774:	30800017 	ldw	r2,0(r6)
 4002778:	1001941e 	bne	r2,zero,4002dcc <__kernel_rem_pio2f+0xa60>
 400277c:	d8805917 	ldw	r2,356(sp)
 4002780:	05000044 	movi	r20,1
 4002784:	10bfff04 	addi	r2,r2,-4
 4002788:	10c00117 	ldw	r3,4(r2)
 400278c:	a5000044 	addi	r20,r20,1
 4002790:	183ffc26 	beq	r3,zero,4002784 <__alt_data_end+0xfc002784>
 4002794:	8d29883a 	add	r20,r17,r20
 4002798:	88800044 	addi	r2,r17,1
 400279c:	dd005315 	stw	r20,332(sp)
 40027a0:	a0802b16 	blt	r20,r2,4002850 <__kernel_rem_pio2f+0x4e4>
 40027a4:	da005517 	ldw	r8,340(sp)
 40027a8:	d8c05617 	ldw	r3,344(sp)
 40027ac:	d9805817 	ldw	r6,352(sp)
 40027b0:	40a5883a 	add	r18,r8,r2
 40027b4:	da005317 	ldw	r8,332(sp)
 40027b8:	1c63883a 	add	r17,r3,r17
 40027bc:	d8c06917 	ldw	r3,420(sp)
 40027c0:	322b883a 	add	r21,r6,r8
 40027c4:	94a5883a 	add	r18,r18,r18
 40027c8:	8c63883a 	add	r17,r17,r17
 40027cc:	1085883a 	add	r2,r2,r2
 40027d0:	ad6b883a 	add	r21,r21,r21
 40027d4:	94a5883a 	add	r18,r18,r18
 40027d8:	8c63883a 	add	r17,r17,r17
 40027dc:	1085883a 	add	r2,r2,r2
 40027e0:	ad6b883a 	add	r21,r21,r21
 40027e4:	d9002804 	addi	r4,sp,160
 40027e8:	1ca5883a 	add	r18,r3,r18
 40027ec:	2463883a 	add	r17,r4,r17
 40027f0:	d8a7883a 	add	r19,sp,r2
 40027f4:	1d6b883a 	add	r21,r3,r21
 40027f8:	91000017 	ldw	r4,0(r18)
 40027fc:	400498c0 	call	400498c <__floatsisf>
 4002800:	88800015 	stw	r2,0(r17)
 4002804:	b8001416 	blt	r23,zero,4002858 <__kernel_rem_pio2f+0x4ec>
 4002808:	dd005117 	ldw	r20,324(sp)
 400280c:	882d883a 	mov	r22,r17
 4002810:	0039883a 	mov	fp,zero
 4002814:	b1400017 	ldw	r5,0(r22)
 4002818:	a1000017 	ldw	r4,0(r20)
 400281c:	a5000104 	addi	r20,r20,4
 4002820:	b5bfff04 	addi	r22,r22,-4
 4002824:	40040080 	call	4004008 <__mulsf3>
 4002828:	e009883a 	mov	r4,fp
 400282c:	100b883a 	mov	r5,r2
 4002830:	40035040 	call	4003504 <__addsf3>
 4002834:	1039883a 	mov	fp,r2
 4002838:	a43ff61e 	bne	r20,r16,4002814 <__alt_data_end+0xfc002814>
 400283c:	9f000015 	stw	fp,0(r19)
 4002840:	94800104 	addi	r18,r18,4
 4002844:	8c400104 	addi	r17,r17,4
 4002848:	9cc00104 	addi	r19,r19,4
 400284c:	957fea1e 	bne	r18,r21,40027f8 <__alt_data_end+0xfc0027f8>
 4002850:	dc405317 	ldw	r17,332(sp)
 4002854:	003f3606 	br	4002530 <__alt_data_end+0xfc002530>
 4002858:	0039883a 	mov	fp,zero
 400285c:	003ff706 	br	400283c <__alt_data_end+0xfc00283c>
 4002860:	480b883a 	mov	r5,r9
 4002864:	010fe034 	movhi	r4,16256
 4002868:	40044380 	call	4004438 <__subsf3>
 400286c:	1011883a 	mov	r8,r2
 4002870:	903fa826 	beq	r18,zero,4002714 <__alt_data_end+0xfc002714>
 4002874:	d9405217 	ldw	r5,328(sp)
 4002878:	010fe034 	movhi	r4,16256
 400287c:	d8805c15 	stw	r2,368(sp)
 4002880:	40033a80 	call	40033a8 <scalbnf>
 4002884:	d8c05c17 	ldw	r3,368(sp)
 4002888:	100b883a 	mov	r5,r2
 400288c:	1809883a 	mov	r4,r3
 4002890:	40044380 	call	4004438 <__subsf3>
 4002894:	1011883a 	mov	r8,r2
 4002898:	003f9e06 	br	4002714 <__alt_data_end+0xfc002714>
 400289c:	0005883a 	mov	r2,zero
 40028a0:	003ee106 	br	4002428 <__alt_data_end+0xfc002428>
 40028a4:	d8c05217 	ldw	r3,328(sp)
 40028a8:	1800101e 	bne	r3,zero,40028ec <__kernel_rem_pio2f+0x580>
 40028ac:	88bfffc4 	addi	r2,r17,-1
 40028b0:	1085883a 	add	r2,r2,r2
 40028b4:	1085883a 	add	r2,r2,r2
 40028b8:	d885883a 	add	r2,sp,r2
 40028bc:	14c03c17 	ldw	r19,240(r2)
 40028c0:	9827d23a 	srai	r19,r19,8
 40028c4:	003f6b06 	br	4002674 <__alt_data_end+0xfc002674>
 40028c8:	88bfffc4 	addi	r2,r17,-1
 40028cc:	1085883a 	add	r2,r2,r2
 40028d0:	1085883a 	add	r2,r2,r2
 40028d4:	d885883a 	add	r2,sp,r2
 40028d8:	10803c04 	addi	r2,r2,240
 40028dc:	10c00017 	ldw	r3,0(r2)
 40028e0:	18c01fcc 	andi	r3,r3,127
 40028e4:	10c00015 	stw	r3,0(r2)
 40028e8:	003f8806 	br	400270c <__alt_data_end+0xfc00270c>
 40028ec:	014fc034 	movhi	r5,16128
 40028f0:	1009883a 	mov	r4,r2
 40028f4:	d8805d15 	stw	r2,372(sp)
 40028f8:	d8805c15 	stw	r2,368(sp)
 40028fc:	4003e840 	call	4003e84 <__gesf2>
 4002900:	da005d17 	ldw	r8,372(sp)
 4002904:	da405c17 	ldw	r9,368(sp)
 4002908:	10007d0e 	bge	r2,zero,4002b00 <__kernel_rem_pio2f+0x794>
 400290c:	0027883a 	mov	r19,zero
 4002910:	003f8006 	br	4002714 <__alt_data_end+0xfc002714>
 4002914:	002d883a 	mov	r22,zero
 4002918:	95800015 	stw	r22,0(r18)
 400291c:	94800104 	addi	r18,r18,4
 4002920:	8c400104 	addi	r17,r17,4
 4002924:	94fed41e 	bne	r18,r19,4002478 <__alt_data_end+0xfc002478>
 4002928:	003ee506 	br	40024c0 <__alt_data_end+0xfc0024c0>
 400292c:	9485883a 	add	r2,r18,r18
 4002930:	d9805217 	ldw	r6,328(sp)
 4002934:	1085883a 	add	r2,r2,r2
 4002938:	d885883a 	add	r2,sp,r2
 400293c:	10803c17 	ldw	r2,240(r2)
 4002940:	31bffe04 	addi	r6,r6,-8
 4002944:	dd005315 	stw	r20,332(sp)
 4002948:	d9805215 	stw	r6,328(sp)
 400294c:	dd805717 	ldw	r22,348(sp)
 4002950:	10000e1e 	bne	r2,zero,400298c <__kernel_rem_pio2f+0x620>
 4002954:	00900034 	movhi	r2,16384
 4002958:	10bfffc4 	addi	r2,r2,-1
 400295c:	9085883a 	add	r2,r18,r2
 4002960:	1085883a 	add	r2,r2,r2
 4002964:	1085883a 	add	r2,r2,r2
 4002968:	da003c04 	addi	r8,sp,240
 400296c:	4085883a 	add	r2,r8,r2
 4002970:	3007883a 	mov	r3,r6
 4002974:	10bfff04 	addi	r2,r2,-4
 4002978:	11000117 	ldw	r4,4(r2)
 400297c:	94bfffc4 	addi	r18,r18,-1
 4002980:	18fffe04 	addi	r3,r3,-8
 4002984:	203ffb26 	beq	r4,zero,4002974 <__alt_data_end+0xfc002974>
 4002988:	d8c05215 	stw	r3,328(sp)
 400298c:	d9405217 	ldw	r5,328(sp)
 4002990:	010fe034 	movhi	r4,16256
 4002994:	40033a80 	call	40033a8 <scalbnf>
 4002998:	102f883a 	mov	r23,r2
 400299c:	90011316 	blt	r18,zero,4002dec <__kernel_rem_pio2f+0xa80>
 40029a0:	9491883a 	add	r8,r18,r18
 40029a4:	4207883a 	add	r3,r8,r8
 40029a8:	d8e3883a 	add	r17,sp,r3
 40029ac:	d8803c04 	addi	r2,sp,240
 40029b0:	da005115 	stw	r8,324(sp)
 40029b4:	10f9883a 	add	fp,r2,r3
 40029b8:	dc003b04 	addi	r16,sp,236
 40029bc:	882b883a 	mov	r21,r17
 40029c0:	e1000017 	ldw	r4,0(fp)
 40029c4:	ad7fff04 	addi	r21,r21,-4
 40029c8:	e73fff04 	addi	fp,fp,-4
 40029cc:	400498c0 	call	400498c <__floatsisf>
 40029d0:	b80b883a 	mov	r5,r23
 40029d4:	1009883a 	mov	r4,r2
 40029d8:	40040080 	call	4004008 <__mulsf3>
 40029dc:	b809883a 	mov	r4,r23
 40029e0:	014ee034 	movhi	r5,15232
 40029e4:	a8800115 	stw	r2,4(r21)
 40029e8:	40040080 	call	4004008 <__mulsf3>
 40029ec:	102f883a 	mov	r23,r2
 40029f0:	e43ff31e 	bne	fp,r16,40029c0 <__alt_data_end+0xfc0029c0>
 40029f4:	d9bfff04 	addi	r6,sp,-4
 40029f8:	d9805015 	stw	r6,320(sp)
 40029fc:	002b883a 	mov	r21,zero
 4002a00:	0039883a 	mov	fp,zero
 4002a04:	b0001316 	blt	r22,zero,4002a54 <__kernel_rem_pio2f+0x6e8>
 4002a08:	05c10074 	movhi	r23,1025
 4002a0c:	bdea2704 	addi	r23,r23,-22372
 4002a10:	8829883a 	mov	r20,r17
 4002a14:	010ff274 	movhi	r4,16329
 4002a18:	0039883a 	mov	fp,zero
 4002a1c:	0021883a 	mov	r16,zero
 4002a20:	00000406 	br	4002a34 <__kernel_rem_pio2f+0x6c8>
 4002a24:	a5000104 	addi	r20,r20,4
 4002a28:	ac000a16 	blt	r21,r16,4002a54 <__kernel_rem_pio2f+0x6e8>
 4002a2c:	b9000017 	ldw	r4,0(r23)
 4002a30:	bdc00104 	addi	r23,r23,4
 4002a34:	a1400017 	ldw	r5,0(r20)
 4002a38:	84000044 	addi	r16,r16,1
 4002a3c:	40040080 	call	4004008 <__mulsf3>
 4002a40:	e009883a 	mov	r4,fp
 4002a44:	100b883a 	mov	r5,r2
 4002a48:	40035040 	call	4003504 <__addsf3>
 4002a4c:	1039883a 	mov	fp,r2
 4002a50:	b43ff40e 	bge	r22,r16,4002a24 <__alt_data_end+0xfc002a24>
 4002a54:	ad45883a 	add	r2,r21,r21
 4002a58:	1085883a 	add	r2,r2,r2
 4002a5c:	d8c05017 	ldw	r3,320(sp)
 4002a60:	d885883a 	add	r2,sp,r2
 4002a64:	17001415 	stw	fp,80(r2)
 4002a68:	8c7fff04 	addi	r17,r17,-4
 4002a6c:	ad400044 	addi	r21,r21,1
 4002a70:	1c7fe31e 	bne	r3,r17,4002a00 <__alt_data_end+0xfc002a00>
 4002a74:	d8c06817 	ldw	r3,416(sp)
 4002a78:	00800084 	movi	r2,2
 4002a7c:	10c04516 	blt	r2,r3,4002b94 <__kernel_rem_pio2f+0x828>
 4002a80:	00c02316 	blt	zero,r3,4002b10 <__kernel_rem_pio2f+0x7a4>
 4002a84:	1800101e 	bne	r3,zero,4002ac8 <__kernel_rem_pio2f+0x75c>
 4002a88:	d9805117 	ldw	r6,324(sp)
 4002a8c:	da001404 	addi	r8,sp,80
 4002a90:	0005883a 	mov	r2,zero
 4002a94:	31a1883a 	add	r16,r6,r6
 4002a98:	4421883a 	add	r16,r8,r16
 4002a9c:	047fffc4 	movi	r17,-1
 4002aa0:	81400017 	ldw	r5,0(r16)
 4002aa4:	1009883a 	mov	r4,r2
 4002aa8:	94bfffc4 	addi	r18,r18,-1
 4002aac:	40035040 	call	4003504 <__addsf3>
 4002ab0:	843fff04 	addi	r16,r16,-4
 4002ab4:	947ffa1e 	bne	r18,r17,4002aa0 <__alt_data_end+0xfc002aa0>
 4002ab8:	98000126 	beq	r19,zero,4002ac0 <__kernel_rem_pio2f+0x754>
 4002abc:	10a0003c 	xorhi	r2,r2,32768
 4002ac0:	d8c05417 	ldw	r3,336(sp)
 4002ac4:	18800015 	stw	r2,0(r3)
 4002ac8:	da005317 	ldw	r8,332(sp)
 4002acc:	408001cc 	andi	r2,r8,7
 4002ad0:	dfc06717 	ldw	ra,412(sp)
 4002ad4:	df006617 	ldw	fp,408(sp)
 4002ad8:	ddc06517 	ldw	r23,404(sp)
 4002adc:	dd806417 	ldw	r22,400(sp)
 4002ae0:	dd406317 	ldw	r21,396(sp)
 4002ae4:	dd006217 	ldw	r20,392(sp)
 4002ae8:	dcc06117 	ldw	r19,388(sp)
 4002aec:	dc806017 	ldw	r18,384(sp)
 4002af0:	dc405f17 	ldw	r17,380(sp)
 4002af4:	dc005e17 	ldw	r16,376(sp)
 4002af8:	dec06804 	addi	sp,sp,416
 4002afc:	f800283a 	ret
 4002b00:	a5000044 	addi	r20,r20,1
 4002b04:	0440b30e 	bge	zero,r17,4002dd4 <__kernel_rem_pio2f+0xa68>
 4002b08:	04c00084 	movi	r19,2
 4002b0c:	003edc06 	br	4002680 <__alt_data_end+0xfc002680>
 4002b10:	d9805117 	ldw	r6,324(sp)
 4002b14:	da001404 	addi	r8,sp,80
 4002b18:	dc401304 	addi	r17,sp,76
 4002b1c:	31a1883a 	add	r16,r6,r6
 4002b20:	4421883a 	add	r16,r8,r16
 4002b24:	0005883a 	mov	r2,zero
 4002b28:	81400017 	ldw	r5,0(r16)
 4002b2c:	1009883a 	mov	r4,r2
 4002b30:	843fff04 	addi	r16,r16,-4
 4002b34:	40035040 	call	4003504 <__addsf3>
 4002b38:	847ffb1e 	bne	r16,r17,4002b28 <__alt_data_end+0xfc002b28>
 4002b3c:	d9001417 	ldw	r4,80(sp)
 4002b40:	98006b26 	beq	r19,zero,4002cf0 <__kernel_rem_pio2f+0x984>
 4002b44:	d9805417 	ldw	r6,336(sp)
 4002b48:	10e0003c 	xorhi	r3,r2,32768
 4002b4c:	100b883a 	mov	r5,r2
 4002b50:	30c00015 	stw	r3,0(r6)
 4002b54:	40044380 	call	4004438 <__subsf3>
 4002b58:	1009883a 	mov	r4,r2
 4002b5c:	0480090e 	bge	zero,r18,4002b84 <__kernel_rem_pio2f+0x818>
 4002b60:	dc401504 	addi	r17,sp,84
 4002b64:	04000044 	movi	r16,1
 4002b68:	89400017 	ldw	r5,0(r17)
 4002b6c:	84000044 	addi	r16,r16,1
 4002b70:	8c400104 	addi	r17,r17,4
 4002b74:	40035040 	call	4003504 <__addsf3>
 4002b78:	1009883a 	mov	r4,r2
 4002b7c:	943ffa0e 	bge	r18,r16,4002b68 <__alt_data_end+0xfc002b68>
 4002b80:	98000126 	beq	r19,zero,4002b88 <__kernel_rem_pio2f+0x81c>
 4002b84:	20a0003c 	xorhi	r2,r4,32768
 4002b88:	da005417 	ldw	r8,336(sp)
 4002b8c:	40800115 	stw	r2,4(r8)
 4002b90:	003fcd06 	br	4002ac8 <__alt_data_end+0xfc002ac8>
 4002b94:	da006817 	ldw	r8,416(sp)
 4002b98:	008000c4 	movi	r2,3
 4002b9c:	40bfca1e 	bne	r8,r2,4002ac8 <__alt_data_end+0xfc002ac8>
 4002ba0:	0480a60e 	bge	zero,r18,4002e3c <__kernel_rem_pio2f+0xad0>
 4002ba4:	d8c05117 	ldw	r3,324(sp)
 4002ba8:	04500034 	movhi	r17,16384
 4002bac:	8c7fffc4 	addi	r17,r17,-1
 4002bb0:	18c5883a 	add	r2,r3,r3
 4002bb4:	9463883a 	add	r17,r18,r17
 4002bb8:	d885883a 	add	r2,sp,r2
 4002bbc:	8c63883a 	add	r17,r17,r17
 4002bc0:	8c63883a 	add	r17,r17,r17
 4002bc4:	15c01417 	ldw	r23,80(r2)
 4002bc8:	dd401404 	addi	r21,sp,80
 4002bcc:	8d800104 	addi	r22,r17,4
 4002bd0:	adad883a 	add	r22,r21,r22
 4002bd4:	ac63883a 	add	r17,r21,r17
 4002bd8:	d9801304 	addi	r6,sp,76
 4002bdc:	8d000017 	ldw	r20,0(r17)
 4002be0:	b80b883a 	mov	r5,r23
 4002be4:	d9805c15 	stw	r6,368(sp)
 4002be8:	a009883a 	mov	r4,r20
 4002bec:	40035040 	call	4003504 <__addsf3>
 4002bf0:	100b883a 	mov	r5,r2
 4002bf4:	a009883a 	mov	r4,r20
 4002bf8:	1021883a 	mov	r16,r2
 4002bfc:	40044380 	call	4004438 <__subsf3>
 4002c00:	b80b883a 	mov	r5,r23
 4002c04:	1009883a 	mov	r4,r2
 4002c08:	40035040 	call	4003504 <__addsf3>
 4002c0c:	d9805c17 	ldw	r6,368(sp)
 4002c10:	b0800015 	stw	r2,0(r22)
 4002c14:	8c7fff04 	addi	r17,r17,-4
 4002c18:	8c000115 	stw	r16,4(r17)
 4002c1c:	b5bfff04 	addi	r22,r22,-4
 4002c20:	802f883a 	mov	r23,r16
 4002c24:	347fed1e 	bne	r6,r17,4002bdc <__alt_data_end+0xfc002bdc>
 4002c28:	00800044 	movi	r2,1
 4002c2c:	1480830e 	bge	r2,r18,4002e3c <__kernel_rem_pio2f+0xad0>
 4002c30:	d9805117 	ldw	r6,324(sp)
 4002c34:	31a1883a 	add	r16,r6,r6
 4002c38:	dc05883a 	add	r2,sp,r16
 4002c3c:	04100034 	movhi	r16,16384
 4002c40:	843fffc4 	addi	r16,r16,-1
 4002c44:	9421883a 	add	r16,r18,r16
 4002c48:	8421883a 	add	r16,r16,r16
 4002c4c:	8421883a 	add	r16,r16,r16
 4002c50:	84400104 	addi	r17,r16,4
 4002c54:	15801417 	ldw	r22,80(r2)
 4002c58:	ac63883a 	add	r17,r21,r17
 4002c5c:	ac21883a 	add	r16,r21,r16
 4002c60:	8825883a 	mov	r18,r17
 4002c64:	85c00017 	ldw	r23,0(r16)
 4002c68:	b009883a 	mov	r4,r22
 4002c6c:	843fff04 	addi	r16,r16,-4
 4002c70:	b80b883a 	mov	r5,r23
 4002c74:	40035040 	call	4003504 <__addsf3>
 4002c78:	100b883a 	mov	r5,r2
 4002c7c:	b809883a 	mov	r4,r23
 4002c80:	1029883a 	mov	r20,r2
 4002c84:	40044380 	call	4004438 <__subsf3>
 4002c88:	b00b883a 	mov	r5,r22
 4002c8c:	1009883a 	mov	r4,r2
 4002c90:	40035040 	call	4003504 <__addsf3>
 4002c94:	90800015 	stw	r2,0(r18)
 4002c98:	85000115 	stw	r20,4(r16)
 4002c9c:	94bfff04 	addi	r18,r18,-4
 4002ca0:	a02d883a 	mov	r22,r20
 4002ca4:	ac3fef1e 	bne	r21,r16,4002c64 <__alt_data_end+0xfc002c64>
 4002ca8:	dc001504 	addi	r16,sp,84
 4002cac:	0005883a 	mov	r2,zero
 4002cb0:	89400017 	ldw	r5,0(r17)
 4002cb4:	1009883a 	mov	r4,r2
 4002cb8:	8c7fff04 	addi	r17,r17,-4
 4002cbc:	40035040 	call	4003504 <__addsf3>
 4002cc0:	847ffb1e 	bne	r16,r17,4002cb0 <__alt_data_end+0xfc002cb0>
 4002cc4:	98005f26 	beq	r19,zero,4002e44 <__kernel_rem_pio2f+0xad8>
 4002cc8:	d8c01517 	ldw	r3,84(sp)
 4002ccc:	d9001417 	ldw	r4,80(sp)
 4002cd0:	d9805417 	ldw	r6,336(sp)
 4002cd4:	10a0003c 	xorhi	r2,r2,32768
 4002cd8:	2120003c 	xorhi	r4,r4,32768
 4002cdc:	18e0003c 	xorhi	r3,r3,32768
 4002ce0:	31000015 	stw	r4,0(r6)
 4002ce4:	30c00115 	stw	r3,4(r6)
 4002ce8:	30800215 	stw	r2,8(r6)
 4002cec:	003f7606 	br	4002ac8 <__alt_data_end+0xfc002ac8>
 4002cf0:	d8c05417 	ldw	r3,336(sp)
 4002cf4:	100b883a 	mov	r5,r2
 4002cf8:	18800015 	stw	r2,0(r3)
 4002cfc:	40044380 	call	4004438 <__subsf3>
 4002d00:	1009883a 	mov	r4,r2
 4002d04:	04bf9616 	blt	zero,r18,4002b60 <__alt_data_end+0xfc002b60>
 4002d08:	da005417 	ldw	r8,336(sp)
 4002d0c:	40800115 	stw	r2,4(r8)
 4002d10:	003f6d06 	br	4002ac8 <__alt_data_end+0xfc002ac8>
 4002d14:	d8c05217 	ldw	r3,328(sp)
 4002d18:	4009883a 	mov	r4,r8
 4002d1c:	dd005315 	stw	r20,332(sp)
 4002d20:	00cbc83a 	sub	r5,zero,r3
 4002d24:	dd805717 	ldw	r22,348(sp)
 4002d28:	0410e034 	movhi	r16,17280
 4002d2c:	40033a80 	call	40033a8 <scalbnf>
 4002d30:	800b883a 	mov	r5,r16
 4002d34:	1009883a 	mov	r4,r2
 4002d38:	1025883a 	mov	r18,r2
 4002d3c:	4003e840 	call	4003e84 <__gesf2>
 4002d40:	10003116 	blt	r2,zero,4002e08 <__kernel_rem_pio2f+0xa9c>
 4002d44:	014ee034 	movhi	r5,15232
 4002d48:	9009883a 	mov	r4,r18
 4002d4c:	40040080 	call	4004008 <__mulsf3>
 4002d50:	1009883a 	mov	r4,r2
 4002d54:	400491c0 	call	400491c <__fixsfsi>
 4002d58:	1009883a 	mov	r4,r2
 4002d5c:	400498c0 	call	400498c <__floatsisf>
 4002d60:	800b883a 	mov	r5,r16
 4002d64:	1009883a 	mov	r4,r2
 4002d68:	102f883a 	mov	r23,r2
 4002d6c:	40040080 	call	4004008 <__mulsf3>
 4002d70:	100b883a 	mov	r5,r2
 4002d74:	9009883a 	mov	r4,r18
 4002d78:	40044380 	call	4004438 <__subsf3>
 4002d7c:	1009883a 	mov	r4,r2
 4002d80:	ad6b883a 	add	r21,r21,r21
 4002d84:	400491c0 	call	400491c <__fixsfsi>
 4002d88:	dd6b883a 	add	r21,sp,r21
 4002d8c:	8c800044 	addi	r18,r17,1
 4002d90:	ad403c04 	addi	r21,r21,240
 4002d94:	9487883a 	add	r3,r18,r18
 4002d98:	18c7883a 	add	r3,r3,r3
 4002d9c:	b809883a 	mov	r4,r23
 4002da0:	a8800015 	stw	r2,0(r21)
 4002da4:	d8e1883a 	add	r16,sp,r3
 4002da8:	400491c0 	call	400491c <__fixsfsi>
 4002dac:	d9805217 	ldw	r6,328(sp)
 4002db0:	84003c04 	addi	r16,r16,240
 4002db4:	80800015 	stw	r2,0(r16)
 4002db8:	31800204 	addi	r6,r6,8
 4002dbc:	d9805215 	stw	r6,328(sp)
 4002dc0:	003ef206 	br	400298c <__alt_data_end+0xfc00298c>
 4002dc4:	0025883a 	mov	r18,zero
 4002dc8:	003e4206 	br	40026d4 <__alt_data_end+0xfc0026d4>
 4002dcc:	05000044 	movi	r20,1
 4002dd0:	003e7006 	br	4002794 <__alt_data_end+0xfc002794>
 4002dd4:	480b883a 	mov	r5,r9
 4002dd8:	010fe034 	movhi	r4,16256
 4002ddc:	40044380 	call	4004438 <__subsf3>
 4002de0:	1011883a 	mov	r8,r2
 4002de4:	04c00084 	movi	r19,2
 4002de8:	003e4a06 	br	4002714 <__alt_data_end+0xfc002714>
 4002dec:	da006817 	ldw	r8,416(sp)
 4002df0:	00800084 	movi	r2,2
 4002df4:	12000e16 	blt	r2,r8,4002e30 <__kernel_rem_pio2f+0xac4>
 4002df8:	02000b16 	blt	zero,r8,4002e28 <__kernel_rem_pio2f+0xabc>
 4002dfc:	403f321e 	bne	r8,zero,4002ac8 <__alt_data_end+0xfc002ac8>
 4002e00:	0005883a 	mov	r2,zero
 4002e04:	003f2c06 	br	4002ab8 <__alt_data_end+0xfc002ab8>
 4002e08:	ad61883a 	add	r16,r21,r21
 4002e0c:	dc21883a 	add	r16,sp,r16
 4002e10:	9009883a 	mov	r4,r18
 4002e14:	84003c04 	addi	r16,r16,240
 4002e18:	400491c0 	call	400491c <__fixsfsi>
 4002e1c:	80800015 	stw	r2,0(r16)
 4002e20:	8825883a 	mov	r18,r17
 4002e24:	003ed906 	br	400298c <__alt_data_end+0xfc00298c>
 4002e28:	0005883a 	mov	r2,zero
 4002e2c:	003f4306 	br	4002b3c <__alt_data_end+0xfc002b3c>
 4002e30:	d8c06817 	ldw	r3,416(sp)
 4002e34:	008000c4 	movi	r2,3
 4002e38:	18bf231e 	bne	r3,r2,4002ac8 <__alt_data_end+0xfc002ac8>
 4002e3c:	0005883a 	mov	r2,zero
 4002e40:	983fa11e 	bne	r19,zero,4002cc8 <__alt_data_end+0xfc002cc8>
 4002e44:	da005417 	ldw	r8,336(sp)
 4002e48:	d8c01517 	ldw	r3,84(sp)
 4002e4c:	40800215 	stw	r2,8(r8)
 4002e50:	d8801417 	ldw	r2,80(sp)
 4002e54:	40c00115 	stw	r3,4(r8)
 4002e58:	40800015 	stw	r2,0(r8)
 4002e5c:	003f1a06 	br	4002ac8 <__alt_data_end+0xfc002ac8>
 4002e60:	d8005515 	stw	zero,340(sp)
 4002e64:	003d5c06 	br	40023d8 <__alt_data_end+0xfc0023d8>
 4002e68:	30c00104 	addi	r3,r6,4
 4002e6c:	003d5706 	br	40023cc <__alt_data_end+0xfc0023cc>

04002e70 <__kernel_sinf>:
 4002e70:	00a00034 	movhi	r2,32768
 4002e74:	defff904 	addi	sp,sp,-28
 4002e78:	10bfffc4 	addi	r2,r2,-1
 4002e7c:	00cc8034 	movhi	r3,12800
 4002e80:	dd000415 	stw	r20,16(sp)
 4002e84:	dcc00315 	stw	r19,12(sp)
 4002e88:	dc000015 	stw	r16,0(sp)
 4002e8c:	dfc00615 	stw	ra,24(sp)
 4002e90:	dd400515 	stw	r21,20(sp)
 4002e94:	dc800215 	stw	r18,8(sp)
 4002e98:	dc400115 	stw	r17,4(sp)
 4002e9c:	1104703a 	and	r2,r2,r4
 4002ea0:	18ffffc4 	addi	r3,r3,-1
 4002ea4:	2021883a 	mov	r16,r4
 4002ea8:	2827883a 	mov	r19,r5
 4002eac:	3029883a 	mov	r20,r6
 4002eb0:	18800216 	blt	r3,r2,4002ebc <__kernel_sinf+0x4c>
 4002eb4:	400491c0 	call	400491c <__fixsfsi>
 4002eb8:	10005926 	beq	r2,zero,4003020 <__kernel_sinf+0x1b0>
 4002ebc:	800b883a 	mov	r5,r16
 4002ec0:	8009883a 	mov	r4,r16
 4002ec4:	40040080 	call	4004008 <__mulsf3>
 4002ec8:	100b883a 	mov	r5,r2
 4002ecc:	8009883a 	mov	r4,r16
 4002ed0:	1023883a 	mov	r17,r2
 4002ed4:	40040080 	call	4004008 <__mulsf3>
 4002ed8:	014bcbf4 	movhi	r5,12079
 4002edc:	297274c4 	addi	r5,r5,-13869
 4002ee0:	8809883a 	mov	r4,r17
 4002ee4:	1025883a 	mov	r18,r2
 4002ee8:	40040080 	call	4004008 <__mulsf3>
 4002eec:	014cb5f4 	movhi	r5,13015
 4002ef0:	294bcd04 	addi	r5,r5,12084
 4002ef4:	1009883a 	mov	r4,r2
 4002ef8:	40044380 	call	4004438 <__subsf3>
 4002efc:	880b883a 	mov	r5,r17
 4002f00:	1009883a 	mov	r4,r2
 4002f04:	40040080 	call	4004008 <__mulsf3>
 4002f08:	014d8e74 	movhi	r5,13881
 4002f0c:	297bc6c4 	addi	r5,r5,-4325
 4002f10:	1009883a 	mov	r4,r2
 4002f14:	40035040 	call	4003504 <__addsf3>
 4002f18:	880b883a 	mov	r5,r17
 4002f1c:	1009883a 	mov	r4,r2
 4002f20:	40040080 	call	4004008 <__mulsf3>
 4002f24:	014e5434 	movhi	r5,14672
 4002f28:	29434044 	addi	r5,r5,3329
 4002f2c:	1009883a 	mov	r4,r2
 4002f30:	40044380 	call	4004438 <__subsf3>
 4002f34:	880b883a 	mov	r5,r17
 4002f38:	1009883a 	mov	r4,r2
 4002f3c:	40040080 	call	4004008 <__mulsf3>
 4002f40:	014f0274 	movhi	r5,15369
 4002f44:	29622244 	addi	r5,r5,-30583
 4002f48:	1009883a 	mov	r4,r2
 4002f4c:	40035040 	call	4003504 <__addsf3>
 4002f50:	102b883a 	mov	r21,r2
 4002f54:	a0002426 	beq	r20,zero,4002fe8 <__kernel_sinf+0x178>
 4002f58:	014fc034 	movhi	r5,16128
 4002f5c:	9809883a 	mov	r4,r19
 4002f60:	40040080 	call	4004008 <__mulsf3>
 4002f64:	a80b883a 	mov	r5,r21
 4002f68:	9009883a 	mov	r4,r18
 4002f6c:	1029883a 	mov	r20,r2
 4002f70:	40040080 	call	4004008 <__mulsf3>
 4002f74:	100b883a 	mov	r5,r2
 4002f78:	a009883a 	mov	r4,r20
 4002f7c:	40044380 	call	4004438 <__subsf3>
 4002f80:	880b883a 	mov	r5,r17
 4002f84:	1009883a 	mov	r4,r2
 4002f88:	40040080 	call	4004008 <__mulsf3>
 4002f8c:	980b883a 	mov	r5,r19
 4002f90:	1009883a 	mov	r4,r2
 4002f94:	40044380 	call	4004438 <__subsf3>
 4002f98:	014f8af4 	movhi	r5,15915
 4002f9c:	296aaac4 	addi	r5,r5,-21845
 4002fa0:	9009883a 	mov	r4,r18
 4002fa4:	1023883a 	mov	r17,r2
 4002fa8:	40040080 	call	4004008 <__mulsf3>
 4002fac:	100b883a 	mov	r5,r2
 4002fb0:	8809883a 	mov	r4,r17
 4002fb4:	40035040 	call	4003504 <__addsf3>
 4002fb8:	100b883a 	mov	r5,r2
 4002fbc:	8009883a 	mov	r4,r16
 4002fc0:	40044380 	call	4004438 <__subsf3>
 4002fc4:	dfc00617 	ldw	ra,24(sp)
 4002fc8:	dd400517 	ldw	r21,20(sp)
 4002fcc:	dd000417 	ldw	r20,16(sp)
 4002fd0:	dcc00317 	ldw	r19,12(sp)
 4002fd4:	dc800217 	ldw	r18,8(sp)
 4002fd8:	dc400117 	ldw	r17,4(sp)
 4002fdc:	dc000017 	ldw	r16,0(sp)
 4002fe0:	dec00704 	addi	sp,sp,28
 4002fe4:	f800283a 	ret
 4002fe8:	8809883a 	mov	r4,r17
 4002fec:	100b883a 	mov	r5,r2
 4002ff0:	40040080 	call	4004008 <__mulsf3>
 4002ff4:	014f8af4 	movhi	r5,15915
 4002ff8:	296aaac4 	addi	r5,r5,-21845
 4002ffc:	1009883a 	mov	r4,r2
 4003000:	40044380 	call	4004438 <__subsf3>
 4003004:	900b883a 	mov	r5,r18
 4003008:	1009883a 	mov	r4,r2
 400300c:	40040080 	call	4004008 <__mulsf3>
 4003010:	800b883a 	mov	r5,r16
 4003014:	1009883a 	mov	r4,r2
 4003018:	40035040 	call	4003504 <__addsf3>
 400301c:	003fe906 	br	4002fc4 <__alt_data_end+0xfc002fc4>
 4003020:	8005883a 	mov	r2,r16
 4003024:	003fe706 	br	4002fc4 <__alt_data_end+0xfc002fc4>

04003028 <matherr>:
 4003028:	0005883a 	mov	r2,zero
 400302c:	f800283a 	ret

04003030 <rint>:
 4003030:	2813d53a 	srai	r9,r5,20
 4003034:	defff904 	addi	sp,sp,-28
 4003038:	dc000215 	stw	r16,8(sp)
 400303c:	4a41ffcc 	andi	r9,r9,2047
 4003040:	dfc00615 	stw	ra,24(sp)
 4003044:	dcc00515 	stw	r19,20(sp)
 4003048:	dc800415 	stw	r18,16(sp)
 400304c:	dc400315 	stw	r17,12(sp)
 4003050:	01c004c4 	movi	r7,19
 4003054:	49bf0044 	addi	r6,r9,-1023
 4003058:	2811883a 	mov	r8,r5
 400305c:	2005883a 	mov	r2,r4
 4003060:	2807883a 	mov	r3,r5
 4003064:	2015883a 	mov	r10,r4
 4003068:	2820d7fa 	srli	r16,r5,31
 400306c:	39801316 	blt	r7,r6,40030bc <rint+0x8c>
 4003070:	30003d16 	blt	r6,zero,4003168 <rint+0x138>
 4003074:	01000434 	movhi	r4,16
 4003078:	213fffc4 	addi	r4,r4,-1
 400307c:	2189d83a 	sra	r4,r4,r6
 4003080:	290a703a 	and	r5,r5,r4
 4003084:	288ab03a 	or	r5,r5,r2
 4003088:	28001026 	beq	r5,zero,40030cc <rint+0x9c>
 400308c:	2008d07a 	srli	r4,r4,1
 4003090:	4104703a 	and	r2,r8,r4
 4003094:	1294b03a 	or	r10,r2,r10
 4003098:	50005626 	beq	r10,zero,40031f4 <rint+0x1c4>
 400309c:	31c05d26 	beq	r6,r7,4003214 <rint+0x1e4>
 40030a0:	0015883a 	mov	r10,zero
 40030a4:	00c00134 	movhi	r3,4
 40030a8:	1987d83a 	sra	r3,r3,r6
 40030ac:	0108303a 	nor	r4,zero,r4
 40030b0:	2210703a 	and	r8,r4,r8
 40030b4:	40c6b03a 	or	r3,r8,r3
 40030b8:	00001806 	br	400311c <rint+0xec>
 40030bc:	01c00cc4 	movi	r7,51
 40030c0:	3980090e 	bge	r7,r6,40030e8 <rint+0xb8>
 40030c4:	01c10004 	movi	r7,1024
 40030c8:	31c04e26 	beq	r6,r7,4003204 <rint+0x1d4>
 40030cc:	dfc00617 	ldw	ra,24(sp)
 40030d0:	dcc00517 	ldw	r19,20(sp)
 40030d4:	dc800417 	ldw	r18,16(sp)
 40030d8:	dc400317 	ldw	r17,12(sp)
 40030dc:	dc000217 	ldw	r16,8(sp)
 40030e0:	dec00704 	addi	sp,sp,28
 40030e4:	f800283a 	ret
 40030e8:	4a7efb44 	addi	r9,r9,-1043
 40030ec:	013fffc4 	movi	r4,-1
 40030f0:	2248d83a 	srl	r4,r4,r9
 40030f4:	110a703a 	and	r5,r2,r4
 40030f8:	28004026 	beq	r5,zero,40031fc <rint+0x1cc>
 40030fc:	2008d07a 	srli	r4,r4,1
 4003100:	1104703a 	and	r2,r2,r4
 4003104:	10000526 	beq	r2,zero,400311c <rint+0xec>
 4003108:	00900034 	movhi	r2,16384
 400310c:	1253d83a 	sra	r9,r2,r9
 4003110:	0108303a 	nor	r4,zero,r4
 4003114:	2294703a 	and	r10,r4,r10
 4003118:	4a94b03a 	or	r10,r9,r10
 400311c:	802090fa 	slli	r16,r16,3
 4003120:	180b883a 	mov	r5,r3
 4003124:	00c10074 	movhi	r3,1025
 4003128:	18ea3404 	addi	r3,r3,-22320
 400312c:	1c21883a 	add	r16,r3,r16
 4003130:	84400017 	ldw	r17,0(r16)
 4003134:	84000117 	ldw	r16,4(r16)
 4003138:	5009883a 	mov	r4,r10
 400313c:	880d883a 	mov	r6,r17
 4003140:	800f883a 	mov	r7,r16
 4003144:	4004ab00 	call	4004ab0 <__adddf3>
 4003148:	d8800015 	stw	r2,0(sp)
 400314c:	d8c00115 	stw	r3,4(sp)
 4003150:	d9000017 	ldw	r4,0(sp)
 4003154:	d9400117 	ldw	r5,4(sp)
 4003158:	880d883a 	mov	r6,r17
 400315c:	800f883a 	mov	r7,r16
 4003160:	40066200 	call	4006620 <__subdf3>
 4003164:	003fd906 	br	40030cc <__alt_data_end+0xfc0030cc>
 4003168:	04600034 	movhi	r17,32768
 400316c:	8c7fffc4 	addi	r17,r17,-1
 4003170:	2c46703a 	and	r3,r5,r17
 4003174:	1906b03a 	or	r3,r3,r4
 4003178:	18002026 	beq	r3,zero,40031fc <rint+0x1cc>
 400317c:	01800434 	movhi	r6,16
 4003180:	31bfffc4 	addi	r6,r6,-1
 4003184:	298c703a 	and	r6,r5,r6
 4003188:	3104b03a 	or	r2,r6,r4
 400318c:	008bc83a 	sub	r5,zero,r2
 4003190:	800690fa 	slli	r3,r16,3
 4003194:	2884b03a 	or	r2,r5,r2
 4003198:	01410074 	movhi	r5,1025
 400319c:	296a3404 	addi	r5,r5,-22320
 40031a0:	28c7883a 	add	r3,r5,r3
 40031a4:	1004d33a 	srli	r2,r2,12
 40031a8:	1cc00017 	ldw	r19,0(r3)
 40031ac:	1c800117 	ldw	r18,4(r3)
 40031b0:	417fffac 	andhi	r5,r8,65534
 40031b4:	1080022c 	andhi	r2,r2,8
 40031b8:	980d883a 	mov	r6,r19
 40031bc:	900f883a 	mov	r7,r18
 40031c0:	114ab03a 	or	r5,r2,r5
 40031c4:	4004ab00 	call	4004ab0 <__adddf3>
 40031c8:	d8800015 	stw	r2,0(sp)
 40031cc:	d8c00115 	stw	r3,4(sp)
 40031d0:	d9000017 	ldw	r4,0(sp)
 40031d4:	d9400117 	ldw	r5,4(sp)
 40031d8:	980d883a 	mov	r6,r19
 40031dc:	900f883a 	mov	r7,r18
 40031e0:	40066200 	call	4006620 <__subdf3>
 40031e4:	800897fa 	slli	r4,r16,31
 40031e8:	1c46703a 	and	r3,r3,r17
 40031ec:	1906b03a 	or	r3,r3,r4
 40031f0:	003fb606 	br	40030cc <__alt_data_end+0xfc0030cc>
 40031f4:	0015883a 	mov	r10,zero
 40031f8:	003fc806 	br	400311c <__alt_data_end+0xfc00311c>
 40031fc:	4007883a 	mov	r3,r8
 4003200:	003fb206 	br	40030cc <__alt_data_end+0xfc0030cc>
 4003204:	200d883a 	mov	r6,r4
 4003208:	280f883a 	mov	r7,r5
 400320c:	4004ab00 	call	4004ab0 <__adddf3>
 4003210:	003fae06 	br	40030cc <__alt_data_end+0xfc0030cc>
 4003214:	02a00034 	movhi	r10,32768
 4003218:	003fa206 	br	40030a4 <__alt_data_end+0xfc0030a4>

0400321c <fabsf>:
 400321c:	00a00034 	movhi	r2,32768
 4003220:	10bfffc4 	addi	r2,r2,-1
 4003224:	2084703a 	and	r2,r4,r2
 4003228:	f800283a 	ret

0400322c <finitef>:
 400322c:	00a00034 	movhi	r2,32768
 4003230:	10bfffc4 	addi	r2,r2,-1
 4003234:	1104703a 	and	r2,r2,r4
 4003238:	00dfe034 	movhi	r3,32640
 400323c:	10c4803a 	cmplt	r2,r2,r3
 4003240:	f800283a 	ret

04003244 <floorf>:
 4003244:	defffa04 	addi	sp,sp,-24
 4003248:	dc800215 	stw	r18,8(sp)
 400324c:	04a00034 	movhi	r18,32768
 4003250:	94bfffc4 	addi	r18,r18,-1
 4003254:	9124703a 	and	r18,r18,r4
 4003258:	dc400115 	stw	r17,4(sp)
 400325c:	9022d5fa 	srli	r17,r18,23
 4003260:	dc000015 	stw	r16,0(sp)
 4003264:	dfc00515 	stw	ra,20(sp)
 4003268:	dd000415 	stw	r20,16(sp)
 400326c:	dcc00315 	stw	r19,12(sp)
 4003270:	8c7fe044 	addi	r17,r17,-127
 4003274:	00800584 	movi	r2,22
 4003278:	2021883a 	mov	r16,r4
 400327c:	14401216 	blt	r2,r17,40032c8 <floorf+0x84>
 4003280:	2029883a 	mov	r20,r4
 4003284:	88001f16 	blt	r17,zero,4003304 <floorf+0xc0>
 4003288:	04802034 	movhi	r18,128
 400328c:	94bfffc4 	addi	r18,r18,-1
 4003290:	9465d83a 	sra	r18,r18,r17
 4003294:	9104703a 	and	r2,r18,r4
 4003298:	10000e26 	beq	r2,zero,40032d4 <floorf+0x90>
 400329c:	015c52b4 	movhi	r5,29002
 40032a0:	297cb284 	addi	r5,r5,-3382
 40032a4:	40035040 	call	4003504 <__addsf3>
 40032a8:	000b883a 	mov	r5,zero
 40032ac:	1009883a 	mov	r4,r2
 40032b0:	4003e840 	call	4003e84 <__gesf2>
 40032b4:	0080070e 	bge	zero,r2,40032d4 <floorf+0x90>
 40032b8:	80001c16 	blt	r16,zero,400332c <floorf+0xe8>
 40032bc:	0484303a 	nor	r2,zero,r18
 40032c0:	1504703a 	and	r2,r2,r20
 40032c4:	00000406 	br	40032d8 <floorf+0x94>
 40032c8:	009fe034 	movhi	r2,32640
 40032cc:	10bfffc4 	addi	r2,r2,-1
 40032d0:	14800936 	bltu	r2,r18,40032f8 <floorf+0xb4>
 40032d4:	8005883a 	mov	r2,r16
 40032d8:	dfc00517 	ldw	ra,20(sp)
 40032dc:	dd000417 	ldw	r20,16(sp)
 40032e0:	dcc00317 	ldw	r19,12(sp)
 40032e4:	dc800217 	ldw	r18,8(sp)
 40032e8:	dc400117 	ldw	r17,4(sp)
 40032ec:	dc000017 	ldw	r16,0(sp)
 40032f0:	dec00604 	addi	sp,sp,24
 40032f4:	f800283a 	ret
 40032f8:	200b883a 	mov	r5,r4
 40032fc:	40035040 	call	4003504 <__addsf3>
 4003300:	003ff506 	br	40032d8 <__alt_data_end+0xfc0032d8>
 4003304:	015c52b4 	movhi	r5,29002
 4003308:	297cb284 	addi	r5,r5,-3382
 400330c:	40035040 	call	4003504 <__addsf3>
 4003310:	000b883a 	mov	r5,zero
 4003314:	1009883a 	mov	r4,r2
 4003318:	4003e840 	call	4003e84 <__gesf2>
 400331c:	00bfed0e 	bge	zero,r2,40032d4 <__alt_data_end+0xfc0032d4>
 4003320:	80000616 	blt	r16,zero,400333c <floorf+0xf8>
 4003324:	0005883a 	mov	r2,zero
 4003328:	003feb06 	br	40032d8 <__alt_data_end+0xfc0032d8>
 400332c:	00802034 	movhi	r2,128
 4003330:	1445d83a 	sra	r2,r2,r17
 4003334:	1429883a 	add	r20,r2,r16
 4003338:	003fe006 	br	40032bc <__alt_data_end+0xfc0032bc>
 400333c:	903fe526 	beq	r18,zero,40032d4 <__alt_data_end+0xfc0032d4>
 4003340:	00afe034 	movhi	r2,49024
 4003344:	003fe406 	br	40032d8 <__alt_data_end+0xfc0032d8>

04003348 <__fpclassifyf>:
 4003348:	00a00034 	movhi	r2,32768
 400334c:	10bfffc4 	addi	r2,r2,-1
 4003350:	2088703a 	and	r4,r4,r2
 4003354:	2000021e 	bne	r4,zero,4003360 <__fpclassifyf+0x18>
 4003358:	00800084 	movi	r2,2
 400335c:	f800283a 	ret
 4003360:	00bfe034 	movhi	r2,65408
 4003364:	00dfc034 	movhi	r3,32512
 4003368:	2085883a 	add	r2,r4,r2
 400336c:	18ffffc4 	addi	r3,r3,-1
 4003370:	18800236 	bltu	r3,r2,400337c <__fpclassifyf+0x34>
 4003374:	00800104 	movi	r2,4
 4003378:	f800283a 	ret
 400337c:	00c02034 	movhi	r3,128
 4003380:	20bfffc4 	addi	r2,r4,-1
 4003384:	18ffff84 	addi	r3,r3,-2
 4003388:	18800236 	bltu	r3,r2,4003394 <__fpclassifyf+0x4c>
 400338c:	008000c4 	movi	r2,3
 4003390:	f800283a 	ret
 4003394:	009fe034 	movhi	r2,32640
 4003398:	2085003a 	cmpeq	r2,r4,r2
 400339c:	f800283a 	ret

040033a0 <nanf>:
 40033a0:	009ff034 	movhi	r2,32704
 40033a4:	f800283a 	ret

040033a8 <scalbnf>:
 40033a8:	00e00034 	movhi	r3,32768
 40033ac:	18ffffc4 	addi	r3,r3,-1
 40033b0:	1906703a 	and	r3,r3,r4
 40033b4:	200f883a 	mov	r7,r4
 40033b8:	18001f26 	beq	r3,zero,4003438 <scalbnf+0x90>
 40033bc:	defffe04 	addi	sp,sp,-8
 40033c0:	009fe034 	movhi	r2,32640
 40033c4:	dc000015 	stw	r16,0(sp)
 40033c8:	dfc00115 	stw	ra,4(sp)
 40033cc:	10bfffc4 	addi	r2,r2,-1
 40033d0:	2821883a 	mov	r16,r5
 40033d4:	10c01236 	bltu	r2,r3,4003420 <scalbnf+0x78>
 40033d8:	00802034 	movhi	r2,128
 40033dc:	10bfffc4 	addi	r2,r2,-1
 40033e0:	10c0172e 	bgeu	r2,r3,4003440 <scalbnf+0x98>
 40033e4:	1806d5fa 	srli	r3,r3,23
 40033e8:	2005883a 	mov	r2,r4
 40033ec:	1c07883a 	add	r3,r3,r16
 40033f0:	01003f84 	movi	r4,254
 40033f4:	20c02316 	blt	r4,r3,4003484 <scalbnf+0xdc>
 40033f8:	00c01b0e 	bge	zero,r3,4003468 <scalbnf+0xc0>
 40033fc:	180695fa 	slli	r3,r3,23
 4003400:	01602034 	movhi	r5,32896
 4003404:	297fffc4 	addi	r5,r5,-1
 4003408:	1144703a 	and	r2,r2,r5
 400340c:	10c4b03a 	or	r2,r2,r3
 4003410:	dfc00117 	ldw	ra,4(sp)
 4003414:	dc000017 	ldw	r16,0(sp)
 4003418:	dec00204 	addi	sp,sp,8
 400341c:	f800283a 	ret
 4003420:	200b883a 	mov	r5,r4
 4003424:	40035040 	call	4003504 <__addsf3>
 4003428:	dfc00117 	ldw	ra,4(sp)
 400342c:	dc000017 	ldw	r16,0(sp)
 4003430:	dec00204 	addi	sp,sp,8
 4003434:	f800283a 	ret
 4003438:	2005883a 	mov	r2,r4
 400343c:	f800283a 	ret
 4003440:	01530034 	movhi	r5,19456
 4003444:	40040080 	call	4004008 <__mulsf3>
 4003448:	00fffff4 	movhi	r3,65535
 400344c:	18cf2c04 	addi	r3,r3,15536
 4003450:	100f883a 	mov	r7,r2
 4003454:	80c01716 	blt	r16,r3,40034b4 <scalbnf+0x10c>
 4003458:	119fe02c 	andhi	r6,r2,32640
 400345c:	300dd5fa 	srai	r6,r6,23
 4003460:	30fff9c4 	addi	r3,r6,-25
 4003464:	003fe106 	br	40033ec <__alt_data_end+0xfc0033ec>
 4003468:	013ffa84 	movi	r4,-22
 400346c:	1900160e 	bge	r3,r4,40034c8 <scalbnf+0x120>
 4003470:	00b0d414 	movui	r2,50000
 4003474:	14000316 	blt	r2,r16,4003484 <scalbnf+0xdc>
 4003478:	040368b4 	movhi	r16,3490
 400347c:	84109804 	addi	r16,r16,16992
 4003480:	00000206 	br	400348c <scalbnf+0xe4>
 4003484:	041c52b4 	movhi	r16,29002
 4003488:	843cb284 	addi	r16,r16,-3382
 400348c:	380b883a 	mov	r5,r7
 4003490:	8009883a 	mov	r4,r16
 4003494:	40034ec0 	call	40034ec <copysignf>
 4003498:	800b883a 	mov	r5,r16
 400349c:	1009883a 	mov	r4,r2
 40034a0:	40040080 	call	4004008 <__mulsf3>
 40034a4:	dfc00117 	ldw	ra,4(sp)
 40034a8:	dc000017 	ldw	r16,0(sp)
 40034ac:	dec00204 	addi	sp,sp,8
 40034b0:	f800283a 	ret
 40034b4:	014368b4 	movhi	r5,3490
 40034b8:	29509804 	addi	r5,r5,16992
 40034bc:	1009883a 	mov	r4,r2
 40034c0:	40040080 	call	4004008 <__mulsf3>
 40034c4:	003fd806 	br	4003428 <__alt_data_end+0xfc003428>
 40034c8:	18c00644 	addi	r3,r3,25
 40034cc:	180c95fa 	slli	r6,r3,23
 40034d0:	01202034 	movhi	r4,32896
 40034d4:	213fffc4 	addi	r4,r4,-1
 40034d8:	1108703a 	and	r4,r2,r4
 40034dc:	014cc034 	movhi	r5,13056
 40034e0:	3108b03a 	or	r4,r6,r4
 40034e4:	40040080 	call	4004008 <__mulsf3>
 40034e8:	003fcf06 	br	4003428 <__alt_data_end+0xfc003428>

040034ec <copysignf>:
 40034ec:	00e00034 	movhi	r3,32768
 40034f0:	18ffffc4 	addi	r3,r3,-1
 40034f4:	28a0002c 	andhi	r2,r5,32768
 40034f8:	20c8703a 	and	r4,r4,r3
 40034fc:	2084b03a 	or	r2,r4,r2
 4003500:	f800283a 	ret

04003504 <__addsf3>:
 4003504:	defffc04 	addi	sp,sp,-16
 4003508:	2004d7fa 	srli	r2,r4,31
 400350c:	280cd5fa 	srli	r6,r5,23
 4003510:	dc000015 	stw	r16,0(sp)
 4003514:	00c02034 	movhi	r3,128
 4003518:	2020d5fa 	srli	r16,r4,23
 400351c:	280ed7fa 	srli	r7,r5,31
 4003520:	18ffffc4 	addi	r3,r3,-1
 4003524:	dc400115 	stw	r17,4(sp)
 4003528:	1908703a 	and	r4,r3,r4
 400352c:	194a703a 	and	r5,r3,r5
 4003530:	dfc00315 	stw	ra,12(sp)
 4003534:	dc800215 	stw	r18,8(sp)
 4003538:	14403fcc 	andi	r17,r2,255
 400353c:	84003fcc 	andi	r16,r16,255
 4003540:	200890fa 	slli	r4,r4,3
 4003544:	31803fcc 	andi	r6,r6,255
 4003548:	280a90fa 	slli	r5,r5,3
 400354c:	89c05026 	beq	r17,r7,4003690 <__addsf3+0x18c>
 4003550:	8185c83a 	sub	r2,r16,r6
 4003554:	00807a0e 	bge	zero,r2,4003740 <__addsf3+0x23c>
 4003558:	30001e1e 	bne	r6,zero,40035d4 <__addsf3+0xd0>
 400355c:	28006d1e 	bne	r5,zero,4003714 <__addsf3+0x210>
 4003560:	208001cc 	andi	r2,r4,7
 4003564:	10000426 	beq	r2,zero,4003578 <__addsf3+0x74>
 4003568:	208003cc 	andi	r2,r4,15
 400356c:	00c00104 	movi	r3,4
 4003570:	10c00126 	beq	r2,r3,4003578 <__addsf3+0x74>
 4003574:	20c9883a 	add	r4,r4,r3
 4003578:	2081002c 	andhi	r2,r4,1024
 400357c:	10003926 	beq	r2,zero,4003664 <__addsf3+0x160>
 4003580:	84000044 	addi	r16,r16,1
 4003584:	00803fc4 	movi	r2,255
 4003588:	80807826 	beq	r16,r2,400376c <__addsf3+0x268>
 400358c:	200891ba 	slli	r4,r4,6
 4003590:	8805883a 	mov	r2,r17
 4003594:	2008d27a 	srli	r4,r4,9
 4003598:	84003fcc 	andi	r16,r16,255
 400359c:	800695fa 	slli	r3,r16,23
 40035a0:	10803fcc 	andi	r2,r2,255
 40035a4:	04002034 	movhi	r16,128
 40035a8:	843fffc4 	addi	r16,r16,-1
 40035ac:	100497fa 	slli	r2,r2,31
 40035b0:	2408703a 	and	r4,r4,r16
 40035b4:	20e0b03a 	or	r16,r4,r3
 40035b8:	8084b03a 	or	r2,r16,r2
 40035bc:	dfc00317 	ldw	ra,12(sp)
 40035c0:	dc800217 	ldw	r18,8(sp)
 40035c4:	dc400117 	ldw	r17,4(sp)
 40035c8:	dc000017 	ldw	r16,0(sp)
 40035cc:	dec00404 	addi	sp,sp,16
 40035d0:	f800283a 	ret
 40035d4:	00c03fc4 	movi	r3,255
 40035d8:	80ffe126 	beq	r16,r3,4003560 <__alt_data_end+0xfc003560>
 40035dc:	29410034 	orhi	r5,r5,1024
 40035e0:	00c006c4 	movi	r3,27
 40035e4:	18807516 	blt	r3,r2,40037bc <__addsf3+0x2b8>
 40035e8:	00c00804 	movi	r3,32
 40035ec:	1887c83a 	sub	r3,r3,r2
 40035f0:	28c6983a 	sll	r3,r5,r3
 40035f4:	288ad83a 	srl	r5,r5,r2
 40035f8:	1804c03a 	cmpne	r2,r3,zero
 40035fc:	288ab03a 	or	r5,r5,r2
 4003600:	2149c83a 	sub	r4,r4,r5
 4003604:	2081002c 	andhi	r2,r4,1024
 4003608:	10001426 	beq	r2,zero,400365c <__addsf3+0x158>
 400360c:	04810034 	movhi	r18,1024
 4003610:	94bfffc4 	addi	r18,r18,-1
 4003614:	24a4703a 	and	r18,r4,r18
 4003618:	9009883a 	mov	r4,r18
 400361c:	40071d40 	call	40071d4 <__clzsi2>
 4003620:	10bffec4 	addi	r2,r2,-5
 4003624:	90a4983a 	sll	r18,r18,r2
 4003628:	14005416 	blt	r2,r16,400377c <__addsf3+0x278>
 400362c:	1405c83a 	sub	r2,r2,r16
 4003630:	11000044 	addi	r4,r2,1
 4003634:	00800804 	movi	r2,32
 4003638:	1105c83a 	sub	r2,r2,r4
 400363c:	9084983a 	sll	r2,r18,r2
 4003640:	9124d83a 	srl	r18,r18,r4
 4003644:	0021883a 	mov	r16,zero
 4003648:	1008c03a 	cmpne	r4,r2,zero
 400364c:	9108b03a 	or	r4,r18,r4
 4003650:	003fc306 	br	4003560 <__alt_data_end+0xfc003560>
 4003654:	1000db26 	beq	r2,zero,40039c4 <__addsf3+0x4c0>
 4003658:	1009883a 	mov	r4,r2
 400365c:	208001cc 	andi	r2,r4,7
 4003660:	103fc11e 	bne	r2,zero,4003568 <__alt_data_end+0xfc003568>
 4003664:	2006d0fa 	srli	r3,r4,3
 4003668:	01003fc4 	movi	r4,255
 400366c:	8805883a 	mov	r2,r17
 4003670:	8100241e 	bne	r16,r4,4003704 <__addsf3+0x200>
 4003674:	18006e26 	beq	r3,zero,4003830 <__addsf3+0x32c>
 4003678:	19001034 	orhi	r4,r3,64
 400367c:	00c02034 	movhi	r3,128
 4003680:	18ffffc4 	addi	r3,r3,-1
 4003684:	043fffc4 	movi	r16,-1
 4003688:	20c8703a 	and	r4,r4,r3
 400368c:	003fc206 	br	4003598 <__alt_data_end+0xfc003598>
 4003690:	8187c83a 	sub	r3,r16,r6
 4003694:	00c03e0e 	bge	zero,r3,4003790 <__addsf3+0x28c>
 4003698:	30002326 	beq	r6,zero,4003728 <__addsf3+0x224>
 400369c:	01803fc4 	movi	r6,255
 40036a0:	81bfaf26 	beq	r16,r6,4003560 <__alt_data_end+0xfc003560>
 40036a4:	29410034 	orhi	r5,r5,1024
 40036a8:	018006c4 	movi	r6,27
 40036ac:	30c07416 	blt	r6,r3,4003880 <__addsf3+0x37c>
 40036b0:	01800804 	movi	r6,32
 40036b4:	30cdc83a 	sub	r6,r6,r3
 40036b8:	298c983a 	sll	r6,r5,r6
 40036bc:	28cad83a 	srl	r5,r5,r3
 40036c0:	3006c03a 	cmpne	r3,r6,zero
 40036c4:	28cab03a 	or	r5,r5,r3
 40036c8:	2149883a 	add	r4,r4,r5
 40036cc:	20c1002c 	andhi	r3,r4,1024
 40036d0:	183fe226 	beq	r3,zero,400365c <__alt_data_end+0xfc00365c>
 40036d4:	84000044 	addi	r16,r16,1
 40036d8:	00c03fc4 	movi	r3,255
 40036dc:	80c05426 	beq	r16,r3,4003830 <__addsf3+0x32c>
 40036e0:	00bf0034 	movhi	r2,64512
 40036e4:	10bfffc4 	addi	r2,r2,-1
 40036e8:	20c0004c 	andi	r3,r4,1
 40036ec:	2088703a 	and	r4,r4,r2
 40036f0:	2008d07a 	srli	r4,r4,1
 40036f4:	20c8b03a 	or	r4,r4,r3
 40036f8:	003f9906 	br	4003560 <__alt_data_end+0xfc003560>
 40036fc:	0007883a 	mov	r3,zero
 4003700:	0005883a 	mov	r2,zero
 4003704:	01002034 	movhi	r4,128
 4003708:	213fffc4 	addi	r4,r4,-1
 400370c:	1908703a 	and	r4,r3,r4
 4003710:	003fa106 	br	4003598 <__alt_data_end+0xfc003598>
 4003714:	10bfffc4 	addi	r2,r2,-1
 4003718:	103fb926 	beq	r2,zero,4003600 <__alt_data_end+0xfc003600>
 400371c:	00c03fc4 	movi	r3,255
 4003720:	80ffaf1e 	bne	r16,r3,40035e0 <__alt_data_end+0xfc0035e0>
 4003724:	003f8e06 	br	4003560 <__alt_data_end+0xfc003560>
 4003728:	283f8d26 	beq	r5,zero,4003560 <__alt_data_end+0xfc003560>
 400372c:	18ffffc4 	addi	r3,r3,-1
 4003730:	183fe526 	beq	r3,zero,40036c8 <__alt_data_end+0xfc0036c8>
 4003734:	01803fc4 	movi	r6,255
 4003738:	81bfdb1e 	bne	r16,r6,40036a8 <__alt_data_end+0xfc0036a8>
 400373c:	003f8806 	br	4003560 <__alt_data_end+0xfc003560>
 4003740:	1000201e 	bne	r2,zero,40037c4 <__addsf3+0x2c0>
 4003744:	80800044 	addi	r2,r16,1
 4003748:	10803fcc 	andi	r2,r2,255
 400374c:	01800044 	movi	r6,1
 4003750:	3080450e 	bge	r6,r2,4003868 <__addsf3+0x364>
 4003754:	2165c83a 	sub	r18,r4,r5
 4003758:	90c1002c 	andhi	r3,r18,1024
 400375c:	18002b26 	beq	r3,zero,400380c <__addsf3+0x308>
 4003760:	2925c83a 	sub	r18,r5,r4
 4003764:	3823883a 	mov	r17,r7
 4003768:	003fab06 	br	4003618 <__alt_data_end+0xfc003618>
 400376c:	8805883a 	mov	r2,r17
 4003770:	043fffc4 	movi	r16,-1
 4003774:	0009883a 	mov	r4,zero
 4003778:	003f8706 	br	4003598 <__alt_data_end+0xfc003598>
 400377c:	013f0034 	movhi	r4,64512
 4003780:	213fffc4 	addi	r4,r4,-1
 4003784:	80a1c83a 	sub	r16,r16,r2
 4003788:	9108703a 	and	r4,r18,r4
 400378c:	003f7406 	br	4003560 <__alt_data_end+0xfc003560>
 4003790:	1800411e 	bne	r3,zero,4003898 <__addsf3+0x394>
 4003794:	80c00044 	addi	r3,r16,1
 4003798:	19c03fcc 	andi	r7,r3,255
 400379c:	01800044 	movi	r6,1
 40037a0:	31c0260e 	bge	r6,r7,400383c <__addsf3+0x338>
 40037a4:	01803fc4 	movi	r6,255
 40037a8:	19802126 	beq	r3,r6,4003830 <__addsf3+0x32c>
 40037ac:	2149883a 	add	r4,r4,r5
 40037b0:	2008d07a 	srli	r4,r4,1
 40037b4:	1821883a 	mov	r16,r3
 40037b8:	003f6906 	br	4003560 <__alt_data_end+0xfc003560>
 40037bc:	01400044 	movi	r5,1
 40037c0:	003f8f06 	br	4003600 <__alt_data_end+0xfc003600>
 40037c4:	8000151e 	bne	r16,zero,400381c <__addsf3+0x318>
 40037c8:	20002f26 	beq	r4,zero,4003888 <__addsf3+0x384>
 40037cc:	0084303a 	nor	r2,zero,r2
 40037d0:	10000a26 	beq	r2,zero,40037fc <__addsf3+0x2f8>
 40037d4:	00c03fc4 	movi	r3,255
 40037d8:	30c02b26 	beq	r6,r3,4003888 <__addsf3+0x384>
 40037dc:	00c006c4 	movi	r3,27
 40037e0:	18806d16 	blt	r3,r2,4003998 <__addsf3+0x494>
 40037e4:	00c00804 	movi	r3,32
 40037e8:	1887c83a 	sub	r3,r3,r2
 40037ec:	20c6983a 	sll	r3,r4,r3
 40037f0:	2084d83a 	srl	r2,r4,r2
 40037f4:	1808c03a 	cmpne	r4,r3,zero
 40037f8:	1108b03a 	or	r4,r2,r4
 40037fc:	2909c83a 	sub	r4,r5,r4
 4003800:	3021883a 	mov	r16,r6
 4003804:	3823883a 	mov	r17,r7
 4003808:	003f7e06 	br	4003604 <__alt_data_end+0xfc003604>
 400380c:	903f821e 	bne	r18,zero,4003618 <__alt_data_end+0xfc003618>
 4003810:	0005883a 	mov	r2,zero
 4003814:	0021883a 	mov	r16,zero
 4003818:	003fba06 	br	4003704 <__alt_data_end+0xfc003704>
 400381c:	00c03fc4 	movi	r3,255
 4003820:	30c01926 	beq	r6,r3,4003888 <__addsf3+0x384>
 4003824:	0085c83a 	sub	r2,zero,r2
 4003828:	21010034 	orhi	r4,r4,1024
 400382c:	003feb06 	br	40037dc <__alt_data_end+0xfc0037dc>
 4003830:	043fffc4 	movi	r16,-1
 4003834:	0009883a 	mov	r4,zero
 4003838:	003f5706 	br	4003598 <__alt_data_end+0xfc003598>
 400383c:	80004a1e 	bne	r16,zero,4003968 <__addsf3+0x464>
 4003840:	20005926 	beq	r4,zero,40039a8 <__addsf3+0x4a4>
 4003844:	283f4626 	beq	r5,zero,4003560 <__alt_data_end+0xfc003560>
 4003848:	2149883a 	add	r4,r4,r5
 400384c:	2081002c 	andhi	r2,r4,1024
 4003850:	103f8226 	beq	r2,zero,400365c <__alt_data_end+0xfc00365c>
 4003854:	00bf0034 	movhi	r2,64512
 4003858:	10bfffc4 	addi	r2,r2,-1
 400385c:	3021883a 	mov	r16,r6
 4003860:	2088703a 	and	r4,r4,r2
 4003864:	003f3e06 	br	4003560 <__alt_data_end+0xfc003560>
 4003868:	8000121e 	bne	r16,zero,40038b4 <__addsf3+0x3b0>
 400386c:	2000261e 	bne	r4,zero,4003908 <__addsf3+0x404>
 4003870:	283fa226 	beq	r5,zero,40036fc <__alt_data_end+0xfc0036fc>
 4003874:	2809883a 	mov	r4,r5
 4003878:	3823883a 	mov	r17,r7
 400387c:	003f3806 	br	4003560 <__alt_data_end+0xfc003560>
 4003880:	01400044 	movi	r5,1
 4003884:	003f9006 	br	40036c8 <__alt_data_end+0xfc0036c8>
 4003888:	2809883a 	mov	r4,r5
 400388c:	3021883a 	mov	r16,r6
 4003890:	3823883a 	mov	r17,r7
 4003894:	003f3206 	br	4003560 <__alt_data_end+0xfc003560>
 4003898:	80000c1e 	bne	r16,zero,40038cc <__addsf3+0x3c8>
 400389c:	20002f26 	beq	r4,zero,400395c <__addsf3+0x458>
 40038a0:	00c6303a 	nor	r3,zero,r3
 40038a4:	18002b1e 	bne	r3,zero,4003954 <__addsf3+0x450>
 40038a8:	2149883a 	add	r4,r4,r5
 40038ac:	3021883a 	mov	r16,r6
 40038b0:	003f8606 	br	40036cc <__alt_data_end+0xfc0036cc>
 40038b4:	20001b1e 	bne	r4,zero,4003924 <__addsf3+0x420>
 40038b8:	28003926 	beq	r5,zero,40039a0 <__addsf3+0x49c>
 40038bc:	2809883a 	mov	r4,r5
 40038c0:	3823883a 	mov	r17,r7
 40038c4:	04003fc4 	movi	r16,255
 40038c8:	003f2506 	br	4003560 <__alt_data_end+0xfc003560>
 40038cc:	01c03fc4 	movi	r7,255
 40038d0:	31c02226 	beq	r6,r7,400395c <__addsf3+0x458>
 40038d4:	00c7c83a 	sub	r3,zero,r3
 40038d8:	21010034 	orhi	r4,r4,1024
 40038dc:	01c006c4 	movi	r7,27
 40038e0:	38c03616 	blt	r7,r3,40039bc <__addsf3+0x4b8>
 40038e4:	01c00804 	movi	r7,32
 40038e8:	38cfc83a 	sub	r7,r7,r3
 40038ec:	21ce983a 	sll	r7,r4,r7
 40038f0:	20c6d83a 	srl	r3,r4,r3
 40038f4:	3808c03a 	cmpne	r4,r7,zero
 40038f8:	1906b03a 	or	r3,r3,r4
 40038fc:	1949883a 	add	r4,r3,r5
 4003900:	3021883a 	mov	r16,r6
 4003904:	003f7106 	br	40036cc <__alt_data_end+0xfc0036cc>
 4003908:	283f1526 	beq	r5,zero,4003560 <__alt_data_end+0xfc003560>
 400390c:	2145c83a 	sub	r2,r4,r5
 4003910:	10c1002c 	andhi	r3,r2,1024
 4003914:	183f4f26 	beq	r3,zero,4003654 <__alt_data_end+0xfc003654>
 4003918:	2909c83a 	sub	r4,r5,r4
 400391c:	3823883a 	mov	r17,r7
 4003920:	003f0f06 	br	4003560 <__alt_data_end+0xfc003560>
 4003924:	28001a26 	beq	r5,zero,4003990 <__addsf3+0x48c>
 4003928:	2008d0fa 	srli	r4,r4,3
 400392c:	2080102c 	andhi	r2,r4,64
 4003930:	10000526 	beq	r2,zero,4003948 <__addsf3+0x444>
 4003934:	280ad0fa 	srli	r5,r5,3
 4003938:	2880102c 	andhi	r2,r5,64
 400393c:	1000021e 	bne	r2,zero,4003948 <__addsf3+0x444>
 4003940:	2809883a 	mov	r4,r5
 4003944:	3823883a 	mov	r17,r7
 4003948:	200890fa 	slli	r4,r4,3
 400394c:	04003fc4 	movi	r16,255
 4003950:	003f0306 	br	4003560 <__alt_data_end+0xfc003560>
 4003954:	01c03fc4 	movi	r7,255
 4003958:	31ffe01e 	bne	r6,r7,40038dc <__alt_data_end+0xfc0038dc>
 400395c:	2809883a 	mov	r4,r5
 4003960:	3021883a 	mov	r16,r6
 4003964:	003efe06 	br	4003560 <__alt_data_end+0xfc003560>
 4003968:	20001126 	beq	r4,zero,40039b0 <__addsf3+0x4ac>
 400396c:	28000826 	beq	r5,zero,4003990 <__addsf3+0x48c>
 4003970:	2008d0fa 	srli	r4,r4,3
 4003974:	2080102c 	andhi	r2,r4,64
 4003978:	103ff326 	beq	r2,zero,4003948 <__alt_data_end+0xfc003948>
 400397c:	280ad0fa 	srli	r5,r5,3
 4003980:	2880102c 	andhi	r2,r5,64
 4003984:	103ff01e 	bne	r2,zero,4003948 <__alt_data_end+0xfc003948>
 4003988:	2809883a 	mov	r4,r5
 400398c:	003fee06 	br	4003948 <__alt_data_end+0xfc003948>
 4003990:	04003fc4 	movi	r16,255
 4003994:	003ef206 	br	4003560 <__alt_data_end+0xfc003560>
 4003998:	01000044 	movi	r4,1
 400399c:	003f9706 	br	40037fc <__alt_data_end+0xfc0037fc>
 40039a0:	0005883a 	mov	r2,zero
 40039a4:	003f3406 	br	4003678 <__alt_data_end+0xfc003678>
 40039a8:	2809883a 	mov	r4,r5
 40039ac:	003eec06 	br	4003560 <__alt_data_end+0xfc003560>
 40039b0:	2809883a 	mov	r4,r5
 40039b4:	04003fc4 	movi	r16,255
 40039b8:	003ee906 	br	4003560 <__alt_data_end+0xfc003560>
 40039bc:	00c00044 	movi	r3,1
 40039c0:	003fce06 	br	40038fc <__alt_data_end+0xfc0038fc>
 40039c4:	0005883a 	mov	r2,zero
 40039c8:	003f4e06 	br	4003704 <__alt_data_end+0xfc003704>

040039cc <__divsf3>:
 40039cc:	defff504 	addi	sp,sp,-44
 40039d0:	200cd5fa 	srli	r6,r4,23
 40039d4:	dcc00415 	stw	r19,16(sp)
 40039d8:	2026d7fa 	srli	r19,r4,31
 40039dc:	00c02034 	movhi	r3,128
 40039e0:	dd800715 	stw	r22,28(sp)
 40039e4:	dd000515 	stw	r20,20(sp)
 40039e8:	dc800315 	stw	r18,12(sp)
 40039ec:	18ffffc4 	addi	r3,r3,-1
 40039f0:	dfc00a15 	stw	ra,40(sp)
 40039f4:	df000915 	stw	fp,36(sp)
 40039f8:	ddc00815 	stw	r23,32(sp)
 40039fc:	dd400615 	stw	r21,24(sp)
 4003a00:	dc400215 	stw	r17,8(sp)
 4003a04:	dc000115 	stw	r16,4(sp)
 4003a08:	35003fcc 	andi	r20,r6,255
 4003a0c:	1924703a 	and	r18,r3,r4
 4003a10:	9d803fcc 	andi	r22,r19,255
 4003a14:	a0005226 	beq	r20,zero,4003b60 <__divsf3+0x194>
 4003a18:	00803fc4 	movi	r2,255
 4003a1c:	a0802e26 	beq	r20,r2,4003ad8 <__divsf3+0x10c>
 4003a20:	91002034 	orhi	r4,r18,128
 4003a24:	202490fa 	slli	r18,r4,3
 4003a28:	a53fe044 	addi	r20,r20,-127
 4003a2c:	0021883a 	mov	r16,zero
 4003a30:	002f883a 	mov	r23,zero
 4003a34:	280cd5fa 	srli	r6,r5,23
 4003a38:	282ad7fa 	srli	r21,r5,31
 4003a3c:	00c02034 	movhi	r3,128
 4003a40:	18ffffc4 	addi	r3,r3,-1
 4003a44:	31803fcc 	andi	r6,r6,255
 4003a48:	1962703a 	and	r17,r3,r5
 4003a4c:	af003fcc 	andi	fp,r21,255
 4003a50:	30004a26 	beq	r6,zero,4003b7c <__divsf3+0x1b0>
 4003a54:	00803fc4 	movi	r2,255
 4003a58:	30804526 	beq	r6,r2,4003b70 <__divsf3+0x1a4>
 4003a5c:	89402034 	orhi	r5,r17,128
 4003a60:	282290fa 	slli	r17,r5,3
 4003a64:	31bfe044 	addi	r6,r6,-127
 4003a68:	000b883a 	mov	r5,zero
 4003a6c:	2c20b03a 	or	r16,r5,r16
 4003a70:	802090ba 	slli	r16,r16,2
 4003a74:	00810034 	movhi	r2,1024
 4003a78:	108ea604 	addi	r2,r2,15000
 4003a7c:	80a1883a 	add	r16,r16,r2
 4003a80:	81000017 	ldw	r4,0(r16)
 4003a84:	9d46f03a 	xor	r3,r19,r21
 4003a88:	180f883a 	mov	r7,r3
 4003a8c:	18803fcc 	andi	r2,r3,255
 4003a90:	a18dc83a 	sub	r6,r20,r6
 4003a94:	2000683a 	jmp	r4
 4003a98:	04003c7c 	xorhi	r16,zero,241
 4003a9c:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003aa0:	04003c70 	cmpltui	r16,zero,241
 4003aa4:	04003aec 	andhi	r16,zero,235
 4003aa8:	04003c70 	cmpltui	r16,zero,241
 4003aac:	04003c48 	cmpgei	r16,zero,241
 4003ab0:	04003c70 	cmpltui	r16,zero,241
 4003ab4:	04003aec 	andhi	r16,zero,235
 4003ab8:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003abc:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003ac0:	04003c48 	cmpgei	r16,zero,241
 4003ac4:	04003aec 	andhi	r16,zero,235
 4003ac8:	04003d5c 	xori	r16,zero,245
 4003acc:	04003d5c 	xori	r16,zero,245
 4003ad0:	04003d5c 	xori	r16,zero,245
 4003ad4:	04003d10 	cmplti	r16,zero,244
 4003ad8:	9000581e 	bne	r18,zero,4003c3c <__divsf3+0x270>
 4003adc:	04000204 	movi	r16,8
 4003ae0:	05c00084 	movi	r23,2
 4003ae4:	003fd306 	br	4003a34 <__alt_data_end+0xfc003a34>
 4003ae8:	0023883a 	mov	r17,zero
 4003aec:	e02d883a 	mov	r22,fp
 4003af0:	282f883a 	mov	r23,r5
 4003af4:	00800084 	movi	r2,2
 4003af8:	b8808f1e 	bne	r23,r2,4003d38 <__divsf3+0x36c>
 4003afc:	b005883a 	mov	r2,r22
 4003b00:	11c0004c 	andi	r7,r2,1
 4003b04:	013fffc4 	movi	r4,-1
 4003b08:	000d883a 	mov	r6,zero
 4003b0c:	21003fcc 	andi	r4,r4,255
 4003b10:	200895fa 	slli	r4,r4,23
 4003b14:	38803fcc 	andi	r2,r7,255
 4003b18:	00c02034 	movhi	r3,128
 4003b1c:	100497fa 	slli	r2,r2,31
 4003b20:	18ffffc4 	addi	r3,r3,-1
 4003b24:	30c6703a 	and	r3,r6,r3
 4003b28:	1906b03a 	or	r3,r3,r4
 4003b2c:	1884b03a 	or	r2,r3,r2
 4003b30:	dfc00a17 	ldw	ra,40(sp)
 4003b34:	df000917 	ldw	fp,36(sp)
 4003b38:	ddc00817 	ldw	r23,32(sp)
 4003b3c:	dd800717 	ldw	r22,28(sp)
 4003b40:	dd400617 	ldw	r21,24(sp)
 4003b44:	dd000517 	ldw	r20,20(sp)
 4003b48:	dcc00417 	ldw	r19,16(sp)
 4003b4c:	dc800317 	ldw	r18,12(sp)
 4003b50:	dc400217 	ldw	r17,8(sp)
 4003b54:	dc000117 	ldw	r16,4(sp)
 4003b58:	dec00b04 	addi	sp,sp,44
 4003b5c:	f800283a 	ret
 4003b60:	90002b1e 	bne	r18,zero,4003c10 <__divsf3+0x244>
 4003b64:	04000104 	movi	r16,4
 4003b68:	05c00044 	movi	r23,1
 4003b6c:	003fb106 	br	4003a34 <__alt_data_end+0xfc003a34>
 4003b70:	8800251e 	bne	r17,zero,4003c08 <__divsf3+0x23c>
 4003b74:	01400084 	movi	r5,2
 4003b78:	00000206 	br	4003b84 <__divsf3+0x1b8>
 4003b7c:	88001a1e 	bne	r17,zero,4003be8 <__divsf3+0x21c>
 4003b80:	01400044 	movi	r5,1
 4003b84:	8160b03a 	or	r16,r16,r5
 4003b88:	802090ba 	slli	r16,r16,2
 4003b8c:	00c10034 	movhi	r3,1024
 4003b90:	18ceea04 	addi	r3,r3,15272
 4003b94:	80e1883a 	add	r16,r16,r3
 4003b98:	80c00017 	ldw	r3,0(r16)
 4003b9c:	9d44f03a 	xor	r2,r19,r21
 4003ba0:	a18dc83a 	sub	r6,r20,r6
 4003ba4:	1800683a 	jmp	r3
 4003ba8:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003bac:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003bb0:	04003d4c 	andi	r16,zero,245
 4003bb4:	04003ae8 	cmpgeui	r16,zero,235
 4003bb8:	04003d4c 	andi	r16,zero,245
 4003bbc:	04003c48 	cmpgei	r16,zero,241
 4003bc0:	04003d4c 	andi	r16,zero,245
 4003bc4:	04003ae8 	cmpgeui	r16,zero,235
 4003bc8:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003bcc:	04003b00 	call	4003b0 <__reset-0x3bffc50>
 4003bd0:	04003c48 	cmpgei	r16,zero,241
 4003bd4:	04003ae8 	cmpgeui	r16,zero,235
 4003bd8:	04003d5c 	xori	r16,zero,245
 4003bdc:	04003d5c 	xori	r16,zero,245
 4003be0:	04003d5c 	xori	r16,zero,245
 4003be4:	04003d74 	movhi	r16,245
 4003be8:	8809883a 	mov	r4,r17
 4003bec:	40071d40 	call	40071d4 <__clzsi2>
 4003bf0:	10fffec4 	addi	r3,r2,-5
 4003bf4:	10801d84 	addi	r2,r2,118
 4003bf8:	88e2983a 	sll	r17,r17,r3
 4003bfc:	008dc83a 	sub	r6,zero,r2
 4003c00:	000b883a 	mov	r5,zero
 4003c04:	003f9906 	br	4003a6c <__alt_data_end+0xfc003a6c>
 4003c08:	014000c4 	movi	r5,3
 4003c0c:	003f9706 	br	4003a6c <__alt_data_end+0xfc003a6c>
 4003c10:	9009883a 	mov	r4,r18
 4003c14:	d9400015 	stw	r5,0(sp)
 4003c18:	40071d40 	call	40071d4 <__clzsi2>
 4003c1c:	10fffec4 	addi	r3,r2,-5
 4003c20:	11801d84 	addi	r6,r2,118
 4003c24:	90e4983a 	sll	r18,r18,r3
 4003c28:	01a9c83a 	sub	r20,zero,r6
 4003c2c:	0021883a 	mov	r16,zero
 4003c30:	002f883a 	mov	r23,zero
 4003c34:	d9400017 	ldw	r5,0(sp)
 4003c38:	003f7e06 	br	4003a34 <__alt_data_end+0xfc003a34>
 4003c3c:	04000304 	movi	r16,12
 4003c40:	05c000c4 	movi	r23,3
 4003c44:	003f7b06 	br	4003a34 <__alt_data_end+0xfc003a34>
 4003c48:	01802034 	movhi	r6,128
 4003c4c:	000f883a 	mov	r7,zero
 4003c50:	31bfffc4 	addi	r6,r6,-1
 4003c54:	013fffc4 	movi	r4,-1
 4003c58:	003fac06 	br	4003b0c <__alt_data_end+0xfc003b0c>
 4003c5c:	01400044 	movi	r5,1
 4003c60:	2909c83a 	sub	r4,r5,r4
 4003c64:	00c006c4 	movi	r3,27
 4003c68:	19004b0e 	bge	r3,r4,4003d98 <__divsf3+0x3cc>
 4003c6c:	114e703a 	and	r7,r2,r5
 4003c70:	0009883a 	mov	r4,zero
 4003c74:	000d883a 	mov	r6,zero
 4003c78:	003fa406 	br	4003b0c <__alt_data_end+0xfc003b0c>
 4003c7c:	9006917a 	slli	r3,r18,5
 4003c80:	8822917a 	slli	r17,r17,5
 4003c84:	1c40372e 	bgeu	r3,r17,4003d64 <__divsf3+0x398>
 4003c88:	31bfffc4 	addi	r6,r6,-1
 4003c8c:	010006c4 	movi	r4,27
 4003c90:	000b883a 	mov	r5,zero
 4003c94:	180f883a 	mov	r7,r3
 4003c98:	294b883a 	add	r5,r5,r5
 4003c9c:	18c7883a 	add	r3,r3,r3
 4003ca0:	38000116 	blt	r7,zero,4003ca8 <__divsf3+0x2dc>
 4003ca4:	1c400236 	bltu	r3,r17,4003cb0 <__divsf3+0x2e4>
 4003ca8:	1c47c83a 	sub	r3,r3,r17
 4003cac:	29400054 	ori	r5,r5,1
 4003cb0:	213fffc4 	addi	r4,r4,-1
 4003cb4:	203ff71e 	bne	r4,zero,4003c94 <__alt_data_end+0xfc003c94>
 4003cb8:	1806c03a 	cmpne	r3,r3,zero
 4003cbc:	1962b03a 	or	r17,r3,r5
 4003cc0:	31001fc4 	addi	r4,r6,127
 4003cc4:	013fe50e 	bge	zero,r4,4003c5c <__alt_data_end+0xfc003c5c>
 4003cc8:	88c001cc 	andi	r3,r17,7
 4003ccc:	18000426 	beq	r3,zero,4003ce0 <__divsf3+0x314>
 4003cd0:	88c003cc 	andi	r3,r17,15
 4003cd4:	01400104 	movi	r5,4
 4003cd8:	19400126 	beq	r3,r5,4003ce0 <__divsf3+0x314>
 4003cdc:	8963883a 	add	r17,r17,r5
 4003ce0:	88c2002c 	andhi	r3,r17,2048
 4003ce4:	18000426 	beq	r3,zero,4003cf8 <__divsf3+0x32c>
 4003ce8:	00fe0034 	movhi	r3,63488
 4003cec:	18ffffc4 	addi	r3,r3,-1
 4003cf0:	31002004 	addi	r4,r6,128
 4003cf4:	88e2703a 	and	r17,r17,r3
 4003cf8:	00c03f84 	movi	r3,254
 4003cfc:	193f8016 	blt	r3,r4,4003b00 <__alt_data_end+0xfc003b00>
 4003d00:	880c91ba 	slli	r6,r17,6
 4003d04:	11c0004c 	andi	r7,r2,1
 4003d08:	300cd27a 	srli	r6,r6,9
 4003d0c:	003f7f06 	br	4003b0c <__alt_data_end+0xfc003b0c>
 4003d10:	9080102c 	andhi	r2,r18,64
 4003d14:	10000226 	beq	r2,zero,4003d20 <__divsf3+0x354>
 4003d18:	8880102c 	andhi	r2,r17,64
 4003d1c:	10001826 	beq	r2,zero,4003d80 <__divsf3+0x3b4>
 4003d20:	00802034 	movhi	r2,128
 4003d24:	91801034 	orhi	r6,r18,64
 4003d28:	10bfffc4 	addi	r2,r2,-1
 4003d2c:	980f883a 	mov	r7,r19
 4003d30:	308c703a 	and	r6,r6,r2
 4003d34:	003fc706 	br	4003c54 <__alt_data_end+0xfc003c54>
 4003d38:	008000c4 	movi	r2,3
 4003d3c:	b8802d26 	beq	r23,r2,4003df4 <__divsf3+0x428>
 4003d40:	00c00044 	movi	r3,1
 4003d44:	b005883a 	mov	r2,r22
 4003d48:	b8ffdd1e 	bne	r23,r3,4003cc0 <__alt_data_end+0xfc003cc0>
 4003d4c:	11c0004c 	andi	r7,r2,1
 4003d50:	0009883a 	mov	r4,zero
 4003d54:	000d883a 	mov	r6,zero
 4003d58:	003f6c06 	br	4003b0c <__alt_data_end+0xfc003b0c>
 4003d5c:	9023883a 	mov	r17,r18
 4003d60:	003f6406 	br	4003af4 <__alt_data_end+0xfc003af4>
 4003d64:	1c47c83a 	sub	r3,r3,r17
 4003d68:	01000684 	movi	r4,26
 4003d6c:	01400044 	movi	r5,1
 4003d70:	003fc806 	br	4003c94 <__alt_data_end+0xfc003c94>
 4003d74:	9080102c 	andhi	r2,r18,64
 4003d78:	103fe926 	beq	r2,zero,4003d20 <__alt_data_end+0xfc003d20>
 4003d7c:	0023883a 	mov	r17,zero
 4003d80:	00802034 	movhi	r2,128
 4003d84:	89801034 	orhi	r6,r17,64
 4003d88:	10bfffc4 	addi	r2,r2,-1
 4003d8c:	a80f883a 	mov	r7,r21
 4003d90:	308c703a 	and	r6,r6,r2
 4003d94:	003faf06 	br	4003c54 <__alt_data_end+0xfc003c54>
 4003d98:	01c00804 	movi	r7,32
 4003d9c:	390fc83a 	sub	r7,r7,r4
 4003da0:	89ce983a 	sll	r7,r17,r7
 4003da4:	890ad83a 	srl	r5,r17,r4
 4003da8:	380ec03a 	cmpne	r7,r7,zero
 4003dac:	29cab03a 	or	r5,r5,r7
 4003db0:	28c001cc 	andi	r3,r5,7
 4003db4:	18000426 	beq	r3,zero,4003dc8 <__divsf3+0x3fc>
 4003db8:	28c003cc 	andi	r3,r5,15
 4003dbc:	01000104 	movi	r4,4
 4003dc0:	19000126 	beq	r3,r4,4003dc8 <__divsf3+0x3fc>
 4003dc4:	290b883a 	add	r5,r5,r4
 4003dc8:	28c1002c 	andhi	r3,r5,1024
 4003dcc:	18000426 	beq	r3,zero,4003de0 <__divsf3+0x414>
 4003dd0:	11c0004c 	andi	r7,r2,1
 4003dd4:	01000044 	movi	r4,1
 4003dd8:	000d883a 	mov	r6,zero
 4003ddc:	003f4b06 	br	4003b0c <__alt_data_end+0xfc003b0c>
 4003de0:	280a91ba 	slli	r5,r5,6
 4003de4:	11c0004c 	andi	r7,r2,1
 4003de8:	0009883a 	mov	r4,zero
 4003dec:	280cd27a 	srli	r6,r5,9
 4003df0:	003f4606 	br	4003b0c <__alt_data_end+0xfc003b0c>
 4003df4:	00802034 	movhi	r2,128
 4003df8:	89801034 	orhi	r6,r17,64
 4003dfc:	10bfffc4 	addi	r2,r2,-1
 4003e00:	b00f883a 	mov	r7,r22
 4003e04:	308c703a 	and	r6,r6,r2
 4003e08:	003f9206 	br	4003c54 <__alt_data_end+0xfc003c54>

04003e0c <__eqsf2>:
 4003e0c:	2006d5fa 	srli	r3,r4,23
 4003e10:	280cd5fa 	srli	r6,r5,23
 4003e14:	01c02034 	movhi	r7,128
 4003e18:	39ffffc4 	addi	r7,r7,-1
 4003e1c:	18c03fcc 	andi	r3,r3,255
 4003e20:	02003fc4 	movi	r8,255
 4003e24:	3904703a 	and	r2,r7,r4
 4003e28:	31803fcc 	andi	r6,r6,255
 4003e2c:	394e703a 	and	r7,r7,r5
 4003e30:	2008d7fa 	srli	r4,r4,31
 4003e34:	280ad7fa 	srli	r5,r5,31
 4003e38:	1a000d26 	beq	r3,r8,4003e70 <__eqsf2+0x64>
 4003e3c:	02003fc4 	movi	r8,255
 4003e40:	32000826 	beq	r6,r8,4003e64 <__eqsf2+0x58>
 4003e44:	19800226 	beq	r3,r6,4003e50 <__eqsf2+0x44>
 4003e48:	00800044 	movi	r2,1
 4003e4c:	f800283a 	ret
 4003e50:	11fffd1e 	bne	r2,r7,4003e48 <__alt_data_end+0xfc003e48>
 4003e54:	21400926 	beq	r4,r5,4003e7c <__eqsf2+0x70>
 4003e58:	183ffb1e 	bne	r3,zero,4003e48 <__alt_data_end+0xfc003e48>
 4003e5c:	1004c03a 	cmpne	r2,r2,zero
 4003e60:	f800283a 	ret
 4003e64:	383ff726 	beq	r7,zero,4003e44 <__alt_data_end+0xfc003e44>
 4003e68:	00800044 	movi	r2,1
 4003e6c:	f800283a 	ret
 4003e70:	103ff226 	beq	r2,zero,4003e3c <__alt_data_end+0xfc003e3c>
 4003e74:	00800044 	movi	r2,1
 4003e78:	f800283a 	ret
 4003e7c:	0005883a 	mov	r2,zero
 4003e80:	f800283a 	ret

04003e84 <__gesf2>:
 4003e84:	2004d5fa 	srli	r2,r4,23
 4003e88:	2806d5fa 	srli	r3,r5,23
 4003e8c:	01802034 	movhi	r6,128
 4003e90:	31bfffc4 	addi	r6,r6,-1
 4003e94:	10803fcc 	andi	r2,r2,255
 4003e98:	01c03fc4 	movi	r7,255
 4003e9c:	3110703a 	and	r8,r6,r4
 4003ea0:	18c03fcc 	andi	r3,r3,255
 4003ea4:	314c703a 	and	r6,r6,r5
 4003ea8:	2008d7fa 	srli	r4,r4,31
 4003eac:	280ad7fa 	srli	r5,r5,31
 4003eb0:	11c01926 	beq	r2,r7,4003f18 <__gesf2+0x94>
 4003eb4:	01c03fc4 	movi	r7,255
 4003eb8:	19c00f26 	beq	r3,r7,4003ef8 <__gesf2+0x74>
 4003ebc:	1000061e 	bne	r2,zero,4003ed8 <__gesf2+0x54>
 4003ec0:	400f003a 	cmpeq	r7,r8,zero
 4003ec4:	1800071e 	bne	r3,zero,4003ee4 <__gesf2+0x60>
 4003ec8:	3000061e 	bne	r6,zero,4003ee4 <__gesf2+0x60>
 4003ecc:	0005883a 	mov	r2,zero
 4003ed0:	40000e1e 	bne	r8,zero,4003f0c <__gesf2+0x88>
 4003ed4:	f800283a 	ret
 4003ed8:	18000a1e 	bne	r3,zero,4003f04 <__gesf2+0x80>
 4003edc:	30000b26 	beq	r6,zero,4003f0c <__gesf2+0x88>
 4003ee0:	000f883a 	mov	r7,zero
 4003ee4:	29403fcc 	andi	r5,r5,255
 4003ee8:	38000726 	beq	r7,zero,4003f08 <__gesf2+0x84>
 4003eec:	28000826 	beq	r5,zero,4003f10 <__gesf2+0x8c>
 4003ef0:	00800044 	movi	r2,1
 4003ef4:	f800283a 	ret
 4003ef8:	303ff026 	beq	r6,zero,4003ebc <__alt_data_end+0xfc003ebc>
 4003efc:	00bfff84 	movi	r2,-2
 4003f00:	f800283a 	ret
 4003f04:	29403fcc 	andi	r5,r5,255
 4003f08:	21400526 	beq	r4,r5,4003f20 <__gesf2+0x9c>
 4003f0c:	203ff826 	beq	r4,zero,4003ef0 <__alt_data_end+0xfc003ef0>
 4003f10:	00bfffc4 	movi	r2,-1
 4003f14:	f800283a 	ret
 4003f18:	403fe626 	beq	r8,zero,4003eb4 <__alt_data_end+0xfc003eb4>
 4003f1c:	003ff706 	br	4003efc <__alt_data_end+0xfc003efc>
 4003f20:	18bffa16 	blt	r3,r2,4003f0c <__alt_data_end+0xfc003f0c>
 4003f24:	10c00216 	blt	r2,r3,4003f30 <__gesf2+0xac>
 4003f28:	323ff836 	bltu	r6,r8,4003f0c <__alt_data_end+0xfc003f0c>
 4003f2c:	4180022e 	bgeu	r8,r6,4003f38 <__gesf2+0xb4>
 4003f30:	203fef1e 	bne	r4,zero,4003ef0 <__alt_data_end+0xfc003ef0>
 4003f34:	003ff606 	br	4003f10 <__alt_data_end+0xfc003f10>
 4003f38:	0005883a 	mov	r2,zero
 4003f3c:	f800283a 	ret

04003f40 <__lesf2>:
 4003f40:	2004d5fa 	srli	r2,r4,23
 4003f44:	280cd5fa 	srli	r6,r5,23
 4003f48:	00c02034 	movhi	r3,128
 4003f4c:	18ffffc4 	addi	r3,r3,-1
 4003f50:	10803fcc 	andi	r2,r2,255
 4003f54:	01c03fc4 	movi	r7,255
 4003f58:	1910703a 	and	r8,r3,r4
 4003f5c:	31803fcc 	andi	r6,r6,255
 4003f60:	1946703a 	and	r3,r3,r5
 4003f64:	2008d7fa 	srli	r4,r4,31
 4003f68:	280ad7fa 	srli	r5,r5,31
 4003f6c:	11c01b26 	beq	r2,r7,4003fdc <__lesf2+0x9c>
 4003f70:	01c03fc4 	movi	r7,255
 4003f74:	31c01126 	beq	r6,r7,4003fbc <__lesf2+0x7c>
 4003f78:	1000071e 	bne	r2,zero,4003f98 <__lesf2+0x58>
 4003f7c:	400f003a 	cmpeq	r7,r8,zero
 4003f80:	21003fcc 	andi	r4,r4,255
 4003f84:	3000081e 	bne	r6,zero,4003fa8 <__lesf2+0x68>
 4003f88:	1800071e 	bne	r3,zero,4003fa8 <__lesf2+0x68>
 4003f8c:	0005883a 	mov	r2,zero
 4003f90:	40000f1e 	bne	r8,zero,4003fd0 <__lesf2+0x90>
 4003f94:	f800283a 	ret
 4003f98:	21003fcc 	andi	r4,r4,255
 4003f9c:	30000a1e 	bne	r6,zero,4003fc8 <__lesf2+0x88>
 4003fa0:	18000b26 	beq	r3,zero,4003fd0 <__lesf2+0x90>
 4003fa4:	000f883a 	mov	r7,zero
 4003fa8:	29403fcc 	andi	r5,r5,255
 4003fac:	38000726 	beq	r7,zero,4003fcc <__lesf2+0x8c>
 4003fb0:	28000826 	beq	r5,zero,4003fd4 <__lesf2+0x94>
 4003fb4:	00800044 	movi	r2,1
 4003fb8:	f800283a 	ret
 4003fbc:	183fee26 	beq	r3,zero,4003f78 <__alt_data_end+0xfc003f78>
 4003fc0:	00800084 	movi	r2,2
 4003fc4:	f800283a 	ret
 4003fc8:	29403fcc 	andi	r5,r5,255
 4003fcc:	21400626 	beq	r4,r5,4003fe8 <__lesf2+0xa8>
 4003fd0:	203ff826 	beq	r4,zero,4003fb4 <__alt_data_end+0xfc003fb4>
 4003fd4:	00bfffc4 	movi	r2,-1
 4003fd8:	f800283a 	ret
 4003fdc:	403fe426 	beq	r8,zero,4003f70 <__alt_data_end+0xfc003f70>
 4003fe0:	00800084 	movi	r2,2
 4003fe4:	f800283a 	ret
 4003fe8:	30bff916 	blt	r6,r2,4003fd0 <__alt_data_end+0xfc003fd0>
 4003fec:	11800216 	blt	r2,r6,4003ff8 <__lesf2+0xb8>
 4003ff0:	1a3ff736 	bltu	r3,r8,4003fd0 <__alt_data_end+0xfc003fd0>
 4003ff4:	40c0022e 	bgeu	r8,r3,4004000 <__lesf2+0xc0>
 4003ff8:	203fee1e 	bne	r4,zero,4003fb4 <__alt_data_end+0xfc003fb4>
 4003ffc:	003ff506 	br	4003fd4 <__alt_data_end+0xfc003fd4>
 4004000:	0005883a 	mov	r2,zero
 4004004:	f800283a 	ret

04004008 <__mulsf3>:
 4004008:	defff504 	addi	sp,sp,-44
 400400c:	dc000115 	stw	r16,4(sp)
 4004010:	2020d5fa 	srli	r16,r4,23
 4004014:	dd400615 	stw	r21,24(sp)
 4004018:	202ad7fa 	srli	r21,r4,31
 400401c:	dc800315 	stw	r18,12(sp)
 4004020:	04802034 	movhi	r18,128
 4004024:	df000915 	stw	fp,36(sp)
 4004028:	dd000515 	stw	r20,20(sp)
 400402c:	94bfffc4 	addi	r18,r18,-1
 4004030:	dfc00a15 	stw	ra,40(sp)
 4004034:	ddc00815 	stw	r23,32(sp)
 4004038:	dd800715 	stw	r22,28(sp)
 400403c:	dcc00415 	stw	r19,16(sp)
 4004040:	dc400215 	stw	r17,8(sp)
 4004044:	84003fcc 	andi	r16,r16,255
 4004048:	9124703a 	and	r18,r18,r4
 400404c:	a829883a 	mov	r20,r21
 4004050:	af003fcc 	andi	fp,r21,255
 4004054:	80005426 	beq	r16,zero,40041a8 <__mulsf3+0x1a0>
 4004058:	00803fc4 	movi	r2,255
 400405c:	80802f26 	beq	r16,r2,400411c <__mulsf3+0x114>
 4004060:	91002034 	orhi	r4,r18,128
 4004064:	202490fa 	slli	r18,r4,3
 4004068:	843fe044 	addi	r16,r16,-127
 400406c:	0023883a 	mov	r17,zero
 4004070:	002f883a 	mov	r23,zero
 4004074:	2804d5fa 	srli	r2,r5,23
 4004078:	282cd7fa 	srli	r22,r5,31
 400407c:	01002034 	movhi	r4,128
 4004080:	213fffc4 	addi	r4,r4,-1
 4004084:	10803fcc 	andi	r2,r2,255
 4004088:	2166703a 	and	r19,r4,r5
 400408c:	b1803fcc 	andi	r6,r22,255
 4004090:	10004c26 	beq	r2,zero,40041c4 <__mulsf3+0x1bc>
 4004094:	00c03fc4 	movi	r3,255
 4004098:	10c04726 	beq	r2,r3,40041b8 <__mulsf3+0x1b0>
 400409c:	99002034 	orhi	r4,r19,128
 40040a0:	202690fa 	slli	r19,r4,3
 40040a4:	10bfe044 	addi	r2,r2,-127
 40040a8:	0007883a 	mov	r3,zero
 40040ac:	80a1883a 	add	r16,r16,r2
 40040b0:	010003c4 	movi	r4,15
 40040b4:	1c44b03a 	or	r2,r3,r17
 40040b8:	b56af03a 	xor	r21,r22,r21
 40040bc:	81c00044 	addi	r7,r16,1
 40040c0:	20806b36 	bltu	r4,r2,4004270 <__mulsf3+0x268>
 40040c4:	100490ba 	slli	r2,r2,2
 40040c8:	01010034 	movhi	r4,1024
 40040cc:	21103704 	addi	r4,r4,16604
 40040d0:	1105883a 	add	r2,r2,r4
 40040d4:	10800017 	ldw	r2,0(r2)
 40040d8:	1000683a 	jmp	r2
 40040dc:	04004270 	cmpltui	r16,zero,265
 40040e0:	04004130 	cmpltui	r16,zero,260
 40040e4:	04004130 	cmpltui	r16,zero,260
 40040e8:	0400412c 	andhi	r16,zero,260
 40040ec:	04004254 	movui	r16,265
 40040f0:	04004254 	movui	r16,265
 40040f4:	04004240 	call	400424 <__reset-0x3bffbdc>
 40040f8:	0400412c 	andhi	r16,zero,260
 40040fc:	04004254 	movui	r16,265
 4004100:	04004240 	call	400424 <__reset-0x3bffbdc>
 4004104:	04004254 	movui	r16,265
 4004108:	0400412c 	andhi	r16,zero,260
 400410c:	04004260 	cmpeqi	r16,zero,265
 4004110:	04004260 	cmpeqi	r16,zero,265
 4004114:	04004260 	cmpeqi	r16,zero,265
 4004118:	04004370 	cmpltui	r16,zero,269
 400411c:	90003b1e 	bne	r18,zero,400420c <__mulsf3+0x204>
 4004120:	04400204 	movi	r17,8
 4004124:	05c00084 	movi	r23,2
 4004128:	003fd206 	br	4004074 <__alt_data_end+0xfc004074>
 400412c:	302b883a 	mov	r21,r6
 4004130:	00800084 	movi	r2,2
 4004134:	18802626 	beq	r3,r2,40041d0 <__mulsf3+0x1c8>
 4004138:	008000c4 	movi	r2,3
 400413c:	1880b826 	beq	r3,r2,4004420 <__mulsf3+0x418>
 4004140:	00800044 	movi	r2,1
 4004144:	1880af1e 	bne	r3,r2,4004404 <__mulsf3+0x3fc>
 4004148:	a829883a 	mov	r20,r21
 400414c:	0007883a 	mov	r3,zero
 4004150:	0009883a 	mov	r4,zero
 4004154:	18803fcc 	andi	r2,r3,255
 4004158:	100695fa 	slli	r3,r2,23
 400415c:	a0803fcc 	andi	r2,r20,255
 4004160:	100a97fa 	slli	r5,r2,31
 4004164:	00802034 	movhi	r2,128
 4004168:	10bfffc4 	addi	r2,r2,-1
 400416c:	2084703a 	and	r2,r4,r2
 4004170:	10c4b03a 	or	r2,r2,r3
 4004174:	1144b03a 	or	r2,r2,r5
 4004178:	dfc00a17 	ldw	ra,40(sp)
 400417c:	df000917 	ldw	fp,36(sp)
 4004180:	ddc00817 	ldw	r23,32(sp)
 4004184:	dd800717 	ldw	r22,28(sp)
 4004188:	dd400617 	ldw	r21,24(sp)
 400418c:	dd000517 	ldw	r20,20(sp)
 4004190:	dcc00417 	ldw	r19,16(sp)
 4004194:	dc800317 	ldw	r18,12(sp)
 4004198:	dc400217 	ldw	r17,8(sp)
 400419c:	dc000117 	ldw	r16,4(sp)
 40041a0:	dec00b04 	addi	sp,sp,44
 40041a4:	f800283a 	ret
 40041a8:	90000d1e 	bne	r18,zero,40041e0 <__mulsf3+0x1d8>
 40041ac:	04400104 	movi	r17,4
 40041b0:	05c00044 	movi	r23,1
 40041b4:	003faf06 	br	4004074 <__alt_data_end+0xfc004074>
 40041b8:	9806c03a 	cmpne	r3,r19,zero
 40041bc:	18c00084 	addi	r3,r3,2
 40041c0:	003fba06 	br	40040ac <__alt_data_end+0xfc0040ac>
 40041c4:	9800141e 	bne	r19,zero,4004218 <__mulsf3+0x210>
 40041c8:	00c00044 	movi	r3,1
 40041cc:	003fb706 	br	40040ac <__alt_data_end+0xfc0040ac>
 40041d0:	a829883a 	mov	r20,r21
 40041d4:	00ffffc4 	movi	r3,-1
 40041d8:	0009883a 	mov	r4,zero
 40041dc:	003fdd06 	br	4004154 <__alt_data_end+0xfc004154>
 40041e0:	9009883a 	mov	r4,r18
 40041e4:	d9400015 	stw	r5,0(sp)
 40041e8:	40071d40 	call	40071d4 <__clzsi2>
 40041ec:	10fffec4 	addi	r3,r2,-5
 40041f0:	10801d84 	addi	r2,r2,118
 40041f4:	90e4983a 	sll	r18,r18,r3
 40041f8:	00a1c83a 	sub	r16,zero,r2
 40041fc:	0023883a 	mov	r17,zero
 4004200:	002f883a 	mov	r23,zero
 4004204:	d9400017 	ldw	r5,0(sp)
 4004208:	003f9a06 	br	4004074 <__alt_data_end+0xfc004074>
 400420c:	04400304 	movi	r17,12
 4004210:	05c000c4 	movi	r23,3
 4004214:	003f9706 	br	4004074 <__alt_data_end+0xfc004074>
 4004218:	9809883a 	mov	r4,r19
 400421c:	d9800015 	stw	r6,0(sp)
 4004220:	40071d40 	call	40071d4 <__clzsi2>
 4004224:	10fffec4 	addi	r3,r2,-5
 4004228:	10801d84 	addi	r2,r2,118
 400422c:	98e6983a 	sll	r19,r19,r3
 4004230:	0085c83a 	sub	r2,zero,r2
 4004234:	0007883a 	mov	r3,zero
 4004238:	d9800017 	ldw	r6,0(sp)
 400423c:	003f9b06 	br	40040ac <__alt_data_end+0xfc0040ac>
 4004240:	01002034 	movhi	r4,128
 4004244:	0029883a 	mov	r20,zero
 4004248:	213fffc4 	addi	r4,r4,-1
 400424c:	00ffffc4 	movi	r3,-1
 4004250:	003fc006 	br	4004154 <__alt_data_end+0xfc004154>
 4004254:	9027883a 	mov	r19,r18
 4004258:	b807883a 	mov	r3,r23
 400425c:	003fb406 	br	4004130 <__alt_data_end+0xfc004130>
 4004260:	9027883a 	mov	r19,r18
 4004264:	e02b883a 	mov	r21,fp
 4004268:	b807883a 	mov	r3,r23
 400426c:	003fb006 	br	4004130 <__alt_data_end+0xfc004130>
 4004270:	9028d43a 	srli	r20,r18,16
 4004274:	982cd43a 	srli	r22,r19,16
 4004278:	94bfffcc 	andi	r18,r18,65535
 400427c:	9cffffcc 	andi	r19,r19,65535
 4004280:	980b883a 	mov	r5,r19
 4004284:	9009883a 	mov	r4,r18
 4004288:	d9c00015 	stw	r7,0(sp)
 400428c:	40073ec0 	call	40073ec <__mulsi3>
 4004290:	a00b883a 	mov	r5,r20
 4004294:	9809883a 	mov	r4,r19
 4004298:	1023883a 	mov	r17,r2
 400429c:	40073ec0 	call	40073ec <__mulsi3>
 40042a0:	a009883a 	mov	r4,r20
 40042a4:	b00b883a 	mov	r5,r22
 40042a8:	1027883a 	mov	r19,r2
 40042ac:	40073ec0 	call	40073ec <__mulsi3>
 40042b0:	b00b883a 	mov	r5,r22
 40042b4:	9009883a 	mov	r4,r18
 40042b8:	1029883a 	mov	r20,r2
 40042bc:	40073ec0 	call	40073ec <__mulsi3>
 40042c0:	8806d43a 	srli	r3,r17,16
 40042c4:	14c5883a 	add	r2,r2,r19
 40042c8:	d9c00017 	ldw	r7,0(sp)
 40042cc:	1885883a 	add	r2,r3,r2
 40042d0:	14c0022e 	bgeu	r2,r19,40042dc <__mulsf3+0x2d4>
 40042d4:	00c00074 	movhi	r3,1
 40042d8:	a0e9883a 	add	r20,r20,r3
 40042dc:	1026943a 	slli	r19,r2,16
 40042e0:	8c7fffcc 	andi	r17,r17,65535
 40042e4:	1004d43a 	srli	r2,r2,16
 40042e8:	9c63883a 	add	r17,r19,r17
 40042ec:	882691ba 	slli	r19,r17,6
 40042f0:	1505883a 	add	r2,r2,r20
 40042f4:	8822d6ba 	srli	r17,r17,26
 40042f8:	100891ba 	slli	r4,r2,6
 40042fc:	9826c03a 	cmpne	r19,r19,zero
 4004300:	9c62b03a 	or	r17,r19,r17
 4004304:	8926b03a 	or	r19,r17,r4
 4004308:	9882002c 	andhi	r2,r19,2048
 400430c:	10000426 	beq	r2,zero,4004320 <__mulsf3+0x318>
 4004310:	9804d07a 	srli	r2,r19,1
 4004314:	9900004c 	andi	r4,r19,1
 4004318:	3821883a 	mov	r16,r7
 400431c:	1126b03a 	or	r19,r2,r4
 4004320:	80c01fc4 	addi	r3,r16,127
 4004324:	00c0210e 	bge	zero,r3,40043ac <__mulsf3+0x3a4>
 4004328:	988001cc 	andi	r2,r19,7
 400432c:	10000426 	beq	r2,zero,4004340 <__mulsf3+0x338>
 4004330:	988003cc 	andi	r2,r19,15
 4004334:	01000104 	movi	r4,4
 4004338:	11000126 	beq	r2,r4,4004340 <__mulsf3+0x338>
 400433c:	9927883a 	add	r19,r19,r4
 4004340:	9882002c 	andhi	r2,r19,2048
 4004344:	10000426 	beq	r2,zero,4004358 <__mulsf3+0x350>
 4004348:	00be0034 	movhi	r2,63488
 400434c:	10bfffc4 	addi	r2,r2,-1
 4004350:	80c02004 	addi	r3,r16,128
 4004354:	98a6703a 	and	r19,r19,r2
 4004358:	00803f84 	movi	r2,254
 400435c:	10ff9c16 	blt	r2,r3,40041d0 <__alt_data_end+0xfc0041d0>
 4004360:	980891ba 	slli	r4,r19,6
 4004364:	a829883a 	mov	r20,r21
 4004368:	2008d27a 	srli	r4,r4,9
 400436c:	003f7906 	br	4004154 <__alt_data_end+0xfc004154>
 4004370:	9080102c 	andhi	r2,r18,64
 4004374:	10000826 	beq	r2,zero,4004398 <__mulsf3+0x390>
 4004378:	9880102c 	andhi	r2,r19,64
 400437c:	1000061e 	bne	r2,zero,4004398 <__mulsf3+0x390>
 4004380:	00802034 	movhi	r2,128
 4004384:	99001034 	orhi	r4,r19,64
 4004388:	10bfffc4 	addi	r2,r2,-1
 400438c:	b029883a 	mov	r20,r22
 4004390:	2088703a 	and	r4,r4,r2
 4004394:	003fad06 	br	400424c <__alt_data_end+0xfc00424c>
 4004398:	00802034 	movhi	r2,128
 400439c:	91001034 	orhi	r4,r18,64
 40043a0:	10bfffc4 	addi	r2,r2,-1
 40043a4:	2088703a 	and	r4,r4,r2
 40043a8:	003fa806 	br	400424c <__alt_data_end+0xfc00424c>
 40043ac:	00800044 	movi	r2,1
 40043b0:	10c7c83a 	sub	r3,r2,r3
 40043b4:	008006c4 	movi	r2,27
 40043b8:	10ff6316 	blt	r2,r3,4004148 <__alt_data_end+0xfc004148>
 40043bc:	00800804 	movi	r2,32
 40043c0:	10c5c83a 	sub	r2,r2,r3
 40043c4:	9884983a 	sll	r2,r19,r2
 40043c8:	98c6d83a 	srl	r3,r19,r3
 40043cc:	1004c03a 	cmpne	r2,r2,zero
 40043d0:	1884b03a 	or	r2,r3,r2
 40043d4:	10c001cc 	andi	r3,r2,7
 40043d8:	18000426 	beq	r3,zero,40043ec <__mulsf3+0x3e4>
 40043dc:	10c003cc 	andi	r3,r2,15
 40043e0:	01000104 	movi	r4,4
 40043e4:	19000126 	beq	r3,r4,40043ec <__mulsf3+0x3e4>
 40043e8:	1105883a 	add	r2,r2,r4
 40043ec:	10c1002c 	andhi	r3,r2,1024
 40043f0:	18000626 	beq	r3,zero,400440c <__mulsf3+0x404>
 40043f4:	a829883a 	mov	r20,r21
 40043f8:	00c00044 	movi	r3,1
 40043fc:	0009883a 	mov	r4,zero
 4004400:	003f5406 	br	4004154 <__alt_data_end+0xfc004154>
 4004404:	3821883a 	mov	r16,r7
 4004408:	003fc506 	br	4004320 <__alt_data_end+0xfc004320>
 400440c:	100491ba 	slli	r2,r2,6
 4004410:	a829883a 	mov	r20,r21
 4004414:	0007883a 	mov	r3,zero
 4004418:	1008d27a 	srli	r4,r2,9
 400441c:	003f4d06 	br	4004154 <__alt_data_end+0xfc004154>
 4004420:	00802034 	movhi	r2,128
 4004424:	99001034 	orhi	r4,r19,64
 4004428:	10bfffc4 	addi	r2,r2,-1
 400442c:	a829883a 	mov	r20,r21
 4004430:	2088703a 	and	r4,r4,r2
 4004434:	003f8506 	br	400424c <__alt_data_end+0xfc00424c>

04004438 <__subsf3>:
 4004438:	defffc04 	addi	sp,sp,-16
 400443c:	280cd5fa 	srli	r6,r5,23
 4004440:	dc000015 	stw	r16,0(sp)
 4004444:	01c02034 	movhi	r7,128
 4004448:	2020d5fa 	srli	r16,r4,23
 400444c:	39ffffc4 	addi	r7,r7,-1
 4004450:	3906703a 	and	r3,r7,r4
 4004454:	dc400115 	stw	r17,4(sp)
 4004458:	394e703a 	and	r7,r7,r5
 400445c:	2022d7fa 	srli	r17,r4,31
 4004460:	dfc00315 	stw	ra,12(sp)
 4004464:	dc800215 	stw	r18,8(sp)
 4004468:	31803fcc 	andi	r6,r6,255
 400446c:	01003fc4 	movi	r4,255
 4004470:	84003fcc 	andi	r16,r16,255
 4004474:	180690fa 	slli	r3,r3,3
 4004478:	2804d7fa 	srli	r2,r5,31
 400447c:	380e90fa 	slli	r7,r7,3
 4004480:	31006d26 	beq	r6,r4,4004638 <__subsf3+0x200>
 4004484:	1080005c 	xori	r2,r2,1
 4004488:	8189c83a 	sub	r4,r16,r6
 400448c:	14404f26 	beq	r2,r17,40045cc <__subsf3+0x194>
 4004490:	0100770e 	bge	zero,r4,4004670 <__subsf3+0x238>
 4004494:	30001e1e 	bne	r6,zero,4004510 <__subsf3+0xd8>
 4004498:	38006a1e 	bne	r7,zero,4004644 <__subsf3+0x20c>
 400449c:	188001cc 	andi	r2,r3,7
 40044a0:	10000426 	beq	r2,zero,40044b4 <__subsf3+0x7c>
 40044a4:	188003cc 	andi	r2,r3,15
 40044a8:	01000104 	movi	r4,4
 40044ac:	11000126 	beq	r2,r4,40044b4 <__subsf3+0x7c>
 40044b0:	1907883a 	add	r3,r3,r4
 40044b4:	1881002c 	andhi	r2,r3,1024
 40044b8:	10003926 	beq	r2,zero,40045a0 <__subsf3+0x168>
 40044bc:	84000044 	addi	r16,r16,1
 40044c0:	00803fc4 	movi	r2,255
 40044c4:	80807526 	beq	r16,r2,400469c <__subsf3+0x264>
 40044c8:	180691ba 	slli	r3,r3,6
 40044cc:	8880004c 	andi	r2,r17,1
 40044d0:	180ad27a 	srli	r5,r3,9
 40044d4:	84003fcc 	andi	r16,r16,255
 40044d8:	800695fa 	slli	r3,r16,23
 40044dc:	10803fcc 	andi	r2,r2,255
 40044e0:	01002034 	movhi	r4,128
 40044e4:	213fffc4 	addi	r4,r4,-1
 40044e8:	100497fa 	slli	r2,r2,31
 40044ec:	2920703a 	and	r16,r5,r4
 40044f0:	80e0b03a 	or	r16,r16,r3
 40044f4:	8084b03a 	or	r2,r16,r2
 40044f8:	dfc00317 	ldw	ra,12(sp)
 40044fc:	dc800217 	ldw	r18,8(sp)
 4004500:	dc400117 	ldw	r17,4(sp)
 4004504:	dc000017 	ldw	r16,0(sp)
 4004508:	dec00404 	addi	sp,sp,16
 400450c:	f800283a 	ret
 4004510:	00803fc4 	movi	r2,255
 4004514:	80bfe126 	beq	r16,r2,400449c <__alt_data_end+0xfc00449c>
 4004518:	39c10034 	orhi	r7,r7,1024
 400451c:	008006c4 	movi	r2,27
 4004520:	11007416 	blt	r2,r4,40046f4 <__subsf3+0x2bc>
 4004524:	00800804 	movi	r2,32
 4004528:	1105c83a 	sub	r2,r2,r4
 400452c:	3884983a 	sll	r2,r7,r2
 4004530:	390ed83a 	srl	r7,r7,r4
 4004534:	1008c03a 	cmpne	r4,r2,zero
 4004538:	390eb03a 	or	r7,r7,r4
 400453c:	19c7c83a 	sub	r3,r3,r7
 4004540:	1881002c 	andhi	r2,r3,1024
 4004544:	10001426 	beq	r2,zero,4004598 <__subsf3+0x160>
 4004548:	04810034 	movhi	r18,1024
 400454c:	94bfffc4 	addi	r18,r18,-1
 4004550:	1ca4703a 	and	r18,r3,r18
 4004554:	9009883a 	mov	r4,r18
 4004558:	40071d40 	call	40071d4 <__clzsi2>
 400455c:	10bffec4 	addi	r2,r2,-5
 4004560:	90a4983a 	sll	r18,r18,r2
 4004564:	14005116 	blt	r2,r16,40046ac <__subsf3+0x274>
 4004568:	1405c83a 	sub	r2,r2,r16
 400456c:	10c00044 	addi	r3,r2,1
 4004570:	00800804 	movi	r2,32
 4004574:	10c5c83a 	sub	r2,r2,r3
 4004578:	9084983a 	sll	r2,r18,r2
 400457c:	90e4d83a 	srl	r18,r18,r3
 4004580:	0021883a 	mov	r16,zero
 4004584:	1006c03a 	cmpne	r3,r2,zero
 4004588:	90c6b03a 	or	r3,r18,r3
 400458c:	003fc306 	br	400449c <__alt_data_end+0xfc00449c>
 4004590:	2000e026 	beq	r4,zero,4004914 <__subsf3+0x4dc>
 4004594:	2007883a 	mov	r3,r4
 4004598:	188001cc 	andi	r2,r3,7
 400459c:	103fc11e 	bne	r2,zero,40044a4 <__alt_data_end+0xfc0044a4>
 40045a0:	180ad0fa 	srli	r5,r3,3
 40045a4:	00c03fc4 	movi	r3,255
 40045a8:	8880004c 	andi	r2,r17,1
 40045ac:	80c0031e 	bne	r16,r3,40045bc <__subsf3+0x184>
 40045b0:	28006d26 	beq	r5,zero,4004768 <__subsf3+0x330>
 40045b4:	29401034 	orhi	r5,r5,64
 40045b8:	043fffc4 	movi	r16,-1
 40045bc:	00c02034 	movhi	r3,128
 40045c0:	18ffffc4 	addi	r3,r3,-1
 40045c4:	28ca703a 	and	r5,r5,r3
 40045c8:	003fc206 	br	40044d4 <__alt_data_end+0xfc0044d4>
 40045cc:	01003c0e 	bge	zero,r4,40046c0 <__subsf3+0x288>
 40045d0:	30002126 	beq	r6,zero,4004658 <__subsf3+0x220>
 40045d4:	01403fc4 	movi	r5,255
 40045d8:	817fb026 	beq	r16,r5,400449c <__alt_data_end+0xfc00449c>
 40045dc:	39c10034 	orhi	r7,r7,1024
 40045e0:	014006c4 	movi	r5,27
 40045e4:	29007416 	blt	r5,r4,40047b8 <__subsf3+0x380>
 40045e8:	01400804 	movi	r5,32
 40045ec:	290bc83a 	sub	r5,r5,r4
 40045f0:	394a983a 	sll	r5,r7,r5
 40045f4:	390ed83a 	srl	r7,r7,r4
 40045f8:	2808c03a 	cmpne	r4,r5,zero
 40045fc:	390eb03a 	or	r7,r7,r4
 4004600:	19c7883a 	add	r3,r3,r7
 4004604:	1901002c 	andhi	r4,r3,1024
 4004608:	20003826 	beq	r4,zero,40046ec <__subsf3+0x2b4>
 400460c:	84000044 	addi	r16,r16,1
 4004610:	01003fc4 	movi	r4,255
 4004614:	81005426 	beq	r16,r4,4004768 <__subsf3+0x330>
 4004618:	1023883a 	mov	r17,r2
 400461c:	00bf0034 	movhi	r2,64512
 4004620:	10bfffc4 	addi	r2,r2,-1
 4004624:	1900004c 	andi	r4,r3,1
 4004628:	1886703a 	and	r3,r3,r2
 400462c:	1806d07a 	srli	r3,r3,1
 4004630:	1906b03a 	or	r3,r3,r4
 4004634:	003f9906 	br	400449c <__alt_data_end+0xfc00449c>
 4004638:	383f9226 	beq	r7,zero,4004484 <__alt_data_end+0xfc004484>
 400463c:	10803fcc 	andi	r2,r2,255
 4004640:	003f9106 	br	4004488 <__alt_data_end+0xfc004488>
 4004644:	213fffc4 	addi	r4,r4,-1
 4004648:	203fbc26 	beq	r4,zero,400453c <__alt_data_end+0xfc00453c>
 400464c:	00803fc4 	movi	r2,255
 4004650:	80bfb21e 	bne	r16,r2,400451c <__alt_data_end+0xfc00451c>
 4004654:	003f9106 	br	400449c <__alt_data_end+0xfc00449c>
 4004658:	383f9026 	beq	r7,zero,400449c <__alt_data_end+0xfc00449c>
 400465c:	213fffc4 	addi	r4,r4,-1
 4004660:	203fe726 	beq	r4,zero,4004600 <__alt_data_end+0xfc004600>
 4004664:	01403fc4 	movi	r5,255
 4004668:	817fdd1e 	bne	r16,r5,40045e0 <__alt_data_end+0xfc0045e0>
 400466c:	003f8b06 	br	400449c <__alt_data_end+0xfc00449c>
 4004670:	2000221e 	bne	r4,zero,40046fc <__subsf3+0x2c4>
 4004674:	81000044 	addi	r4,r16,1
 4004678:	21003fcc 	andi	r4,r4,255
 400467c:	01400044 	movi	r5,1
 4004680:	2900470e 	bge	r5,r4,40047a0 <__subsf3+0x368>
 4004684:	19e5c83a 	sub	r18,r3,r7
 4004688:	9141002c 	andhi	r5,r18,1024
 400468c:	28002d26 	beq	r5,zero,4004744 <__subsf3+0x30c>
 4004690:	38e5c83a 	sub	r18,r7,r3
 4004694:	1023883a 	mov	r17,r2
 4004698:	003fae06 	br	4004554 <__alt_data_end+0xfc004554>
 400469c:	8880004c 	andi	r2,r17,1
 40046a0:	043fffc4 	movi	r16,-1
 40046a4:	000b883a 	mov	r5,zero
 40046a8:	003f8a06 	br	40044d4 <__alt_data_end+0xfc0044d4>
 40046ac:	00ff0034 	movhi	r3,64512
 40046b0:	18ffffc4 	addi	r3,r3,-1
 40046b4:	80a1c83a 	sub	r16,r16,r2
 40046b8:	90c6703a 	and	r3,r18,r3
 40046bc:	003f7706 	br	400449c <__alt_data_end+0xfc00449c>
 40046c0:	2000431e 	bne	r4,zero,40047d0 <__subsf3+0x398>
 40046c4:	81000044 	addi	r4,r16,1
 40046c8:	21803fcc 	andi	r6,r4,255
 40046cc:	01400044 	movi	r5,1
 40046d0:	2980280e 	bge	r5,r6,4004774 <__subsf3+0x33c>
 40046d4:	01403fc4 	movi	r5,255
 40046d8:	21402326 	beq	r4,r5,4004768 <__subsf3+0x330>
 40046dc:	19c7883a 	add	r3,r3,r7
 40046e0:	1806d07a 	srli	r3,r3,1
 40046e4:	2021883a 	mov	r16,r4
 40046e8:	003f6c06 	br	400449c <__alt_data_end+0xfc00449c>
 40046ec:	1023883a 	mov	r17,r2
 40046f0:	003fa906 	br	4004598 <__alt_data_end+0xfc004598>
 40046f4:	01c00044 	movi	r7,1
 40046f8:	003f9006 	br	400453c <__alt_data_end+0xfc00453c>
 40046fc:	8000151e 	bne	r16,zero,4004754 <__subsf3+0x31c>
 4004700:	18002f26 	beq	r3,zero,40047c0 <__subsf3+0x388>
 4004704:	0108303a 	nor	r4,zero,r4
 4004708:	20000a26 	beq	r4,zero,4004734 <__subsf3+0x2fc>
 400470c:	01403fc4 	movi	r5,255
 4004710:	31402b26 	beq	r6,r5,40047c0 <__subsf3+0x388>
 4004714:	014006c4 	movi	r5,27
 4004718:	29006e16 	blt	r5,r4,40048d4 <__subsf3+0x49c>
 400471c:	01400804 	movi	r5,32
 4004720:	290bc83a 	sub	r5,r5,r4
 4004724:	194a983a 	sll	r5,r3,r5
 4004728:	1908d83a 	srl	r4,r3,r4
 400472c:	2806c03a 	cmpne	r3,r5,zero
 4004730:	20c6b03a 	or	r3,r4,r3
 4004734:	38c7c83a 	sub	r3,r7,r3
 4004738:	3021883a 	mov	r16,r6
 400473c:	1023883a 	mov	r17,r2
 4004740:	003f7f06 	br	4004540 <__alt_data_end+0xfc004540>
 4004744:	903f831e 	bne	r18,zero,4004554 <__alt_data_end+0xfc004554>
 4004748:	0005883a 	mov	r2,zero
 400474c:	0021883a 	mov	r16,zero
 4004750:	003f9a06 	br	40045bc <__alt_data_end+0xfc0045bc>
 4004754:	01403fc4 	movi	r5,255
 4004758:	31401926 	beq	r6,r5,40047c0 <__subsf3+0x388>
 400475c:	0109c83a 	sub	r4,zero,r4
 4004760:	18c10034 	orhi	r3,r3,1024
 4004764:	003feb06 	br	4004714 <__alt_data_end+0xfc004714>
 4004768:	043fffc4 	movi	r16,-1
 400476c:	000b883a 	mov	r5,zero
 4004770:	003f5806 	br	40044d4 <__alt_data_end+0xfc0044d4>
 4004774:	8000481e 	bne	r16,zero,4004898 <__subsf3+0x460>
 4004778:	18006226 	beq	r3,zero,4004904 <__subsf3+0x4cc>
 400477c:	383f4726 	beq	r7,zero,400449c <__alt_data_end+0xfc00449c>
 4004780:	19c7883a 	add	r3,r3,r7
 4004784:	1881002c 	andhi	r2,r3,1024
 4004788:	103f8326 	beq	r2,zero,4004598 <__alt_data_end+0xfc004598>
 400478c:	00bf0034 	movhi	r2,64512
 4004790:	10bfffc4 	addi	r2,r2,-1
 4004794:	2821883a 	mov	r16,r5
 4004798:	1886703a 	and	r3,r3,r2
 400479c:	003f3f06 	br	400449c <__alt_data_end+0xfc00449c>
 40047a0:	80001c1e 	bne	r16,zero,4004814 <__subsf3+0x3dc>
 40047a4:	1800261e 	bne	r3,zero,4004840 <__subsf3+0x408>
 40047a8:	38004c26 	beq	r7,zero,40048dc <__subsf3+0x4a4>
 40047ac:	3807883a 	mov	r3,r7
 40047b0:	1023883a 	mov	r17,r2
 40047b4:	003f3906 	br	400449c <__alt_data_end+0xfc00449c>
 40047b8:	01c00044 	movi	r7,1
 40047bc:	003f9006 	br	4004600 <__alt_data_end+0xfc004600>
 40047c0:	3807883a 	mov	r3,r7
 40047c4:	3021883a 	mov	r16,r6
 40047c8:	1023883a 	mov	r17,r2
 40047cc:	003f3306 	br	400449c <__alt_data_end+0xfc00449c>
 40047d0:	8000161e 	bne	r16,zero,400482c <__subsf3+0x3f4>
 40047d4:	18002d26 	beq	r3,zero,400488c <__subsf3+0x454>
 40047d8:	0108303a 	nor	r4,zero,r4
 40047dc:	20000a26 	beq	r4,zero,4004808 <__subsf3+0x3d0>
 40047e0:	01403fc4 	movi	r5,255
 40047e4:	31402926 	beq	r6,r5,400488c <__subsf3+0x454>
 40047e8:	014006c4 	movi	r5,27
 40047ec:	29004716 	blt	r5,r4,400490c <__subsf3+0x4d4>
 40047f0:	01400804 	movi	r5,32
 40047f4:	290bc83a 	sub	r5,r5,r4
 40047f8:	194a983a 	sll	r5,r3,r5
 40047fc:	1908d83a 	srl	r4,r3,r4
 4004800:	2806c03a 	cmpne	r3,r5,zero
 4004804:	20c6b03a 	or	r3,r4,r3
 4004808:	19c7883a 	add	r3,r3,r7
 400480c:	3021883a 	mov	r16,r6
 4004810:	003f7c06 	br	4004604 <__alt_data_end+0xfc004604>
 4004814:	1800111e 	bne	r3,zero,400485c <__subsf3+0x424>
 4004818:	38003326 	beq	r7,zero,40048e8 <__subsf3+0x4b0>
 400481c:	3807883a 	mov	r3,r7
 4004820:	1023883a 	mov	r17,r2
 4004824:	04003fc4 	movi	r16,255
 4004828:	003f1c06 	br	400449c <__alt_data_end+0xfc00449c>
 400482c:	01403fc4 	movi	r5,255
 4004830:	31401626 	beq	r6,r5,400488c <__subsf3+0x454>
 4004834:	0109c83a 	sub	r4,zero,r4
 4004838:	18c10034 	orhi	r3,r3,1024
 400483c:	003fea06 	br	40047e8 <__alt_data_end+0xfc0047e8>
 4004840:	383f1626 	beq	r7,zero,400449c <__alt_data_end+0xfc00449c>
 4004844:	19c9c83a 	sub	r4,r3,r7
 4004848:	2141002c 	andhi	r5,r4,1024
 400484c:	283f5026 	beq	r5,zero,4004590 <__alt_data_end+0xfc004590>
 4004850:	38c7c83a 	sub	r3,r7,r3
 4004854:	1023883a 	mov	r17,r2
 4004858:	003f1006 	br	400449c <__alt_data_end+0xfc00449c>
 400485c:	38001b26 	beq	r7,zero,40048cc <__subsf3+0x494>
 4004860:	1806d0fa 	srli	r3,r3,3
 4004864:	1900102c 	andhi	r4,r3,64
 4004868:	20000526 	beq	r4,zero,4004880 <__subsf3+0x448>
 400486c:	380ed0fa 	srli	r7,r7,3
 4004870:	3900102c 	andhi	r4,r7,64
 4004874:	2000021e 	bne	r4,zero,4004880 <__subsf3+0x448>
 4004878:	3807883a 	mov	r3,r7
 400487c:	1023883a 	mov	r17,r2
 4004880:	180690fa 	slli	r3,r3,3
 4004884:	04003fc4 	movi	r16,255
 4004888:	003f0406 	br	400449c <__alt_data_end+0xfc00449c>
 400488c:	3807883a 	mov	r3,r7
 4004890:	3021883a 	mov	r16,r6
 4004894:	003f0106 	br	400449c <__alt_data_end+0xfc00449c>
 4004898:	18001726 	beq	r3,zero,40048f8 <__subsf3+0x4c0>
 400489c:	38000b26 	beq	r7,zero,40048cc <__subsf3+0x494>
 40048a0:	1806d0fa 	srli	r3,r3,3
 40048a4:	1900102c 	andhi	r4,r3,64
 40048a8:	20000426 	beq	r4,zero,40048bc <__subsf3+0x484>
 40048ac:	380ed0fa 	srli	r7,r7,3
 40048b0:	3900102c 	andhi	r4,r7,64
 40048b4:	2000011e 	bne	r4,zero,40048bc <__subsf3+0x484>
 40048b8:	3807883a 	mov	r3,r7
 40048bc:	180690fa 	slli	r3,r3,3
 40048c0:	1023883a 	mov	r17,r2
 40048c4:	04003fc4 	movi	r16,255
 40048c8:	003ef406 	br	400449c <__alt_data_end+0xfc00449c>
 40048cc:	04003fc4 	movi	r16,255
 40048d0:	003ef206 	br	400449c <__alt_data_end+0xfc00449c>
 40048d4:	00c00044 	movi	r3,1
 40048d8:	003f9606 	br	4004734 <__alt_data_end+0xfc004734>
 40048dc:	000b883a 	mov	r5,zero
 40048e0:	0005883a 	mov	r2,zero
 40048e4:	003f3506 	br	40045bc <__alt_data_end+0xfc0045bc>
 40048e8:	01402034 	movhi	r5,128
 40048ec:	297fffc4 	addi	r5,r5,-1
 40048f0:	0005883a 	mov	r2,zero
 40048f4:	003f2f06 	br	40045b4 <__alt_data_end+0xfc0045b4>
 40048f8:	3807883a 	mov	r3,r7
 40048fc:	04003fc4 	movi	r16,255
 4004900:	003ee606 	br	400449c <__alt_data_end+0xfc00449c>
 4004904:	3807883a 	mov	r3,r7
 4004908:	003ee406 	br	400449c <__alt_data_end+0xfc00449c>
 400490c:	00c00044 	movi	r3,1
 4004910:	003fbd06 	br	4004808 <__alt_data_end+0xfc004808>
 4004914:	0005883a 	mov	r2,zero
 4004918:	003f2806 	br	40045bc <__alt_data_end+0xfc0045bc>

0400491c <__fixsfsi>:
 400491c:	200ad5fa 	srli	r5,r4,23
 4004920:	00c02034 	movhi	r3,128
 4004924:	18ffffc4 	addi	r3,r3,-1
 4004928:	29403fcc 	andi	r5,r5,255
 400492c:	00801f84 	movi	r2,126
 4004930:	1906703a 	and	r3,r3,r4
 4004934:	2008d7fa 	srli	r4,r4,31
 4004938:	11400e0e 	bge	r2,r5,4004974 <__fixsfsi+0x58>
 400493c:	00802744 	movi	r2,157
 4004940:	11400816 	blt	r2,r5,4004964 <__fixsfsi+0x48>
 4004944:	00802544 	movi	r2,149
 4004948:	18c02034 	orhi	r3,r3,128
 400494c:	11400b0e 	bge	r2,r5,400497c <__fixsfsi+0x60>
 4004950:	28bfda84 	addi	r2,r5,-150
 4004954:	1884983a 	sll	r2,r3,r2
 4004958:	20000726 	beq	r4,zero,4004978 <__fixsfsi+0x5c>
 400495c:	0085c83a 	sub	r2,zero,r2
 4004960:	f800283a 	ret
 4004964:	00a00034 	movhi	r2,32768
 4004968:	10bfffc4 	addi	r2,r2,-1
 400496c:	2085883a 	add	r2,r4,r2
 4004970:	f800283a 	ret
 4004974:	0005883a 	mov	r2,zero
 4004978:	f800283a 	ret
 400497c:	00802584 	movi	r2,150
 4004980:	1145c83a 	sub	r2,r2,r5
 4004984:	1884d83a 	srl	r2,r3,r2
 4004988:	003ff306 	br	4004958 <__alt_data_end+0xfc004958>

0400498c <__floatsisf>:
 400498c:	defffd04 	addi	sp,sp,-12
 4004990:	dfc00215 	stw	ra,8(sp)
 4004994:	dc400115 	stw	r17,4(sp)
 4004998:	dc000015 	stw	r16,0(sp)
 400499c:	20003526 	beq	r4,zero,4004a74 <__floatsisf+0xe8>
 40049a0:	2021883a 	mov	r16,r4
 40049a4:	2022d7fa 	srli	r17,r4,31
 40049a8:	20003616 	blt	r4,zero,4004a84 <__floatsisf+0xf8>
 40049ac:	8009883a 	mov	r4,r16
 40049b0:	40071d40 	call	40071d4 <__clzsi2>
 40049b4:	00c02784 	movi	r3,158
 40049b8:	1887c83a 	sub	r3,r3,r2
 40049bc:	01002584 	movi	r4,150
 40049c0:	20c01416 	blt	r4,r3,4004a14 <__floatsisf+0x88>
 40049c4:	20c9c83a 	sub	r4,r4,r3
 40049c8:	8120983a 	sll	r16,r16,r4
 40049cc:	00802034 	movhi	r2,128
 40049d0:	10bfffc4 	addi	r2,r2,-1
 40049d4:	8809883a 	mov	r4,r17
 40049d8:	80a0703a 	and	r16,r16,r2
 40049dc:	18803fcc 	andi	r2,r3,255
 40049e0:	100695fa 	slli	r3,r2,23
 40049e4:	20803fcc 	andi	r2,r4,255
 40049e8:	100897fa 	slli	r4,r2,31
 40049ec:	00802034 	movhi	r2,128
 40049f0:	10bfffc4 	addi	r2,r2,-1
 40049f4:	8084703a 	and	r2,r16,r2
 40049f8:	10c4b03a 	or	r2,r2,r3
 40049fc:	1104b03a 	or	r2,r2,r4
 4004a00:	dfc00217 	ldw	ra,8(sp)
 4004a04:	dc400117 	ldw	r17,4(sp)
 4004a08:	dc000017 	ldw	r16,0(sp)
 4004a0c:	dec00304 	addi	sp,sp,12
 4004a10:	f800283a 	ret
 4004a14:	01002644 	movi	r4,153
 4004a18:	20c01c16 	blt	r4,r3,4004a8c <__floatsisf+0x100>
 4004a1c:	20c9c83a 	sub	r4,r4,r3
 4004a20:	8120983a 	sll	r16,r16,r4
 4004a24:	013f0034 	movhi	r4,64512
 4004a28:	213fffc4 	addi	r4,r4,-1
 4004a2c:	814001cc 	andi	r5,r16,7
 4004a30:	8108703a 	and	r4,r16,r4
 4004a34:	28000426 	beq	r5,zero,4004a48 <__floatsisf+0xbc>
 4004a38:	840003cc 	andi	r16,r16,15
 4004a3c:	01400104 	movi	r5,4
 4004a40:	81400126 	beq	r16,r5,4004a48 <__floatsisf+0xbc>
 4004a44:	2149883a 	add	r4,r4,r5
 4004a48:	2141002c 	andhi	r5,r4,1024
 4004a4c:	28000526 	beq	r5,zero,4004a64 <__floatsisf+0xd8>
 4004a50:	00c027c4 	movi	r3,159
 4004a54:	1887c83a 	sub	r3,r3,r2
 4004a58:	00bf0034 	movhi	r2,64512
 4004a5c:	10bfffc4 	addi	r2,r2,-1
 4004a60:	2088703a 	and	r4,r4,r2
 4004a64:	202091ba 	slli	r16,r4,6
 4004a68:	8809883a 	mov	r4,r17
 4004a6c:	8020d27a 	srli	r16,r16,9
 4004a70:	003fda06 	br	40049dc <__alt_data_end+0xfc0049dc>
 4004a74:	0009883a 	mov	r4,zero
 4004a78:	0007883a 	mov	r3,zero
 4004a7c:	0021883a 	mov	r16,zero
 4004a80:	003fd606 	br	40049dc <__alt_data_end+0xfc0049dc>
 4004a84:	0121c83a 	sub	r16,zero,r4
 4004a88:	003fc806 	br	40049ac <__alt_data_end+0xfc0049ac>
 4004a8c:	01002e44 	movi	r4,185
 4004a90:	20c9c83a 	sub	r4,r4,r3
 4004a94:	01400144 	movi	r5,5
 4004a98:	8108983a 	sll	r4,r16,r4
 4004a9c:	288bc83a 	sub	r5,r5,r2
 4004aa0:	8160d83a 	srl	r16,r16,r5
 4004aa4:	2008c03a 	cmpne	r4,r4,zero
 4004aa8:	8120b03a 	or	r16,r16,r4
 4004aac:	003fdd06 	br	4004a24 <__alt_data_end+0xfc004a24>

04004ab0 <__adddf3>:
 4004ab0:	02c00434 	movhi	r11,16
 4004ab4:	5affffc4 	addi	r11,r11,-1
 4004ab8:	2806d7fa 	srli	r3,r5,31
 4004abc:	2ad4703a 	and	r10,r5,r11
 4004ac0:	3ad2703a 	and	r9,r7,r11
 4004ac4:	3804d53a 	srli	r2,r7,20
 4004ac8:	3018d77a 	srli	r12,r6,29
 4004acc:	280ad53a 	srli	r5,r5,20
 4004ad0:	501490fa 	slli	r10,r10,3
 4004ad4:	2010d77a 	srli	r8,r4,29
 4004ad8:	481290fa 	slli	r9,r9,3
 4004adc:	380ed7fa 	srli	r7,r7,31
 4004ae0:	defffb04 	addi	sp,sp,-20
 4004ae4:	dc800215 	stw	r18,8(sp)
 4004ae8:	dc400115 	stw	r17,4(sp)
 4004aec:	dc000015 	stw	r16,0(sp)
 4004af0:	dfc00415 	stw	ra,16(sp)
 4004af4:	dcc00315 	stw	r19,12(sp)
 4004af8:	1c803fcc 	andi	r18,r3,255
 4004afc:	2c01ffcc 	andi	r16,r5,2047
 4004b00:	5210b03a 	or	r8,r10,r8
 4004b04:	202290fa 	slli	r17,r4,3
 4004b08:	1081ffcc 	andi	r2,r2,2047
 4004b0c:	4b12b03a 	or	r9,r9,r12
 4004b10:	300c90fa 	slli	r6,r6,3
 4004b14:	91c07526 	beq	r18,r7,4004cec <__adddf3+0x23c>
 4004b18:	8087c83a 	sub	r3,r16,r2
 4004b1c:	00c0ab0e 	bge	zero,r3,4004dcc <__adddf3+0x31c>
 4004b20:	10002a1e 	bne	r2,zero,4004bcc <__adddf3+0x11c>
 4004b24:	4984b03a 	or	r2,r9,r6
 4004b28:	1000961e 	bne	r2,zero,4004d84 <__adddf3+0x2d4>
 4004b2c:	888001cc 	andi	r2,r17,7
 4004b30:	10000726 	beq	r2,zero,4004b50 <__adddf3+0xa0>
 4004b34:	888003cc 	andi	r2,r17,15
 4004b38:	00c00104 	movi	r3,4
 4004b3c:	10c00426 	beq	r2,r3,4004b50 <__adddf3+0xa0>
 4004b40:	88c7883a 	add	r3,r17,r3
 4004b44:	1c63803a 	cmpltu	r17,r3,r17
 4004b48:	4451883a 	add	r8,r8,r17
 4004b4c:	1823883a 	mov	r17,r3
 4004b50:	4080202c 	andhi	r2,r8,128
 4004b54:	10005926 	beq	r2,zero,4004cbc <__adddf3+0x20c>
 4004b58:	84000044 	addi	r16,r16,1
 4004b5c:	0081ffc4 	movi	r2,2047
 4004b60:	8080ba26 	beq	r16,r2,4004e4c <__adddf3+0x39c>
 4004b64:	00bfe034 	movhi	r2,65408
 4004b68:	10bfffc4 	addi	r2,r2,-1
 4004b6c:	4090703a 	and	r8,r8,r2
 4004b70:	4004977a 	slli	r2,r8,29
 4004b74:	4010927a 	slli	r8,r8,9
 4004b78:	8822d0fa 	srli	r17,r17,3
 4004b7c:	8401ffcc 	andi	r16,r16,2047
 4004b80:	4010d33a 	srli	r8,r8,12
 4004b84:	9007883a 	mov	r3,r18
 4004b88:	1444b03a 	or	r2,r2,r17
 4004b8c:	8401ffcc 	andi	r16,r16,2047
 4004b90:	8020953a 	slli	r16,r16,20
 4004b94:	18c03fcc 	andi	r3,r3,255
 4004b98:	01000434 	movhi	r4,16
 4004b9c:	213fffc4 	addi	r4,r4,-1
 4004ba0:	180697fa 	slli	r3,r3,31
 4004ba4:	4110703a 	and	r8,r8,r4
 4004ba8:	4410b03a 	or	r8,r8,r16
 4004bac:	40c6b03a 	or	r3,r8,r3
 4004bb0:	dfc00417 	ldw	ra,16(sp)
 4004bb4:	dcc00317 	ldw	r19,12(sp)
 4004bb8:	dc800217 	ldw	r18,8(sp)
 4004bbc:	dc400117 	ldw	r17,4(sp)
 4004bc0:	dc000017 	ldw	r16,0(sp)
 4004bc4:	dec00504 	addi	sp,sp,20
 4004bc8:	f800283a 	ret
 4004bcc:	0081ffc4 	movi	r2,2047
 4004bd0:	80bfd626 	beq	r16,r2,4004b2c <__alt_data_end+0xfc004b2c>
 4004bd4:	4a402034 	orhi	r9,r9,128
 4004bd8:	00800e04 	movi	r2,56
 4004bdc:	10c09f16 	blt	r2,r3,4004e5c <__adddf3+0x3ac>
 4004be0:	008007c4 	movi	r2,31
 4004be4:	10c0c216 	blt	r2,r3,4004ef0 <__adddf3+0x440>
 4004be8:	00800804 	movi	r2,32
 4004bec:	10c5c83a 	sub	r2,r2,r3
 4004bf0:	488a983a 	sll	r5,r9,r2
 4004bf4:	30c8d83a 	srl	r4,r6,r3
 4004bf8:	3084983a 	sll	r2,r6,r2
 4004bfc:	48c6d83a 	srl	r3,r9,r3
 4004c00:	290cb03a 	or	r6,r5,r4
 4004c04:	1004c03a 	cmpne	r2,r2,zero
 4004c08:	308cb03a 	or	r6,r6,r2
 4004c0c:	898dc83a 	sub	r6,r17,r6
 4004c10:	89a3803a 	cmpltu	r17,r17,r6
 4004c14:	40d1c83a 	sub	r8,r8,r3
 4004c18:	4451c83a 	sub	r8,r8,r17
 4004c1c:	3023883a 	mov	r17,r6
 4004c20:	4080202c 	andhi	r2,r8,128
 4004c24:	10002326 	beq	r2,zero,4004cb4 <__adddf3+0x204>
 4004c28:	04c02034 	movhi	r19,128
 4004c2c:	9cffffc4 	addi	r19,r19,-1
 4004c30:	44e6703a 	and	r19,r8,r19
 4004c34:	98007626 	beq	r19,zero,4004e10 <__adddf3+0x360>
 4004c38:	9809883a 	mov	r4,r19
 4004c3c:	40071d40 	call	40071d4 <__clzsi2>
 4004c40:	10fffe04 	addi	r3,r2,-8
 4004c44:	010007c4 	movi	r4,31
 4004c48:	20c07716 	blt	r4,r3,4004e28 <__adddf3+0x378>
 4004c4c:	00800804 	movi	r2,32
 4004c50:	10c5c83a 	sub	r2,r2,r3
 4004c54:	8884d83a 	srl	r2,r17,r2
 4004c58:	98d0983a 	sll	r8,r19,r3
 4004c5c:	88e2983a 	sll	r17,r17,r3
 4004c60:	1204b03a 	or	r2,r2,r8
 4004c64:	1c007416 	blt	r3,r16,4004e38 <__adddf3+0x388>
 4004c68:	1c21c83a 	sub	r16,r3,r16
 4004c6c:	82000044 	addi	r8,r16,1
 4004c70:	00c007c4 	movi	r3,31
 4004c74:	1a009116 	blt	r3,r8,4004ebc <__adddf3+0x40c>
 4004c78:	00c00804 	movi	r3,32
 4004c7c:	1a07c83a 	sub	r3,r3,r8
 4004c80:	8a08d83a 	srl	r4,r17,r8
 4004c84:	88e2983a 	sll	r17,r17,r3
 4004c88:	10c6983a 	sll	r3,r2,r3
 4004c8c:	1210d83a 	srl	r8,r2,r8
 4004c90:	8804c03a 	cmpne	r2,r17,zero
 4004c94:	1906b03a 	or	r3,r3,r4
 4004c98:	18a2b03a 	or	r17,r3,r2
 4004c9c:	0021883a 	mov	r16,zero
 4004ca0:	003fa206 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4004ca4:	1890b03a 	or	r8,r3,r2
 4004ca8:	40017d26 	beq	r8,zero,40052a0 <__adddf3+0x7f0>
 4004cac:	1011883a 	mov	r8,r2
 4004cb0:	1823883a 	mov	r17,r3
 4004cb4:	888001cc 	andi	r2,r17,7
 4004cb8:	103f9e1e 	bne	r2,zero,4004b34 <__alt_data_end+0xfc004b34>
 4004cbc:	4004977a 	slli	r2,r8,29
 4004cc0:	8822d0fa 	srli	r17,r17,3
 4004cc4:	4010d0fa 	srli	r8,r8,3
 4004cc8:	9007883a 	mov	r3,r18
 4004ccc:	1444b03a 	or	r2,r2,r17
 4004cd0:	0101ffc4 	movi	r4,2047
 4004cd4:	81002426 	beq	r16,r4,4004d68 <__adddf3+0x2b8>
 4004cd8:	8120703a 	and	r16,r16,r4
 4004cdc:	01000434 	movhi	r4,16
 4004ce0:	213fffc4 	addi	r4,r4,-1
 4004ce4:	4110703a 	and	r8,r8,r4
 4004ce8:	003fa806 	br	4004b8c <__alt_data_end+0xfc004b8c>
 4004cec:	8089c83a 	sub	r4,r16,r2
 4004cf0:	01005e0e 	bge	zero,r4,4004e6c <__adddf3+0x3bc>
 4004cf4:	10002b26 	beq	r2,zero,4004da4 <__adddf3+0x2f4>
 4004cf8:	0081ffc4 	movi	r2,2047
 4004cfc:	80bf8b26 	beq	r16,r2,4004b2c <__alt_data_end+0xfc004b2c>
 4004d00:	4a402034 	orhi	r9,r9,128
 4004d04:	00800e04 	movi	r2,56
 4004d08:	1100a40e 	bge	r2,r4,4004f9c <__adddf3+0x4ec>
 4004d0c:	498cb03a 	or	r6,r9,r6
 4004d10:	300ac03a 	cmpne	r5,r6,zero
 4004d14:	0013883a 	mov	r9,zero
 4004d18:	2c4b883a 	add	r5,r5,r17
 4004d1c:	2c63803a 	cmpltu	r17,r5,r17
 4004d20:	4a11883a 	add	r8,r9,r8
 4004d24:	8a11883a 	add	r8,r17,r8
 4004d28:	2823883a 	mov	r17,r5
 4004d2c:	4080202c 	andhi	r2,r8,128
 4004d30:	103fe026 	beq	r2,zero,4004cb4 <__alt_data_end+0xfc004cb4>
 4004d34:	84000044 	addi	r16,r16,1
 4004d38:	0081ffc4 	movi	r2,2047
 4004d3c:	8080d226 	beq	r16,r2,4005088 <__adddf3+0x5d8>
 4004d40:	00bfe034 	movhi	r2,65408
 4004d44:	10bfffc4 	addi	r2,r2,-1
 4004d48:	4090703a 	and	r8,r8,r2
 4004d4c:	880ad07a 	srli	r5,r17,1
 4004d50:	400897fa 	slli	r4,r8,31
 4004d54:	88c0004c 	andi	r3,r17,1
 4004d58:	28e2b03a 	or	r17,r5,r3
 4004d5c:	4010d07a 	srli	r8,r8,1
 4004d60:	2462b03a 	or	r17,r4,r17
 4004d64:	003f7106 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4004d68:	4088b03a 	or	r4,r8,r2
 4004d6c:	20014526 	beq	r4,zero,4005284 <__adddf3+0x7d4>
 4004d70:	01000434 	movhi	r4,16
 4004d74:	42000234 	orhi	r8,r8,8
 4004d78:	213fffc4 	addi	r4,r4,-1
 4004d7c:	4110703a 	and	r8,r8,r4
 4004d80:	003f8206 	br	4004b8c <__alt_data_end+0xfc004b8c>
 4004d84:	18ffffc4 	addi	r3,r3,-1
 4004d88:	1800491e 	bne	r3,zero,4004eb0 <__adddf3+0x400>
 4004d8c:	898bc83a 	sub	r5,r17,r6
 4004d90:	8963803a 	cmpltu	r17,r17,r5
 4004d94:	4251c83a 	sub	r8,r8,r9
 4004d98:	4451c83a 	sub	r8,r8,r17
 4004d9c:	2823883a 	mov	r17,r5
 4004da0:	003f9f06 	br	4004c20 <__alt_data_end+0xfc004c20>
 4004da4:	4984b03a 	or	r2,r9,r6
 4004da8:	103f6026 	beq	r2,zero,4004b2c <__alt_data_end+0xfc004b2c>
 4004dac:	213fffc4 	addi	r4,r4,-1
 4004db0:	2000931e 	bne	r4,zero,4005000 <__adddf3+0x550>
 4004db4:	898d883a 	add	r6,r17,r6
 4004db8:	3463803a 	cmpltu	r17,r6,r17
 4004dbc:	4251883a 	add	r8,r8,r9
 4004dc0:	8a11883a 	add	r8,r17,r8
 4004dc4:	3023883a 	mov	r17,r6
 4004dc8:	003fd806 	br	4004d2c <__alt_data_end+0xfc004d2c>
 4004dcc:	1800541e 	bne	r3,zero,4004f20 <__adddf3+0x470>
 4004dd0:	80800044 	addi	r2,r16,1
 4004dd4:	1081ffcc 	andi	r2,r2,2047
 4004dd8:	00c00044 	movi	r3,1
 4004ddc:	1880a00e 	bge	r3,r2,4005060 <__adddf3+0x5b0>
 4004de0:	8989c83a 	sub	r4,r17,r6
 4004de4:	8905803a 	cmpltu	r2,r17,r4
 4004de8:	4267c83a 	sub	r19,r8,r9
 4004dec:	98a7c83a 	sub	r19,r19,r2
 4004df0:	9880202c 	andhi	r2,r19,128
 4004df4:	10006326 	beq	r2,zero,4004f84 <__adddf3+0x4d4>
 4004df8:	3463c83a 	sub	r17,r6,r17
 4004dfc:	4a07c83a 	sub	r3,r9,r8
 4004e00:	344d803a 	cmpltu	r6,r6,r17
 4004e04:	19a7c83a 	sub	r19,r3,r6
 4004e08:	3825883a 	mov	r18,r7
 4004e0c:	983f8a1e 	bne	r19,zero,4004c38 <__alt_data_end+0xfc004c38>
 4004e10:	8809883a 	mov	r4,r17
 4004e14:	40071d40 	call	40071d4 <__clzsi2>
 4004e18:	10800804 	addi	r2,r2,32
 4004e1c:	10fffe04 	addi	r3,r2,-8
 4004e20:	010007c4 	movi	r4,31
 4004e24:	20ff890e 	bge	r4,r3,4004c4c <__alt_data_end+0xfc004c4c>
 4004e28:	10bff604 	addi	r2,r2,-40
 4004e2c:	8884983a 	sll	r2,r17,r2
 4004e30:	0023883a 	mov	r17,zero
 4004e34:	1c3f8c0e 	bge	r3,r16,4004c68 <__alt_data_end+0xfc004c68>
 4004e38:	023fe034 	movhi	r8,65408
 4004e3c:	423fffc4 	addi	r8,r8,-1
 4004e40:	80e1c83a 	sub	r16,r16,r3
 4004e44:	1210703a 	and	r8,r2,r8
 4004e48:	003f3806 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4004e4c:	9007883a 	mov	r3,r18
 4004e50:	0011883a 	mov	r8,zero
 4004e54:	0005883a 	mov	r2,zero
 4004e58:	003f4c06 	br	4004b8c <__alt_data_end+0xfc004b8c>
 4004e5c:	498cb03a 	or	r6,r9,r6
 4004e60:	300cc03a 	cmpne	r6,r6,zero
 4004e64:	0007883a 	mov	r3,zero
 4004e68:	003f6806 	br	4004c0c <__alt_data_end+0xfc004c0c>
 4004e6c:	20009c1e 	bne	r4,zero,40050e0 <__adddf3+0x630>
 4004e70:	80800044 	addi	r2,r16,1
 4004e74:	1141ffcc 	andi	r5,r2,2047
 4004e78:	01000044 	movi	r4,1
 4004e7c:	2140670e 	bge	r4,r5,400501c <__adddf3+0x56c>
 4004e80:	0101ffc4 	movi	r4,2047
 4004e84:	11007f26 	beq	r2,r4,4005084 <__adddf3+0x5d4>
 4004e88:	898d883a 	add	r6,r17,r6
 4004e8c:	4247883a 	add	r3,r8,r9
 4004e90:	3451803a 	cmpltu	r8,r6,r17
 4004e94:	40d1883a 	add	r8,r8,r3
 4004e98:	402297fa 	slli	r17,r8,31
 4004e9c:	300cd07a 	srli	r6,r6,1
 4004ea0:	4010d07a 	srli	r8,r8,1
 4004ea4:	1021883a 	mov	r16,r2
 4004ea8:	89a2b03a 	or	r17,r17,r6
 4004eac:	003f1f06 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4004eb0:	0081ffc4 	movi	r2,2047
 4004eb4:	80bf481e 	bne	r16,r2,4004bd8 <__alt_data_end+0xfc004bd8>
 4004eb8:	003f1c06 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4004ebc:	843ff844 	addi	r16,r16,-31
 4004ec0:	01000804 	movi	r4,32
 4004ec4:	1406d83a 	srl	r3,r2,r16
 4004ec8:	41005026 	beq	r8,r4,400500c <__adddf3+0x55c>
 4004ecc:	01001004 	movi	r4,64
 4004ed0:	2211c83a 	sub	r8,r4,r8
 4004ed4:	1204983a 	sll	r2,r2,r8
 4004ed8:	88a2b03a 	or	r17,r17,r2
 4004edc:	8822c03a 	cmpne	r17,r17,zero
 4004ee0:	1c62b03a 	or	r17,r3,r17
 4004ee4:	0011883a 	mov	r8,zero
 4004ee8:	0021883a 	mov	r16,zero
 4004eec:	003f7106 	br	4004cb4 <__alt_data_end+0xfc004cb4>
 4004ef0:	193ff804 	addi	r4,r3,-32
 4004ef4:	00800804 	movi	r2,32
 4004ef8:	4908d83a 	srl	r4,r9,r4
 4004efc:	18804526 	beq	r3,r2,4005014 <__adddf3+0x564>
 4004f00:	00801004 	movi	r2,64
 4004f04:	10c5c83a 	sub	r2,r2,r3
 4004f08:	4886983a 	sll	r3,r9,r2
 4004f0c:	198cb03a 	or	r6,r3,r6
 4004f10:	300cc03a 	cmpne	r6,r6,zero
 4004f14:	218cb03a 	or	r6,r4,r6
 4004f18:	0007883a 	mov	r3,zero
 4004f1c:	003f3b06 	br	4004c0c <__alt_data_end+0xfc004c0c>
 4004f20:	80002a26 	beq	r16,zero,4004fcc <__adddf3+0x51c>
 4004f24:	0101ffc4 	movi	r4,2047
 4004f28:	11006826 	beq	r2,r4,40050cc <__adddf3+0x61c>
 4004f2c:	00c7c83a 	sub	r3,zero,r3
 4004f30:	42002034 	orhi	r8,r8,128
 4004f34:	01000e04 	movi	r4,56
 4004f38:	20c07c16 	blt	r4,r3,400512c <__adddf3+0x67c>
 4004f3c:	010007c4 	movi	r4,31
 4004f40:	20c0da16 	blt	r4,r3,40052ac <__adddf3+0x7fc>
 4004f44:	01000804 	movi	r4,32
 4004f48:	20c9c83a 	sub	r4,r4,r3
 4004f4c:	4114983a 	sll	r10,r8,r4
 4004f50:	88cad83a 	srl	r5,r17,r3
 4004f54:	8908983a 	sll	r4,r17,r4
 4004f58:	40c6d83a 	srl	r3,r8,r3
 4004f5c:	5162b03a 	or	r17,r10,r5
 4004f60:	2008c03a 	cmpne	r4,r4,zero
 4004f64:	8922b03a 	or	r17,r17,r4
 4004f68:	3463c83a 	sub	r17,r6,r17
 4004f6c:	48c7c83a 	sub	r3,r9,r3
 4004f70:	344d803a 	cmpltu	r6,r6,r17
 4004f74:	1991c83a 	sub	r8,r3,r6
 4004f78:	1021883a 	mov	r16,r2
 4004f7c:	3825883a 	mov	r18,r7
 4004f80:	003f2706 	br	4004c20 <__alt_data_end+0xfc004c20>
 4004f84:	24d0b03a 	or	r8,r4,r19
 4004f88:	40001b1e 	bne	r8,zero,4004ff8 <__adddf3+0x548>
 4004f8c:	0005883a 	mov	r2,zero
 4004f90:	0007883a 	mov	r3,zero
 4004f94:	0021883a 	mov	r16,zero
 4004f98:	003f4d06 	br	4004cd0 <__alt_data_end+0xfc004cd0>
 4004f9c:	008007c4 	movi	r2,31
 4004fa0:	11003c16 	blt	r2,r4,4005094 <__adddf3+0x5e4>
 4004fa4:	00800804 	movi	r2,32
 4004fa8:	1105c83a 	sub	r2,r2,r4
 4004fac:	488e983a 	sll	r7,r9,r2
 4004fb0:	310ad83a 	srl	r5,r6,r4
 4004fb4:	3084983a 	sll	r2,r6,r2
 4004fb8:	4912d83a 	srl	r9,r9,r4
 4004fbc:	394ab03a 	or	r5,r7,r5
 4004fc0:	1004c03a 	cmpne	r2,r2,zero
 4004fc4:	288ab03a 	or	r5,r5,r2
 4004fc8:	003f5306 	br	4004d18 <__alt_data_end+0xfc004d18>
 4004fcc:	4448b03a 	or	r4,r8,r17
 4004fd0:	20003e26 	beq	r4,zero,40050cc <__adddf3+0x61c>
 4004fd4:	00c6303a 	nor	r3,zero,r3
 4004fd8:	18003a1e 	bne	r3,zero,40050c4 <__adddf3+0x614>
 4004fdc:	3463c83a 	sub	r17,r6,r17
 4004fe0:	4a07c83a 	sub	r3,r9,r8
 4004fe4:	344d803a 	cmpltu	r6,r6,r17
 4004fe8:	1991c83a 	sub	r8,r3,r6
 4004fec:	1021883a 	mov	r16,r2
 4004ff0:	3825883a 	mov	r18,r7
 4004ff4:	003f0a06 	br	4004c20 <__alt_data_end+0xfc004c20>
 4004ff8:	2023883a 	mov	r17,r4
 4004ffc:	003f0d06 	br	4004c34 <__alt_data_end+0xfc004c34>
 4005000:	0081ffc4 	movi	r2,2047
 4005004:	80bf3f1e 	bne	r16,r2,4004d04 <__alt_data_end+0xfc004d04>
 4005008:	003ec806 	br	4004b2c <__alt_data_end+0xfc004b2c>
 400500c:	0005883a 	mov	r2,zero
 4005010:	003fb106 	br	4004ed8 <__alt_data_end+0xfc004ed8>
 4005014:	0007883a 	mov	r3,zero
 4005018:	003fbc06 	br	4004f0c <__alt_data_end+0xfc004f0c>
 400501c:	4444b03a 	or	r2,r8,r17
 4005020:	8000871e 	bne	r16,zero,4005240 <__adddf3+0x790>
 4005024:	1000ba26 	beq	r2,zero,4005310 <__adddf3+0x860>
 4005028:	4984b03a 	or	r2,r9,r6
 400502c:	103ebf26 	beq	r2,zero,4004b2c <__alt_data_end+0xfc004b2c>
 4005030:	8985883a 	add	r2,r17,r6
 4005034:	4247883a 	add	r3,r8,r9
 4005038:	1451803a 	cmpltu	r8,r2,r17
 400503c:	40d1883a 	add	r8,r8,r3
 4005040:	40c0202c 	andhi	r3,r8,128
 4005044:	1023883a 	mov	r17,r2
 4005048:	183f1a26 	beq	r3,zero,4004cb4 <__alt_data_end+0xfc004cb4>
 400504c:	00bfe034 	movhi	r2,65408
 4005050:	10bfffc4 	addi	r2,r2,-1
 4005054:	2021883a 	mov	r16,r4
 4005058:	4090703a 	and	r8,r8,r2
 400505c:	003eb306 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4005060:	4444b03a 	or	r2,r8,r17
 4005064:	8000291e 	bne	r16,zero,400510c <__adddf3+0x65c>
 4005068:	10004b1e 	bne	r2,zero,4005198 <__adddf3+0x6e8>
 400506c:	4990b03a 	or	r8,r9,r6
 4005070:	40008b26 	beq	r8,zero,40052a0 <__adddf3+0x7f0>
 4005074:	4811883a 	mov	r8,r9
 4005078:	3023883a 	mov	r17,r6
 400507c:	3825883a 	mov	r18,r7
 4005080:	003eaa06 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4005084:	1021883a 	mov	r16,r2
 4005088:	0011883a 	mov	r8,zero
 400508c:	0005883a 	mov	r2,zero
 4005090:	003f0f06 	br	4004cd0 <__alt_data_end+0xfc004cd0>
 4005094:	217ff804 	addi	r5,r4,-32
 4005098:	00800804 	movi	r2,32
 400509c:	494ad83a 	srl	r5,r9,r5
 40050a0:	20807d26 	beq	r4,r2,4005298 <__adddf3+0x7e8>
 40050a4:	00801004 	movi	r2,64
 40050a8:	1109c83a 	sub	r4,r2,r4
 40050ac:	4912983a 	sll	r9,r9,r4
 40050b0:	498cb03a 	or	r6,r9,r6
 40050b4:	300cc03a 	cmpne	r6,r6,zero
 40050b8:	298ab03a 	or	r5,r5,r6
 40050bc:	0013883a 	mov	r9,zero
 40050c0:	003f1506 	br	4004d18 <__alt_data_end+0xfc004d18>
 40050c4:	0101ffc4 	movi	r4,2047
 40050c8:	113f9a1e 	bne	r2,r4,4004f34 <__alt_data_end+0xfc004f34>
 40050cc:	4811883a 	mov	r8,r9
 40050d0:	3023883a 	mov	r17,r6
 40050d4:	1021883a 	mov	r16,r2
 40050d8:	3825883a 	mov	r18,r7
 40050dc:	003e9306 	br	4004b2c <__alt_data_end+0xfc004b2c>
 40050e0:	8000161e 	bne	r16,zero,400513c <__adddf3+0x68c>
 40050e4:	444ab03a 	or	r5,r8,r17
 40050e8:	28005126 	beq	r5,zero,4005230 <__adddf3+0x780>
 40050ec:	0108303a 	nor	r4,zero,r4
 40050f0:	20004d1e 	bne	r4,zero,4005228 <__adddf3+0x778>
 40050f4:	89a3883a 	add	r17,r17,r6
 40050f8:	4253883a 	add	r9,r8,r9
 40050fc:	898d803a 	cmpltu	r6,r17,r6
 4005100:	3251883a 	add	r8,r6,r9
 4005104:	1021883a 	mov	r16,r2
 4005108:	003f0806 	br	4004d2c <__alt_data_end+0xfc004d2c>
 400510c:	1000301e 	bne	r2,zero,40051d0 <__adddf3+0x720>
 4005110:	4984b03a 	or	r2,r9,r6
 4005114:	10007126 	beq	r2,zero,40052dc <__adddf3+0x82c>
 4005118:	4811883a 	mov	r8,r9
 400511c:	3023883a 	mov	r17,r6
 4005120:	3825883a 	mov	r18,r7
 4005124:	0401ffc4 	movi	r16,2047
 4005128:	003e8006 	br	4004b2c <__alt_data_end+0xfc004b2c>
 400512c:	4462b03a 	or	r17,r8,r17
 4005130:	8822c03a 	cmpne	r17,r17,zero
 4005134:	0007883a 	mov	r3,zero
 4005138:	003f8b06 	br	4004f68 <__alt_data_end+0xfc004f68>
 400513c:	0141ffc4 	movi	r5,2047
 4005140:	11403b26 	beq	r2,r5,4005230 <__adddf3+0x780>
 4005144:	0109c83a 	sub	r4,zero,r4
 4005148:	42002034 	orhi	r8,r8,128
 400514c:	01400e04 	movi	r5,56
 4005150:	29006716 	blt	r5,r4,40052f0 <__adddf3+0x840>
 4005154:	014007c4 	movi	r5,31
 4005158:	29007016 	blt	r5,r4,400531c <__adddf3+0x86c>
 400515c:	01400804 	movi	r5,32
 4005160:	290bc83a 	sub	r5,r5,r4
 4005164:	4154983a 	sll	r10,r8,r5
 4005168:	890ed83a 	srl	r7,r17,r4
 400516c:	894a983a 	sll	r5,r17,r5
 4005170:	4108d83a 	srl	r4,r8,r4
 4005174:	51e2b03a 	or	r17,r10,r7
 4005178:	280ac03a 	cmpne	r5,r5,zero
 400517c:	8962b03a 	or	r17,r17,r5
 4005180:	89a3883a 	add	r17,r17,r6
 4005184:	2253883a 	add	r9,r4,r9
 4005188:	898d803a 	cmpltu	r6,r17,r6
 400518c:	3251883a 	add	r8,r6,r9
 4005190:	1021883a 	mov	r16,r2
 4005194:	003ee506 	br	4004d2c <__alt_data_end+0xfc004d2c>
 4005198:	4984b03a 	or	r2,r9,r6
 400519c:	103e6326 	beq	r2,zero,4004b2c <__alt_data_end+0xfc004b2c>
 40051a0:	8987c83a 	sub	r3,r17,r6
 40051a4:	88c9803a 	cmpltu	r4,r17,r3
 40051a8:	4245c83a 	sub	r2,r8,r9
 40051ac:	1105c83a 	sub	r2,r2,r4
 40051b0:	1100202c 	andhi	r4,r2,128
 40051b4:	203ebb26 	beq	r4,zero,4004ca4 <__alt_data_end+0xfc004ca4>
 40051b8:	3463c83a 	sub	r17,r6,r17
 40051bc:	4a07c83a 	sub	r3,r9,r8
 40051c0:	344d803a 	cmpltu	r6,r6,r17
 40051c4:	1991c83a 	sub	r8,r3,r6
 40051c8:	3825883a 	mov	r18,r7
 40051cc:	003e5706 	br	4004b2c <__alt_data_end+0xfc004b2c>
 40051d0:	4984b03a 	or	r2,r9,r6
 40051d4:	10002e26 	beq	r2,zero,4005290 <__adddf3+0x7e0>
 40051d8:	4004d0fa 	srli	r2,r8,3
 40051dc:	8822d0fa 	srli	r17,r17,3
 40051e0:	4010977a 	slli	r8,r8,29
 40051e4:	10c0022c 	andhi	r3,r2,8
 40051e8:	4462b03a 	or	r17,r8,r17
 40051ec:	18000826 	beq	r3,zero,4005210 <__adddf3+0x760>
 40051f0:	4808d0fa 	srli	r4,r9,3
 40051f4:	20c0022c 	andhi	r3,r4,8
 40051f8:	1800051e 	bne	r3,zero,4005210 <__adddf3+0x760>
 40051fc:	300cd0fa 	srli	r6,r6,3
 4005200:	4806977a 	slli	r3,r9,29
 4005204:	2005883a 	mov	r2,r4
 4005208:	3825883a 	mov	r18,r7
 400520c:	19a2b03a 	or	r17,r3,r6
 4005210:	8810d77a 	srli	r8,r17,29
 4005214:	100490fa 	slli	r2,r2,3
 4005218:	882290fa 	slli	r17,r17,3
 400521c:	0401ffc4 	movi	r16,2047
 4005220:	4090b03a 	or	r8,r8,r2
 4005224:	003e4106 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4005228:	0141ffc4 	movi	r5,2047
 400522c:	117fc71e 	bne	r2,r5,400514c <__alt_data_end+0xfc00514c>
 4005230:	4811883a 	mov	r8,r9
 4005234:	3023883a 	mov	r17,r6
 4005238:	1021883a 	mov	r16,r2
 400523c:	003e3b06 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4005240:	10002f26 	beq	r2,zero,4005300 <__adddf3+0x850>
 4005244:	4984b03a 	or	r2,r9,r6
 4005248:	10001126 	beq	r2,zero,4005290 <__adddf3+0x7e0>
 400524c:	4004d0fa 	srli	r2,r8,3
 4005250:	8822d0fa 	srli	r17,r17,3
 4005254:	4010977a 	slli	r8,r8,29
 4005258:	10c0022c 	andhi	r3,r2,8
 400525c:	4462b03a 	or	r17,r8,r17
 4005260:	183feb26 	beq	r3,zero,4005210 <__alt_data_end+0xfc005210>
 4005264:	4808d0fa 	srli	r4,r9,3
 4005268:	20c0022c 	andhi	r3,r4,8
 400526c:	183fe81e 	bne	r3,zero,4005210 <__alt_data_end+0xfc005210>
 4005270:	300cd0fa 	srli	r6,r6,3
 4005274:	4806977a 	slli	r3,r9,29
 4005278:	2005883a 	mov	r2,r4
 400527c:	19a2b03a 	or	r17,r3,r6
 4005280:	003fe306 	br	4005210 <__alt_data_end+0xfc005210>
 4005284:	0011883a 	mov	r8,zero
 4005288:	0005883a 	mov	r2,zero
 400528c:	003e3f06 	br	4004b8c <__alt_data_end+0xfc004b8c>
 4005290:	0401ffc4 	movi	r16,2047
 4005294:	003e2506 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4005298:	0013883a 	mov	r9,zero
 400529c:	003f8406 	br	40050b0 <__alt_data_end+0xfc0050b0>
 40052a0:	0005883a 	mov	r2,zero
 40052a4:	0007883a 	mov	r3,zero
 40052a8:	003e8906 	br	4004cd0 <__alt_data_end+0xfc004cd0>
 40052ac:	197ff804 	addi	r5,r3,-32
 40052b0:	01000804 	movi	r4,32
 40052b4:	414ad83a 	srl	r5,r8,r5
 40052b8:	19002426 	beq	r3,r4,400534c <__adddf3+0x89c>
 40052bc:	01001004 	movi	r4,64
 40052c0:	20c7c83a 	sub	r3,r4,r3
 40052c4:	40c6983a 	sll	r3,r8,r3
 40052c8:	1c46b03a 	or	r3,r3,r17
 40052cc:	1806c03a 	cmpne	r3,r3,zero
 40052d0:	28e2b03a 	or	r17,r5,r3
 40052d4:	0007883a 	mov	r3,zero
 40052d8:	003f2306 	br	4004f68 <__alt_data_end+0xfc004f68>
 40052dc:	0007883a 	mov	r3,zero
 40052e0:	5811883a 	mov	r8,r11
 40052e4:	00bfffc4 	movi	r2,-1
 40052e8:	0401ffc4 	movi	r16,2047
 40052ec:	003e7806 	br	4004cd0 <__alt_data_end+0xfc004cd0>
 40052f0:	4462b03a 	or	r17,r8,r17
 40052f4:	8822c03a 	cmpne	r17,r17,zero
 40052f8:	0009883a 	mov	r4,zero
 40052fc:	003fa006 	br	4005180 <__alt_data_end+0xfc005180>
 4005300:	4811883a 	mov	r8,r9
 4005304:	3023883a 	mov	r17,r6
 4005308:	0401ffc4 	movi	r16,2047
 400530c:	003e0706 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4005310:	4811883a 	mov	r8,r9
 4005314:	3023883a 	mov	r17,r6
 4005318:	003e0406 	br	4004b2c <__alt_data_end+0xfc004b2c>
 400531c:	21fff804 	addi	r7,r4,-32
 4005320:	01400804 	movi	r5,32
 4005324:	41ced83a 	srl	r7,r8,r7
 4005328:	21400a26 	beq	r4,r5,4005354 <__adddf3+0x8a4>
 400532c:	01401004 	movi	r5,64
 4005330:	2909c83a 	sub	r4,r5,r4
 4005334:	4108983a 	sll	r4,r8,r4
 4005338:	2448b03a 	or	r4,r4,r17
 400533c:	2008c03a 	cmpne	r4,r4,zero
 4005340:	3922b03a 	or	r17,r7,r4
 4005344:	0009883a 	mov	r4,zero
 4005348:	003f8d06 	br	4005180 <__alt_data_end+0xfc005180>
 400534c:	0007883a 	mov	r3,zero
 4005350:	003fdd06 	br	40052c8 <__alt_data_end+0xfc0052c8>
 4005354:	0009883a 	mov	r4,zero
 4005358:	003ff706 	br	4005338 <__alt_data_end+0xfc005338>

0400535c <__divdf3>:
 400535c:	defff004 	addi	sp,sp,-64
 4005360:	dc800815 	stw	r18,32(sp)
 4005364:	2824d53a 	srli	r18,r5,20
 4005368:	dd800c15 	stw	r22,48(sp)
 400536c:	282cd7fa 	srli	r22,r5,31
 4005370:	dc000615 	stw	r16,24(sp)
 4005374:	04000434 	movhi	r16,16
 4005378:	843fffc4 	addi	r16,r16,-1
 400537c:	dfc00f15 	stw	ra,60(sp)
 4005380:	df000e15 	stw	fp,56(sp)
 4005384:	ddc00d15 	stw	r23,52(sp)
 4005388:	dd400b15 	stw	r21,44(sp)
 400538c:	dd000a15 	stw	r20,40(sp)
 4005390:	dcc00915 	stw	r19,36(sp)
 4005394:	dc400715 	stw	r17,28(sp)
 4005398:	9481ffcc 	andi	r18,r18,2047
 400539c:	2c20703a 	and	r16,r5,r16
 40053a0:	b2003fcc 	andi	r8,r22,255
 40053a4:	90006126 	beq	r18,zero,400552c <__divdf3+0x1d0>
 40053a8:	0081ffc4 	movi	r2,2047
 40053ac:	202b883a 	mov	r21,r4
 40053b0:	90803726 	beq	r18,r2,4005490 <__divdf3+0x134>
 40053b4:	80800434 	orhi	r2,r16,16
 40053b8:	100490fa 	slli	r2,r2,3
 40053bc:	2020d77a 	srli	r16,r4,29
 40053c0:	202a90fa 	slli	r21,r4,3
 40053c4:	94bf0044 	addi	r18,r18,-1023
 40053c8:	80a0b03a 	or	r16,r16,r2
 40053cc:	0013883a 	mov	r9,zero
 40053d0:	000b883a 	mov	r5,zero
 40053d4:	3806d53a 	srli	r3,r7,20
 40053d8:	382ed7fa 	srli	r23,r7,31
 40053dc:	04400434 	movhi	r17,16
 40053e0:	8c7fffc4 	addi	r17,r17,-1
 40053e4:	18c1ffcc 	andi	r3,r3,2047
 40053e8:	3029883a 	mov	r20,r6
 40053ec:	3c62703a 	and	r17,r7,r17
 40053f0:	bf003fcc 	andi	fp,r23,255
 40053f4:	18006e26 	beq	r3,zero,40055b0 <__divdf3+0x254>
 40053f8:	0081ffc4 	movi	r2,2047
 40053fc:	18806626 	beq	r3,r2,4005598 <__divdf3+0x23c>
 4005400:	88800434 	orhi	r2,r17,16
 4005404:	100490fa 	slli	r2,r2,3
 4005408:	3022d77a 	srli	r17,r6,29
 400540c:	302890fa 	slli	r20,r6,3
 4005410:	18ff0044 	addi	r3,r3,-1023
 4005414:	88a2b03a 	or	r17,r17,r2
 4005418:	000f883a 	mov	r7,zero
 400541c:	b5e6f03a 	xor	r19,r22,r23
 4005420:	3a4cb03a 	or	r6,r7,r9
 4005424:	008003c4 	movi	r2,15
 4005428:	9809883a 	mov	r4,r19
 400542c:	90c7c83a 	sub	r3,r18,r3
 4005430:	9cc03fcc 	andi	r19,r19,255
 4005434:	11809636 	bltu	r2,r6,4005690 <__divdf3+0x334>
 4005438:	300c90ba 	slli	r6,r6,2
 400543c:	00810034 	movhi	r2,1024
 4005440:	10951404 	addi	r2,r2,21584
 4005444:	308d883a 	add	r6,r6,r2
 4005448:	30800017 	ldw	r2,0(r6)
 400544c:	1000683a 	jmp	r2
 4005450:	04005690 	cmplti	r16,zero,346
 4005454:	040054c8 	cmpgei	r16,zero,339
 4005458:	04005680 	call	400568 <__reset-0x3bffa98>
 400545c:	040054bc 	xorhi	r16,zero,338
 4005460:	04005680 	call	400568 <__reset-0x3bffa98>
 4005464:	04005654 	movui	r16,345
 4005468:	04005680 	call	400568 <__reset-0x3bffa98>
 400546c:	040054bc 	xorhi	r16,zero,338
 4005470:	040054c8 	cmpgei	r16,zero,339
 4005474:	040054c8 	cmpgei	r16,zero,339
 4005478:	04005654 	movui	r16,345
 400547c:	040054bc 	xorhi	r16,zero,338
 4005480:	040054ac 	andhi	r16,zero,338
 4005484:	040054ac 	andhi	r16,zero,338
 4005488:	040054ac 	andhi	r16,zero,338
 400548c:	04005a18 	cmpnei	r16,zero,360
 4005490:	2404b03a 	or	r2,r4,r16
 4005494:	10006c1e 	bne	r2,zero,4005648 <__divdf3+0x2ec>
 4005498:	02400204 	movi	r9,8
 400549c:	0021883a 	mov	r16,zero
 40054a0:	002b883a 	mov	r21,zero
 40054a4:	01400084 	movi	r5,2
 40054a8:	003fca06 	br	40053d4 <__alt_data_end+0xfc0053d4>
 40054ac:	8023883a 	mov	r17,r16
 40054b0:	a829883a 	mov	r20,r21
 40054b4:	4039883a 	mov	fp,r8
 40054b8:	280f883a 	mov	r7,r5
 40054bc:	00800084 	movi	r2,2
 40054c0:	3881601e 	bne	r7,r2,4005a44 <__divdf3+0x6e8>
 40054c4:	e027883a 	mov	r19,fp
 40054c8:	9900004c 	andi	r4,r19,1
 40054cc:	0081ffc4 	movi	r2,2047
 40054d0:	0021883a 	mov	r16,zero
 40054d4:	002b883a 	mov	r21,zero
 40054d8:	1004953a 	slli	r2,r2,20
 40054dc:	20c03fcc 	andi	r3,r4,255
 40054e0:	01400434 	movhi	r5,16
 40054e4:	297fffc4 	addi	r5,r5,-1
 40054e8:	180697fa 	slli	r3,r3,31
 40054ec:	8160703a 	and	r16,r16,r5
 40054f0:	80a0b03a 	or	r16,r16,r2
 40054f4:	80c6b03a 	or	r3,r16,r3
 40054f8:	a805883a 	mov	r2,r21
 40054fc:	dfc00f17 	ldw	ra,60(sp)
 4005500:	df000e17 	ldw	fp,56(sp)
 4005504:	ddc00d17 	ldw	r23,52(sp)
 4005508:	dd800c17 	ldw	r22,48(sp)
 400550c:	dd400b17 	ldw	r21,44(sp)
 4005510:	dd000a17 	ldw	r20,40(sp)
 4005514:	dcc00917 	ldw	r19,36(sp)
 4005518:	dc800817 	ldw	r18,32(sp)
 400551c:	dc400717 	ldw	r17,28(sp)
 4005520:	dc000617 	ldw	r16,24(sp)
 4005524:	dec01004 	addi	sp,sp,64
 4005528:	f800283a 	ret
 400552c:	2404b03a 	or	r2,r4,r16
 4005530:	2023883a 	mov	r17,r4
 4005534:	10003f26 	beq	r2,zero,4005634 <__divdf3+0x2d8>
 4005538:	80015e26 	beq	r16,zero,4005ab4 <__divdf3+0x758>
 400553c:	8009883a 	mov	r4,r16
 4005540:	d9800215 	stw	r6,8(sp)
 4005544:	d9c00515 	stw	r7,20(sp)
 4005548:	da000415 	stw	r8,16(sp)
 400554c:	40071d40 	call	40071d4 <__clzsi2>
 4005550:	d9800217 	ldw	r6,8(sp)
 4005554:	d9c00517 	ldw	r7,20(sp)
 4005558:	da000417 	ldw	r8,16(sp)
 400555c:	113ffd44 	addi	r4,r2,-11
 4005560:	00c00704 	movi	r3,28
 4005564:	19014f16 	blt	r3,r4,4005aa4 <__divdf3+0x748>
 4005568:	00c00744 	movi	r3,29
 400556c:	157ffe04 	addi	r21,r2,-8
 4005570:	1907c83a 	sub	r3,r3,r4
 4005574:	8560983a 	sll	r16,r16,r21
 4005578:	88c6d83a 	srl	r3,r17,r3
 400557c:	8d6a983a 	sll	r21,r17,r21
 4005580:	1c20b03a 	or	r16,r3,r16
 4005584:	1080fcc4 	addi	r2,r2,1011
 4005588:	00a5c83a 	sub	r18,zero,r2
 400558c:	0013883a 	mov	r9,zero
 4005590:	000b883a 	mov	r5,zero
 4005594:	003f8f06 	br	40053d4 <__alt_data_end+0xfc0053d4>
 4005598:	3444b03a 	or	r2,r6,r17
 400559c:	1000231e 	bne	r2,zero,400562c <__divdf3+0x2d0>
 40055a0:	0023883a 	mov	r17,zero
 40055a4:	0029883a 	mov	r20,zero
 40055a8:	01c00084 	movi	r7,2
 40055ac:	003f9b06 	br	400541c <__alt_data_end+0xfc00541c>
 40055b0:	3444b03a 	or	r2,r6,r17
 40055b4:	10001926 	beq	r2,zero,400561c <__divdf3+0x2c0>
 40055b8:	88014b26 	beq	r17,zero,4005ae8 <__divdf3+0x78c>
 40055bc:	8809883a 	mov	r4,r17
 40055c0:	d9400115 	stw	r5,4(sp)
 40055c4:	d9800215 	stw	r6,8(sp)
 40055c8:	da000415 	stw	r8,16(sp)
 40055cc:	da400315 	stw	r9,12(sp)
 40055d0:	40071d40 	call	40071d4 <__clzsi2>
 40055d4:	d9400117 	ldw	r5,4(sp)
 40055d8:	d9800217 	ldw	r6,8(sp)
 40055dc:	da000417 	ldw	r8,16(sp)
 40055e0:	da400317 	ldw	r9,12(sp)
 40055e4:	113ffd44 	addi	r4,r2,-11
 40055e8:	00c00704 	movi	r3,28
 40055ec:	19013a16 	blt	r3,r4,4005ad8 <__divdf3+0x77c>
 40055f0:	00c00744 	movi	r3,29
 40055f4:	153ffe04 	addi	r20,r2,-8
 40055f8:	1907c83a 	sub	r3,r3,r4
 40055fc:	8d22983a 	sll	r17,r17,r20
 4005600:	30c6d83a 	srl	r3,r6,r3
 4005604:	3528983a 	sll	r20,r6,r20
 4005608:	1c62b03a 	or	r17,r3,r17
 400560c:	1080fcc4 	addi	r2,r2,1011
 4005610:	0087c83a 	sub	r3,zero,r2
 4005614:	000f883a 	mov	r7,zero
 4005618:	003f8006 	br	400541c <__alt_data_end+0xfc00541c>
 400561c:	0023883a 	mov	r17,zero
 4005620:	0029883a 	mov	r20,zero
 4005624:	01c00044 	movi	r7,1
 4005628:	003f7c06 	br	400541c <__alt_data_end+0xfc00541c>
 400562c:	01c000c4 	movi	r7,3
 4005630:	003f7a06 	br	400541c <__alt_data_end+0xfc00541c>
 4005634:	02400104 	movi	r9,4
 4005638:	0021883a 	mov	r16,zero
 400563c:	002b883a 	mov	r21,zero
 4005640:	01400044 	movi	r5,1
 4005644:	003f6306 	br	40053d4 <__alt_data_end+0xfc0053d4>
 4005648:	02400304 	movi	r9,12
 400564c:	014000c4 	movi	r5,3
 4005650:	003f6006 	br	40053d4 <__alt_data_end+0xfc0053d4>
 4005654:	04000434 	movhi	r16,16
 4005658:	0009883a 	mov	r4,zero
 400565c:	843fffc4 	addi	r16,r16,-1
 4005660:	057fffc4 	movi	r21,-1
 4005664:	0081ffc4 	movi	r2,2047
 4005668:	003f9b06 	br	40054d8 <__alt_data_end+0xfc0054d8>
 400566c:	00c00044 	movi	r3,1
 4005670:	1887c83a 	sub	r3,r3,r2
 4005674:	01000e04 	movi	r4,56
 4005678:	20c1530e 	bge	r4,r3,4005bc8 <__divdf3+0x86c>
 400567c:	9900004c 	andi	r4,r19,1
 4005680:	0005883a 	mov	r2,zero
 4005684:	0021883a 	mov	r16,zero
 4005688:	002b883a 	mov	r21,zero
 400568c:	003f9206 	br	40054d8 <__alt_data_end+0xfc0054d8>
 4005690:	8c012e36 	bltu	r17,r16,4005b4c <__divdf3+0x7f0>
 4005694:	84412c26 	beq	r16,r17,4005b48 <__divdf3+0x7ec>
 4005698:	a82f883a 	mov	r23,r21
 400569c:	18ffffc4 	addi	r3,r3,-1
 40056a0:	002b883a 	mov	r21,zero
 40056a4:	a004d63a 	srli	r2,r20,24
 40056a8:	8822923a 	slli	r17,r17,8
 40056ac:	a028923a 	slli	r20,r20,8
 40056b0:	8009883a 	mov	r4,r16
 40056b4:	88acb03a 	or	r22,r17,r2
 40056b8:	dd000015 	stw	r20,0(sp)
 40056bc:	b028d43a 	srli	r20,r22,16
 40056c0:	d8c00215 	stw	r3,8(sp)
 40056c4:	b4bfffcc 	andi	r18,r22,65535
 40056c8:	a00b883a 	mov	r5,r20
 40056cc:	40073300 	call	4007330 <__udivsi3>
 40056d0:	100b883a 	mov	r5,r2
 40056d4:	9009883a 	mov	r4,r18
 40056d8:	1023883a 	mov	r17,r2
 40056dc:	40073ec0 	call	40073ec <__mulsi3>
 40056e0:	8009883a 	mov	r4,r16
 40056e4:	a00b883a 	mov	r5,r20
 40056e8:	1039883a 	mov	fp,r2
 40056ec:	40073940 	call	4007394 <__umodsi3>
 40056f0:	1004943a 	slli	r2,r2,16
 40056f4:	b808d43a 	srli	r4,r23,16
 40056f8:	d8c00217 	ldw	r3,8(sp)
 40056fc:	2084b03a 	or	r2,r4,r2
 4005700:	1700062e 	bgeu	r2,fp,400571c <__divdf3+0x3c0>
 4005704:	1585883a 	add	r2,r2,r22
 4005708:	893fffc4 	addi	r4,r17,-1
 400570c:	15811d36 	bltu	r2,r22,4005b84 <__divdf3+0x828>
 4005710:	17011c2e 	bgeu	r2,fp,4005b84 <__divdf3+0x828>
 4005714:	8c7fff84 	addi	r17,r17,-2
 4005718:	1585883a 	add	r2,r2,r22
 400571c:	1739c83a 	sub	fp,r2,fp
 4005720:	a00b883a 	mov	r5,r20
 4005724:	e009883a 	mov	r4,fp
 4005728:	d8c00215 	stw	r3,8(sp)
 400572c:	40073300 	call	4007330 <__udivsi3>
 4005730:	100b883a 	mov	r5,r2
 4005734:	9009883a 	mov	r4,r18
 4005738:	1021883a 	mov	r16,r2
 400573c:	40073ec0 	call	40073ec <__mulsi3>
 4005740:	a00b883a 	mov	r5,r20
 4005744:	e009883a 	mov	r4,fp
 4005748:	d8800415 	stw	r2,16(sp)
 400574c:	40073940 	call	4007394 <__umodsi3>
 4005750:	1004943a 	slli	r2,r2,16
 4005754:	da000417 	ldw	r8,16(sp)
 4005758:	bdffffcc 	andi	r23,r23,65535
 400575c:	b884b03a 	or	r2,r23,r2
 4005760:	d8c00217 	ldw	r3,8(sp)
 4005764:	1200062e 	bgeu	r2,r8,4005780 <__divdf3+0x424>
 4005768:	1585883a 	add	r2,r2,r22
 400576c:	813fffc4 	addi	r4,r16,-1
 4005770:	15810236 	bltu	r2,r22,4005b7c <__divdf3+0x820>
 4005774:	1201012e 	bgeu	r2,r8,4005b7c <__divdf3+0x820>
 4005778:	843fff84 	addi	r16,r16,-2
 400577c:	1585883a 	add	r2,r2,r22
 4005780:	8822943a 	slli	r17,r17,16
 4005784:	d9800017 	ldw	r6,0(sp)
 4005788:	1211c83a 	sub	r8,r2,r8
 400578c:	8c22b03a 	or	r17,r17,r16
 4005790:	373fffcc 	andi	fp,r6,65535
 4005794:	8abfffcc 	andi	r10,r17,65535
 4005798:	8820d43a 	srli	r16,r17,16
 400579c:	5009883a 	mov	r4,r10
 40057a0:	e00b883a 	mov	r5,fp
 40057a4:	302ed43a 	srli	r23,r6,16
 40057a8:	d8c00215 	stw	r3,8(sp)
 40057ac:	da000415 	stw	r8,16(sp)
 40057b0:	da800115 	stw	r10,4(sp)
 40057b4:	40073ec0 	call	40073ec <__mulsi3>
 40057b8:	800b883a 	mov	r5,r16
 40057bc:	e009883a 	mov	r4,fp
 40057c0:	d8800515 	stw	r2,20(sp)
 40057c4:	40073ec0 	call	40073ec <__mulsi3>
 40057c8:	8009883a 	mov	r4,r16
 40057cc:	b80b883a 	mov	r5,r23
 40057d0:	d8800315 	stw	r2,12(sp)
 40057d4:	40073ec0 	call	40073ec <__mulsi3>
 40057d8:	da800117 	ldw	r10,4(sp)
 40057dc:	b80b883a 	mov	r5,r23
 40057e0:	1021883a 	mov	r16,r2
 40057e4:	5009883a 	mov	r4,r10
 40057e8:	40073ec0 	call	40073ec <__mulsi3>
 40057ec:	d9c00517 	ldw	r7,20(sp)
 40057f0:	da400317 	ldw	r9,12(sp)
 40057f4:	d8c00217 	ldw	r3,8(sp)
 40057f8:	3808d43a 	srli	r4,r7,16
 40057fc:	1245883a 	add	r2,r2,r9
 4005800:	da000417 	ldw	r8,16(sp)
 4005804:	2085883a 	add	r2,r4,r2
 4005808:	1240022e 	bgeu	r2,r9,4005814 <__divdf3+0x4b8>
 400580c:	01000074 	movhi	r4,1
 4005810:	8121883a 	add	r16,r16,r4
 4005814:	1008d43a 	srli	r4,r2,16
 4005818:	1004943a 	slli	r2,r2,16
 400581c:	39ffffcc 	andi	r7,r7,65535
 4005820:	2409883a 	add	r4,r4,r16
 4005824:	11c5883a 	add	r2,r2,r7
 4005828:	4100bb36 	bltu	r8,r4,4005b18 <__divdf3+0x7bc>
 400582c:	4100d726 	beq	r8,r4,4005b8c <__divdf3+0x830>
 4005830:	4109c83a 	sub	r4,r8,r4
 4005834:	a8a1c83a 	sub	r16,r21,r2
 4005838:	ac2b803a 	cmpltu	r21,r21,r16
 400583c:	256bc83a 	sub	r21,r4,r21
 4005840:	b540d926 	beq	r22,r21,4005ba8 <__divdf3+0x84c>
 4005844:	a00b883a 	mov	r5,r20
 4005848:	a809883a 	mov	r4,r21
 400584c:	d8c00215 	stw	r3,8(sp)
 4005850:	40073300 	call	4007330 <__udivsi3>
 4005854:	100b883a 	mov	r5,r2
 4005858:	9009883a 	mov	r4,r18
 400585c:	d8800515 	stw	r2,20(sp)
 4005860:	40073ec0 	call	40073ec <__mulsi3>
 4005864:	a809883a 	mov	r4,r21
 4005868:	a00b883a 	mov	r5,r20
 400586c:	d8800415 	stw	r2,16(sp)
 4005870:	40073940 	call	4007394 <__umodsi3>
 4005874:	1004943a 	slli	r2,r2,16
 4005878:	8008d43a 	srli	r4,r16,16
 400587c:	da000417 	ldw	r8,16(sp)
 4005880:	d8c00217 	ldw	r3,8(sp)
 4005884:	2084b03a 	or	r2,r4,r2
 4005888:	d9c00517 	ldw	r7,20(sp)
 400588c:	1200062e 	bgeu	r2,r8,40058a8 <__divdf3+0x54c>
 4005890:	1585883a 	add	r2,r2,r22
 4005894:	393fffc4 	addi	r4,r7,-1
 4005898:	1580c536 	bltu	r2,r22,4005bb0 <__divdf3+0x854>
 400589c:	1200c42e 	bgeu	r2,r8,4005bb0 <__divdf3+0x854>
 40058a0:	39ffff84 	addi	r7,r7,-2
 40058a4:	1585883a 	add	r2,r2,r22
 40058a8:	122bc83a 	sub	r21,r2,r8
 40058ac:	a00b883a 	mov	r5,r20
 40058b0:	a809883a 	mov	r4,r21
 40058b4:	d8c00215 	stw	r3,8(sp)
 40058b8:	d9c00515 	stw	r7,20(sp)
 40058bc:	40073300 	call	4007330 <__udivsi3>
 40058c0:	9009883a 	mov	r4,r18
 40058c4:	100b883a 	mov	r5,r2
 40058c8:	d8800415 	stw	r2,16(sp)
 40058cc:	40073ec0 	call	40073ec <__mulsi3>
 40058d0:	a809883a 	mov	r4,r21
 40058d4:	a00b883a 	mov	r5,r20
 40058d8:	1025883a 	mov	r18,r2
 40058dc:	40073940 	call	4007394 <__umodsi3>
 40058e0:	1004943a 	slli	r2,r2,16
 40058e4:	813fffcc 	andi	r4,r16,65535
 40058e8:	d8c00217 	ldw	r3,8(sp)
 40058ec:	20a0b03a 	or	r16,r4,r2
 40058f0:	d9c00517 	ldw	r7,20(sp)
 40058f4:	da000417 	ldw	r8,16(sp)
 40058f8:	8480062e 	bgeu	r16,r18,4005914 <__divdf3+0x5b8>
 40058fc:	85a1883a 	add	r16,r16,r22
 4005900:	40bfffc4 	addi	r2,r8,-1
 4005904:	8580ac36 	bltu	r16,r22,4005bb8 <__divdf3+0x85c>
 4005908:	8480ab2e 	bgeu	r16,r18,4005bb8 <__divdf3+0x85c>
 400590c:	423fff84 	addi	r8,r8,-2
 4005910:	85a1883a 	add	r16,r16,r22
 4005914:	3804943a 	slli	r2,r7,16
 4005918:	84a1c83a 	sub	r16,r16,r18
 400591c:	e009883a 	mov	r4,fp
 4005920:	1228b03a 	or	r20,r2,r8
 4005924:	a1ffffcc 	andi	r7,r20,65535
 4005928:	a024d43a 	srli	r18,r20,16
 400592c:	380b883a 	mov	r5,r7
 4005930:	d8c00215 	stw	r3,8(sp)
 4005934:	d9c00515 	stw	r7,20(sp)
 4005938:	40073ec0 	call	40073ec <__mulsi3>
 400593c:	900b883a 	mov	r5,r18
 4005940:	e009883a 	mov	r4,fp
 4005944:	102b883a 	mov	r21,r2
 4005948:	40073ec0 	call	40073ec <__mulsi3>
 400594c:	900b883a 	mov	r5,r18
 4005950:	b809883a 	mov	r4,r23
 4005954:	1039883a 	mov	fp,r2
 4005958:	40073ec0 	call	40073ec <__mulsi3>
 400595c:	d9c00517 	ldw	r7,20(sp)
 4005960:	b80b883a 	mov	r5,r23
 4005964:	1025883a 	mov	r18,r2
 4005968:	3809883a 	mov	r4,r7
 400596c:	40073ec0 	call	40073ec <__mulsi3>
 4005970:	a808d43a 	srli	r4,r21,16
 4005974:	1705883a 	add	r2,r2,fp
 4005978:	d8c00217 	ldw	r3,8(sp)
 400597c:	2085883a 	add	r2,r4,r2
 4005980:	1700022e 	bgeu	r2,fp,400598c <__divdf3+0x630>
 4005984:	01000074 	movhi	r4,1
 4005988:	9125883a 	add	r18,r18,r4
 400598c:	1008d43a 	srli	r4,r2,16
 4005990:	1004943a 	slli	r2,r2,16
 4005994:	ad7fffcc 	andi	r21,r21,65535
 4005998:	2489883a 	add	r4,r4,r18
 400599c:	1545883a 	add	r2,r2,r21
 40059a0:	81003836 	bltu	r16,r4,4005a84 <__divdf3+0x728>
 40059a4:	81003626 	beq	r16,r4,4005a80 <__divdf3+0x724>
 40059a8:	a5000054 	ori	r20,r20,1
 40059ac:	1880ffc4 	addi	r2,r3,1023
 40059b0:	00bf2e0e 	bge	zero,r2,400566c <__alt_data_end+0xfc00566c>
 40059b4:	a10001cc 	andi	r4,r20,7
 40059b8:	20000726 	beq	r4,zero,40059d8 <__divdf3+0x67c>
 40059bc:	a10003cc 	andi	r4,r20,15
 40059c0:	01400104 	movi	r5,4
 40059c4:	21400426 	beq	r4,r5,40059d8 <__divdf3+0x67c>
 40059c8:	a149883a 	add	r4,r20,r5
 40059cc:	2529803a 	cmpltu	r20,r4,r20
 40059d0:	8d23883a 	add	r17,r17,r20
 40059d4:	2029883a 	mov	r20,r4
 40059d8:	8900402c 	andhi	r4,r17,256
 40059dc:	20000426 	beq	r4,zero,40059f0 <__divdf3+0x694>
 40059e0:	18810004 	addi	r2,r3,1024
 40059e4:	00ffc034 	movhi	r3,65280
 40059e8:	18ffffc4 	addi	r3,r3,-1
 40059ec:	88e2703a 	and	r17,r17,r3
 40059f0:	00c1ff84 	movi	r3,2046
 40059f4:	18beb416 	blt	r3,r2,40054c8 <__alt_data_end+0xfc0054c8>
 40059f8:	a028d0fa 	srli	r20,r20,3
 40059fc:	882a977a 	slli	r21,r17,29
 4005a00:	8820927a 	slli	r16,r17,9
 4005a04:	1081ffcc 	andi	r2,r2,2047
 4005a08:	ad2ab03a 	or	r21,r21,r20
 4005a0c:	8020d33a 	srli	r16,r16,12
 4005a10:	9900004c 	andi	r4,r19,1
 4005a14:	003eb006 	br	40054d8 <__alt_data_end+0xfc0054d8>
 4005a18:	8080022c 	andhi	r2,r16,8
 4005a1c:	10001226 	beq	r2,zero,4005a68 <__divdf3+0x70c>
 4005a20:	8880022c 	andhi	r2,r17,8
 4005a24:	1000101e 	bne	r2,zero,4005a68 <__divdf3+0x70c>
 4005a28:	00800434 	movhi	r2,16
 4005a2c:	8c000234 	orhi	r16,r17,8
 4005a30:	10bfffc4 	addi	r2,r2,-1
 4005a34:	b809883a 	mov	r4,r23
 4005a38:	80a0703a 	and	r16,r16,r2
 4005a3c:	a02b883a 	mov	r21,r20
 4005a40:	003f0806 	br	4005664 <__alt_data_end+0xfc005664>
 4005a44:	008000c4 	movi	r2,3
 4005a48:	3880b126 	beq	r7,r2,4005d10 <__divdf3+0x9b4>
 4005a4c:	00800044 	movi	r2,1
 4005a50:	38805b1e 	bne	r7,r2,4005bc0 <__divdf3+0x864>
 4005a54:	e009883a 	mov	r4,fp
 4005a58:	0005883a 	mov	r2,zero
 4005a5c:	0021883a 	mov	r16,zero
 4005a60:	002b883a 	mov	r21,zero
 4005a64:	003e9c06 	br	40054d8 <__alt_data_end+0xfc0054d8>
 4005a68:	00800434 	movhi	r2,16
 4005a6c:	84000234 	orhi	r16,r16,8
 4005a70:	10bfffc4 	addi	r2,r2,-1
 4005a74:	b009883a 	mov	r4,r22
 4005a78:	80a0703a 	and	r16,r16,r2
 4005a7c:	003ef906 	br	4005664 <__alt_data_end+0xfc005664>
 4005a80:	103fca26 	beq	r2,zero,40059ac <__alt_data_end+0xfc0059ac>
 4005a84:	b421883a 	add	r16,r22,r16
 4005a88:	a17fffc4 	addi	r5,r20,-1
 4005a8c:	8580422e 	bgeu	r16,r22,4005b98 <__divdf3+0x83c>
 4005a90:	2829883a 	mov	r20,r5
 4005a94:	813fc41e 	bne	r16,r4,40059a8 <__alt_data_end+0xfc0059a8>
 4005a98:	d9800017 	ldw	r6,0(sp)
 4005a9c:	30bfc21e 	bne	r6,r2,40059a8 <__alt_data_end+0xfc0059a8>
 4005aa0:	003fc206 	br	40059ac <__alt_data_end+0xfc0059ac>
 4005aa4:	143ff604 	addi	r16,r2,-40
 4005aa8:	8c20983a 	sll	r16,r17,r16
 4005aac:	002b883a 	mov	r21,zero
 4005ab0:	003eb406 	br	4005584 <__alt_data_end+0xfc005584>
 4005ab4:	d9800215 	stw	r6,8(sp)
 4005ab8:	d9c00515 	stw	r7,20(sp)
 4005abc:	da000415 	stw	r8,16(sp)
 4005ac0:	40071d40 	call	40071d4 <__clzsi2>
 4005ac4:	10800804 	addi	r2,r2,32
 4005ac8:	da000417 	ldw	r8,16(sp)
 4005acc:	d9c00517 	ldw	r7,20(sp)
 4005ad0:	d9800217 	ldw	r6,8(sp)
 4005ad4:	003ea106 	br	400555c <__alt_data_end+0xfc00555c>
 4005ad8:	147ff604 	addi	r17,r2,-40
 4005adc:	3462983a 	sll	r17,r6,r17
 4005ae0:	0029883a 	mov	r20,zero
 4005ae4:	003ec906 	br	400560c <__alt_data_end+0xfc00560c>
 4005ae8:	3009883a 	mov	r4,r6
 4005aec:	d9400115 	stw	r5,4(sp)
 4005af0:	d9800215 	stw	r6,8(sp)
 4005af4:	da000415 	stw	r8,16(sp)
 4005af8:	da400315 	stw	r9,12(sp)
 4005afc:	40071d40 	call	40071d4 <__clzsi2>
 4005b00:	10800804 	addi	r2,r2,32
 4005b04:	da400317 	ldw	r9,12(sp)
 4005b08:	da000417 	ldw	r8,16(sp)
 4005b0c:	d9800217 	ldw	r6,8(sp)
 4005b10:	d9400117 	ldw	r5,4(sp)
 4005b14:	003eb306 	br	40055e4 <__alt_data_end+0xfc0055e4>
 4005b18:	d9800017 	ldw	r6,0(sp)
 4005b1c:	a9ab883a 	add	r21,r21,r6
 4005b20:	a98b803a 	cmpltu	r5,r21,r6
 4005b24:	2d8b883a 	add	r5,r5,r22
 4005b28:	2a11883a 	add	r8,r5,r8
 4005b2c:	897fffc4 	addi	r5,r17,-1
 4005b30:	b2000c2e 	bgeu	r22,r8,4005b64 <__divdf3+0x808>
 4005b34:	41003f36 	bltu	r8,r4,4005c34 <__divdf3+0x8d8>
 4005b38:	22006c26 	beq	r4,r8,4005cec <__divdf3+0x990>
 4005b3c:	4109c83a 	sub	r4,r8,r4
 4005b40:	2823883a 	mov	r17,r5
 4005b44:	003f3b06 	br	4005834 <__alt_data_end+0xfc005834>
 4005b48:	ad3ed336 	bltu	r21,r20,4005698 <__alt_data_end+0xfc005698>
 4005b4c:	a804d07a 	srli	r2,r21,1
 4005b50:	802e97fa 	slli	r23,r16,31
 4005b54:	a82a97fa 	slli	r21,r21,31
 4005b58:	8020d07a 	srli	r16,r16,1
 4005b5c:	b8aeb03a 	or	r23,r23,r2
 4005b60:	003ed006 	br	40056a4 <__alt_data_end+0xfc0056a4>
 4005b64:	b23ff51e 	bne	r22,r8,4005b3c <__alt_data_end+0xfc005b3c>
 4005b68:	d9800017 	ldw	r6,0(sp)
 4005b6c:	a9bff12e 	bgeu	r21,r6,4005b34 <__alt_data_end+0xfc005b34>
 4005b70:	b109c83a 	sub	r4,r22,r4
 4005b74:	2823883a 	mov	r17,r5
 4005b78:	003f2e06 	br	4005834 <__alt_data_end+0xfc005834>
 4005b7c:	2021883a 	mov	r16,r4
 4005b80:	003eff06 	br	4005780 <__alt_data_end+0xfc005780>
 4005b84:	2023883a 	mov	r17,r4
 4005b88:	003ee406 	br	400571c <__alt_data_end+0xfc00571c>
 4005b8c:	a8bfe236 	bltu	r21,r2,4005b18 <__alt_data_end+0xfc005b18>
 4005b90:	0009883a 	mov	r4,zero
 4005b94:	003f2706 	br	4005834 <__alt_data_end+0xfc005834>
 4005b98:	81002d36 	bltu	r16,r4,4005c50 <__divdf3+0x8f4>
 4005b9c:	24005626 	beq	r4,r16,4005cf8 <__divdf3+0x99c>
 4005ba0:	2829883a 	mov	r20,r5
 4005ba4:	003f8006 	br	40059a8 <__alt_data_end+0xfc0059a8>
 4005ba8:	053fffc4 	movi	r20,-1
 4005bac:	003f7f06 	br	40059ac <__alt_data_end+0xfc0059ac>
 4005bb0:	200f883a 	mov	r7,r4
 4005bb4:	003f3c06 	br	40058a8 <__alt_data_end+0xfc0058a8>
 4005bb8:	1011883a 	mov	r8,r2
 4005bbc:	003f5506 	br	4005914 <__alt_data_end+0xfc005914>
 4005bc0:	e027883a 	mov	r19,fp
 4005bc4:	003f7906 	br	40059ac <__alt_data_end+0xfc0059ac>
 4005bc8:	010007c4 	movi	r4,31
 4005bcc:	20c02816 	blt	r4,r3,4005c70 <__divdf3+0x914>
 4005bd0:	00800804 	movi	r2,32
 4005bd4:	10c5c83a 	sub	r2,r2,r3
 4005bd8:	888a983a 	sll	r5,r17,r2
 4005bdc:	a0c8d83a 	srl	r4,r20,r3
 4005be0:	a084983a 	sll	r2,r20,r2
 4005be4:	88e2d83a 	srl	r17,r17,r3
 4005be8:	2906b03a 	or	r3,r5,r4
 4005bec:	1004c03a 	cmpne	r2,r2,zero
 4005bf0:	1886b03a 	or	r3,r3,r2
 4005bf4:	188001cc 	andi	r2,r3,7
 4005bf8:	10000726 	beq	r2,zero,4005c18 <__divdf3+0x8bc>
 4005bfc:	188003cc 	andi	r2,r3,15
 4005c00:	01000104 	movi	r4,4
 4005c04:	11000426 	beq	r2,r4,4005c18 <__divdf3+0x8bc>
 4005c08:	1805883a 	mov	r2,r3
 4005c0c:	10c00104 	addi	r3,r2,4
 4005c10:	1885803a 	cmpltu	r2,r3,r2
 4005c14:	88a3883a 	add	r17,r17,r2
 4005c18:	8880202c 	andhi	r2,r17,128
 4005c1c:	10002926 	beq	r2,zero,4005cc4 <__divdf3+0x968>
 4005c20:	9900004c 	andi	r4,r19,1
 4005c24:	00800044 	movi	r2,1
 4005c28:	0021883a 	mov	r16,zero
 4005c2c:	002b883a 	mov	r21,zero
 4005c30:	003e2906 	br	40054d8 <__alt_data_end+0xfc0054d8>
 4005c34:	d9800017 	ldw	r6,0(sp)
 4005c38:	8c7fff84 	addi	r17,r17,-2
 4005c3c:	a9ab883a 	add	r21,r21,r6
 4005c40:	a98b803a 	cmpltu	r5,r21,r6
 4005c44:	2d8b883a 	add	r5,r5,r22
 4005c48:	2a11883a 	add	r8,r5,r8
 4005c4c:	003ef806 	br	4005830 <__alt_data_end+0xfc005830>
 4005c50:	d9800017 	ldw	r6,0(sp)
 4005c54:	318f883a 	add	r7,r6,r6
 4005c58:	398b803a 	cmpltu	r5,r7,r6
 4005c5c:	2d8d883a 	add	r6,r5,r22
 4005c60:	81a1883a 	add	r16,r16,r6
 4005c64:	a17fff84 	addi	r5,r20,-2
 4005c68:	d9c00015 	stw	r7,0(sp)
 4005c6c:	003f8806 	br	4005a90 <__alt_data_end+0xfc005a90>
 4005c70:	013ff844 	movi	r4,-31
 4005c74:	2085c83a 	sub	r2,r4,r2
 4005c78:	8888d83a 	srl	r4,r17,r2
 4005c7c:	00800804 	movi	r2,32
 4005c80:	18802126 	beq	r3,r2,4005d08 <__divdf3+0x9ac>
 4005c84:	04001004 	movi	r16,64
 4005c88:	80c7c83a 	sub	r3,r16,r3
 4005c8c:	88e0983a 	sll	r16,r17,r3
 4005c90:	8504b03a 	or	r2,r16,r20
 4005c94:	1004c03a 	cmpne	r2,r2,zero
 4005c98:	2084b03a 	or	r2,r4,r2
 4005c9c:	144001cc 	andi	r17,r2,7
 4005ca0:	88000d1e 	bne	r17,zero,4005cd8 <__divdf3+0x97c>
 4005ca4:	0021883a 	mov	r16,zero
 4005ca8:	102ad0fa 	srli	r21,r2,3
 4005cac:	9900004c 	andi	r4,r19,1
 4005cb0:	0005883a 	mov	r2,zero
 4005cb4:	ac6ab03a 	or	r21,r21,r17
 4005cb8:	003e0706 	br	40054d8 <__alt_data_end+0xfc0054d8>
 4005cbc:	1007883a 	mov	r3,r2
 4005cc0:	0023883a 	mov	r17,zero
 4005cc4:	8820927a 	slli	r16,r17,9
 4005cc8:	1805883a 	mov	r2,r3
 4005ccc:	8822977a 	slli	r17,r17,29
 4005cd0:	8020d33a 	srli	r16,r16,12
 4005cd4:	003ff406 	br	4005ca8 <__alt_data_end+0xfc005ca8>
 4005cd8:	10c003cc 	andi	r3,r2,15
 4005cdc:	01000104 	movi	r4,4
 4005ce0:	193ff626 	beq	r3,r4,4005cbc <__alt_data_end+0xfc005cbc>
 4005ce4:	0023883a 	mov	r17,zero
 4005ce8:	003fc806 	br	4005c0c <__alt_data_end+0xfc005c0c>
 4005cec:	a8bfd136 	bltu	r21,r2,4005c34 <__alt_data_end+0xfc005c34>
 4005cf0:	2823883a 	mov	r17,r5
 4005cf4:	003fa606 	br	4005b90 <__alt_data_end+0xfc005b90>
 4005cf8:	d9800017 	ldw	r6,0(sp)
 4005cfc:	30bfd436 	bltu	r6,r2,4005c50 <__alt_data_end+0xfc005c50>
 4005d00:	2829883a 	mov	r20,r5
 4005d04:	003f6406 	br	4005a98 <__alt_data_end+0xfc005a98>
 4005d08:	0021883a 	mov	r16,zero
 4005d0c:	003fe006 	br	4005c90 <__alt_data_end+0xfc005c90>
 4005d10:	00800434 	movhi	r2,16
 4005d14:	8c000234 	orhi	r16,r17,8
 4005d18:	10bfffc4 	addi	r2,r2,-1
 4005d1c:	e009883a 	mov	r4,fp
 4005d20:	80a0703a 	and	r16,r16,r2
 4005d24:	a02b883a 	mov	r21,r20
 4005d28:	003e4e06 	br	4005664 <__alt_data_end+0xfc005664>

04005d2c <__eqdf2>:
 4005d2c:	2804d53a 	srli	r2,r5,20
 4005d30:	3806d53a 	srli	r3,r7,20
 4005d34:	02000434 	movhi	r8,16
 4005d38:	423fffc4 	addi	r8,r8,-1
 4005d3c:	1081ffcc 	andi	r2,r2,2047
 4005d40:	0281ffc4 	movi	r10,2047
 4005d44:	2a12703a 	and	r9,r5,r8
 4005d48:	18c1ffcc 	andi	r3,r3,2047
 4005d4c:	3a10703a 	and	r8,r7,r8
 4005d50:	280ad7fa 	srli	r5,r5,31
 4005d54:	380ed7fa 	srli	r7,r7,31
 4005d58:	12801026 	beq	r2,r10,4005d9c <__eqdf2+0x70>
 4005d5c:	0281ffc4 	movi	r10,2047
 4005d60:	1a800a26 	beq	r3,r10,4005d8c <__eqdf2+0x60>
 4005d64:	10c00226 	beq	r2,r3,4005d70 <__eqdf2+0x44>
 4005d68:	00800044 	movi	r2,1
 4005d6c:	f800283a 	ret
 4005d70:	4a3ffd1e 	bne	r9,r8,4005d68 <__alt_data_end+0xfc005d68>
 4005d74:	21bffc1e 	bne	r4,r6,4005d68 <__alt_data_end+0xfc005d68>
 4005d78:	29c00c26 	beq	r5,r7,4005dac <__eqdf2+0x80>
 4005d7c:	103ffa1e 	bne	r2,zero,4005d68 <__alt_data_end+0xfc005d68>
 4005d80:	2244b03a 	or	r2,r4,r9
 4005d84:	1004c03a 	cmpne	r2,r2,zero
 4005d88:	f800283a 	ret
 4005d8c:	3214b03a 	or	r10,r6,r8
 4005d90:	503ff426 	beq	r10,zero,4005d64 <__alt_data_end+0xfc005d64>
 4005d94:	00800044 	movi	r2,1
 4005d98:	f800283a 	ret
 4005d9c:	2254b03a 	or	r10,r4,r9
 4005da0:	503fee26 	beq	r10,zero,4005d5c <__alt_data_end+0xfc005d5c>
 4005da4:	00800044 	movi	r2,1
 4005da8:	f800283a 	ret
 4005dac:	0005883a 	mov	r2,zero
 4005db0:	f800283a 	ret

04005db4 <__muldf3>:
 4005db4:	deffee04 	addi	sp,sp,-72
 4005db8:	dd000c15 	stw	r20,48(sp)
 4005dbc:	2828d53a 	srli	r20,r5,20
 4005dc0:	ddc00f15 	stw	r23,60(sp)
 4005dc4:	282ed7fa 	srli	r23,r5,31
 4005dc8:	dc000815 	stw	r16,32(sp)
 4005dcc:	04000434 	movhi	r16,16
 4005dd0:	dcc00b15 	stw	r19,44(sp)
 4005dd4:	843fffc4 	addi	r16,r16,-1
 4005dd8:	dfc01115 	stw	ra,68(sp)
 4005ddc:	df001015 	stw	fp,64(sp)
 4005de0:	dd800e15 	stw	r22,56(sp)
 4005de4:	dd400d15 	stw	r21,52(sp)
 4005de8:	dc800a15 	stw	r18,40(sp)
 4005dec:	dc400915 	stw	r17,36(sp)
 4005df0:	a501ffcc 	andi	r20,r20,2047
 4005df4:	2c20703a 	and	r16,r5,r16
 4005df8:	b827883a 	mov	r19,r23
 4005dfc:	ba403fcc 	andi	r9,r23,255
 4005e00:	a0006026 	beq	r20,zero,4005f84 <__muldf3+0x1d0>
 4005e04:	0081ffc4 	movi	r2,2047
 4005e08:	202d883a 	mov	r22,r4
 4005e0c:	a0803626 	beq	r20,r2,4005ee8 <__muldf3+0x134>
 4005e10:	84000434 	orhi	r16,r16,16
 4005e14:	200ad77a 	srli	r5,r4,29
 4005e18:	800490fa 	slli	r2,r16,3
 4005e1c:	202c90fa 	slli	r22,r4,3
 4005e20:	a53f0044 	addi	r20,r20,-1023
 4005e24:	28a0b03a 	or	r16,r5,r2
 4005e28:	002b883a 	mov	r21,zero
 4005e2c:	000b883a 	mov	r5,zero
 4005e30:	3804d53a 	srli	r2,r7,20
 4005e34:	3838d7fa 	srli	fp,r7,31
 4005e38:	04400434 	movhi	r17,16
 4005e3c:	8c7fffc4 	addi	r17,r17,-1
 4005e40:	1081ffcc 	andi	r2,r2,2047
 4005e44:	3025883a 	mov	r18,r6
 4005e48:	3c62703a 	and	r17,r7,r17
 4005e4c:	e2803fcc 	andi	r10,fp,255
 4005e50:	10006d26 	beq	r2,zero,4006008 <__muldf3+0x254>
 4005e54:	00c1ffc4 	movi	r3,2047
 4005e58:	10c06526 	beq	r2,r3,4005ff0 <__muldf3+0x23c>
 4005e5c:	8c400434 	orhi	r17,r17,16
 4005e60:	300ed77a 	srli	r7,r6,29
 4005e64:	880690fa 	slli	r3,r17,3
 4005e68:	302490fa 	slli	r18,r6,3
 4005e6c:	10bf0044 	addi	r2,r2,-1023
 4005e70:	38e2b03a 	or	r17,r7,r3
 4005e74:	000f883a 	mov	r7,zero
 4005e78:	a087883a 	add	r3,r20,r2
 4005e7c:	010003c4 	movi	r4,15
 4005e80:	3d44b03a 	or	r2,r7,r21
 4005e84:	e5ccf03a 	xor	r6,fp,r23
 4005e88:	1a000044 	addi	r8,r3,1
 4005e8c:	20809b36 	bltu	r4,r2,40060fc <__muldf3+0x348>
 4005e90:	100490ba 	slli	r2,r2,2
 4005e94:	01010034 	movhi	r4,1024
 4005e98:	2117aa04 	addi	r4,r4,24232
 4005e9c:	1105883a 	add	r2,r2,r4
 4005ea0:	10800017 	ldw	r2,0(r2)
 4005ea4:	1000683a 	jmp	r2
 4005ea8:	040060fc 	xorhi	r16,zero,387
 4005eac:	04005f08 	cmpgei	r16,zero,380
 4005eb0:	04005f08 	cmpgei	r16,zero,380
 4005eb4:	04005f04 	movi	r16,380
 4005eb8:	040060d8 	cmpnei	r16,zero,387
 4005ebc:	040060d8 	cmpnei	r16,zero,387
 4005ec0:	040060c0 	call	40060c <__reset-0x3bff9f4>
 4005ec4:	04005f04 	movi	r16,380
 4005ec8:	040060d8 	cmpnei	r16,zero,387
 4005ecc:	040060c0 	call	40060c <__reset-0x3bff9f4>
 4005ed0:	040060d8 	cmpnei	r16,zero,387
 4005ed4:	04005f04 	movi	r16,380
 4005ed8:	040060e8 	cmpgeui	r16,zero,387
 4005edc:	040060e8 	cmpgeui	r16,zero,387
 4005ee0:	040060e8 	cmpgeui	r16,zero,387
 4005ee4:	04006448 	cmpgei	r16,zero,401
 4005ee8:	2404b03a 	or	r2,r4,r16
 4005eec:	1000711e 	bne	r2,zero,40060b4 <__muldf3+0x300>
 4005ef0:	05400204 	movi	r21,8
 4005ef4:	0021883a 	mov	r16,zero
 4005ef8:	002d883a 	mov	r22,zero
 4005efc:	01400084 	movi	r5,2
 4005f00:	003fcb06 	br	4005e30 <__alt_data_end+0xfc005e30>
 4005f04:	500d883a 	mov	r6,r10
 4005f08:	00800084 	movi	r2,2
 4005f0c:	38805926 	beq	r7,r2,4006074 <__muldf3+0x2c0>
 4005f10:	008000c4 	movi	r2,3
 4005f14:	3881bb26 	beq	r7,r2,4006604 <__muldf3+0x850>
 4005f18:	00800044 	movi	r2,1
 4005f1c:	3881961e 	bne	r7,r2,4006578 <__muldf3+0x7c4>
 4005f20:	3027883a 	mov	r19,r6
 4005f24:	0005883a 	mov	r2,zero
 4005f28:	0021883a 	mov	r16,zero
 4005f2c:	002d883a 	mov	r22,zero
 4005f30:	1004953a 	slli	r2,r2,20
 4005f34:	98c03fcc 	andi	r3,r19,255
 4005f38:	04400434 	movhi	r17,16
 4005f3c:	8c7fffc4 	addi	r17,r17,-1
 4005f40:	180697fa 	slli	r3,r3,31
 4005f44:	8460703a 	and	r16,r16,r17
 4005f48:	80a0b03a 	or	r16,r16,r2
 4005f4c:	80c6b03a 	or	r3,r16,r3
 4005f50:	b005883a 	mov	r2,r22
 4005f54:	dfc01117 	ldw	ra,68(sp)
 4005f58:	df001017 	ldw	fp,64(sp)
 4005f5c:	ddc00f17 	ldw	r23,60(sp)
 4005f60:	dd800e17 	ldw	r22,56(sp)
 4005f64:	dd400d17 	ldw	r21,52(sp)
 4005f68:	dd000c17 	ldw	r20,48(sp)
 4005f6c:	dcc00b17 	ldw	r19,44(sp)
 4005f70:	dc800a17 	ldw	r18,40(sp)
 4005f74:	dc400917 	ldw	r17,36(sp)
 4005f78:	dc000817 	ldw	r16,32(sp)
 4005f7c:	dec01204 	addi	sp,sp,72
 4005f80:	f800283a 	ret
 4005f84:	2404b03a 	or	r2,r4,r16
 4005f88:	202b883a 	mov	r21,r4
 4005f8c:	10004426 	beq	r2,zero,40060a0 <__muldf3+0x2ec>
 4005f90:	80015126 	beq	r16,zero,40064d8 <__muldf3+0x724>
 4005f94:	8009883a 	mov	r4,r16
 4005f98:	d9800715 	stw	r6,28(sp)
 4005f9c:	d9c00215 	stw	r7,8(sp)
 4005fa0:	da400415 	stw	r9,16(sp)
 4005fa4:	40071d40 	call	40071d4 <__clzsi2>
 4005fa8:	d9800717 	ldw	r6,28(sp)
 4005fac:	d9c00217 	ldw	r7,8(sp)
 4005fb0:	da400417 	ldw	r9,16(sp)
 4005fb4:	113ffd44 	addi	r4,r2,-11
 4005fb8:	00c00704 	movi	r3,28
 4005fbc:	19014216 	blt	r3,r4,40064c8 <__muldf3+0x714>
 4005fc0:	00c00744 	movi	r3,29
 4005fc4:	15bffe04 	addi	r22,r2,-8
 4005fc8:	1907c83a 	sub	r3,r3,r4
 4005fcc:	85a0983a 	sll	r16,r16,r22
 4005fd0:	a8c6d83a 	srl	r3,r21,r3
 4005fd4:	adac983a 	sll	r22,r21,r22
 4005fd8:	1c20b03a 	or	r16,r3,r16
 4005fdc:	1080fcc4 	addi	r2,r2,1011
 4005fe0:	00a9c83a 	sub	r20,zero,r2
 4005fe4:	002b883a 	mov	r21,zero
 4005fe8:	000b883a 	mov	r5,zero
 4005fec:	003f9006 	br	4005e30 <__alt_data_end+0xfc005e30>
 4005ff0:	3446b03a 	or	r3,r6,r17
 4005ff4:	1800281e 	bne	r3,zero,4006098 <__muldf3+0x2e4>
 4005ff8:	0023883a 	mov	r17,zero
 4005ffc:	0025883a 	mov	r18,zero
 4006000:	01c00084 	movi	r7,2
 4006004:	003f9c06 	br	4005e78 <__alt_data_end+0xfc005e78>
 4006008:	3446b03a 	or	r3,r6,r17
 400600c:	18001e26 	beq	r3,zero,4006088 <__muldf3+0x2d4>
 4006010:	88012126 	beq	r17,zero,4006498 <__muldf3+0x6e4>
 4006014:	8809883a 	mov	r4,r17
 4006018:	d9400215 	stw	r5,8(sp)
 400601c:	d9800715 	stw	r6,28(sp)
 4006020:	da400415 	stw	r9,16(sp)
 4006024:	da800315 	stw	r10,12(sp)
 4006028:	40071d40 	call	40071d4 <__clzsi2>
 400602c:	d9400217 	ldw	r5,8(sp)
 4006030:	d9800717 	ldw	r6,28(sp)
 4006034:	da400417 	ldw	r9,16(sp)
 4006038:	da800317 	ldw	r10,12(sp)
 400603c:	113ffd44 	addi	r4,r2,-11
 4006040:	00c00704 	movi	r3,28
 4006044:	19011016 	blt	r3,r4,4006488 <__muldf3+0x6d4>
 4006048:	00c00744 	movi	r3,29
 400604c:	14bffe04 	addi	r18,r2,-8
 4006050:	1907c83a 	sub	r3,r3,r4
 4006054:	8ca2983a 	sll	r17,r17,r18
 4006058:	30c6d83a 	srl	r3,r6,r3
 400605c:	34a4983a 	sll	r18,r6,r18
 4006060:	1c62b03a 	or	r17,r3,r17
 4006064:	1080fcc4 	addi	r2,r2,1011
 4006068:	0085c83a 	sub	r2,zero,r2
 400606c:	000f883a 	mov	r7,zero
 4006070:	003f8106 	br	4005e78 <__alt_data_end+0xfc005e78>
 4006074:	3027883a 	mov	r19,r6
 4006078:	0081ffc4 	movi	r2,2047
 400607c:	0021883a 	mov	r16,zero
 4006080:	002d883a 	mov	r22,zero
 4006084:	003faa06 	br	4005f30 <__alt_data_end+0xfc005f30>
 4006088:	0023883a 	mov	r17,zero
 400608c:	0025883a 	mov	r18,zero
 4006090:	01c00044 	movi	r7,1
 4006094:	003f7806 	br	4005e78 <__alt_data_end+0xfc005e78>
 4006098:	01c000c4 	movi	r7,3
 400609c:	003f7606 	br	4005e78 <__alt_data_end+0xfc005e78>
 40060a0:	05400104 	movi	r21,4
 40060a4:	0021883a 	mov	r16,zero
 40060a8:	002d883a 	mov	r22,zero
 40060ac:	01400044 	movi	r5,1
 40060b0:	003f5f06 	br	4005e30 <__alt_data_end+0xfc005e30>
 40060b4:	05400304 	movi	r21,12
 40060b8:	014000c4 	movi	r5,3
 40060bc:	003f5c06 	br	4005e30 <__alt_data_end+0xfc005e30>
 40060c0:	04000434 	movhi	r16,16
 40060c4:	0027883a 	mov	r19,zero
 40060c8:	843fffc4 	addi	r16,r16,-1
 40060cc:	05bfffc4 	movi	r22,-1
 40060d0:	0081ffc4 	movi	r2,2047
 40060d4:	003f9606 	br	4005f30 <__alt_data_end+0xfc005f30>
 40060d8:	8023883a 	mov	r17,r16
 40060dc:	b025883a 	mov	r18,r22
 40060e0:	280f883a 	mov	r7,r5
 40060e4:	003f8806 	br	4005f08 <__alt_data_end+0xfc005f08>
 40060e8:	8023883a 	mov	r17,r16
 40060ec:	b025883a 	mov	r18,r22
 40060f0:	480d883a 	mov	r6,r9
 40060f4:	280f883a 	mov	r7,r5
 40060f8:	003f8306 	br	4005f08 <__alt_data_end+0xfc005f08>
 40060fc:	b026d43a 	srli	r19,r22,16
 4006100:	902ed43a 	srli	r23,r18,16
 4006104:	b5bfffcc 	andi	r22,r22,65535
 4006108:	94bfffcc 	andi	r18,r18,65535
 400610c:	b00b883a 	mov	r5,r22
 4006110:	9009883a 	mov	r4,r18
 4006114:	d8c00515 	stw	r3,20(sp)
 4006118:	d9800715 	stw	r6,28(sp)
 400611c:	da000615 	stw	r8,24(sp)
 4006120:	40073ec0 	call	40073ec <__mulsi3>
 4006124:	980b883a 	mov	r5,r19
 4006128:	9009883a 	mov	r4,r18
 400612c:	1029883a 	mov	r20,r2
 4006130:	40073ec0 	call	40073ec <__mulsi3>
 4006134:	b80b883a 	mov	r5,r23
 4006138:	9809883a 	mov	r4,r19
 400613c:	102b883a 	mov	r21,r2
 4006140:	40073ec0 	call	40073ec <__mulsi3>
 4006144:	b809883a 	mov	r4,r23
 4006148:	b00b883a 	mov	r5,r22
 400614c:	1039883a 	mov	fp,r2
 4006150:	40073ec0 	call	40073ec <__mulsi3>
 4006154:	a008d43a 	srli	r4,r20,16
 4006158:	1545883a 	add	r2,r2,r21
 400615c:	d8c00517 	ldw	r3,20(sp)
 4006160:	2085883a 	add	r2,r4,r2
 4006164:	d9800717 	ldw	r6,28(sp)
 4006168:	da000617 	ldw	r8,24(sp)
 400616c:	1540022e 	bgeu	r2,r21,4006178 <__muldf3+0x3c4>
 4006170:	01000074 	movhi	r4,1
 4006174:	e139883a 	add	fp,fp,r4
 4006178:	100e943a 	slli	r7,r2,16
 400617c:	1004d43a 	srli	r2,r2,16
 4006180:	882ad43a 	srli	r21,r17,16
 4006184:	a53fffcc 	andi	r20,r20,65535
 4006188:	8c7fffcc 	andi	r17,r17,65535
 400618c:	3d29883a 	add	r20,r7,r20
 4006190:	b00b883a 	mov	r5,r22
 4006194:	8809883a 	mov	r4,r17
 4006198:	d8c00515 	stw	r3,20(sp)
 400619c:	d9800715 	stw	r6,28(sp)
 40061a0:	da000615 	stw	r8,24(sp)
 40061a4:	dd000115 	stw	r20,4(sp)
 40061a8:	d8800015 	stw	r2,0(sp)
 40061ac:	40073ec0 	call	40073ec <__mulsi3>
 40061b0:	980b883a 	mov	r5,r19
 40061b4:	8809883a 	mov	r4,r17
 40061b8:	d8800215 	stw	r2,8(sp)
 40061bc:	40073ec0 	call	40073ec <__mulsi3>
 40061c0:	9809883a 	mov	r4,r19
 40061c4:	a80b883a 	mov	r5,r21
 40061c8:	1029883a 	mov	r20,r2
 40061cc:	40073ec0 	call	40073ec <__mulsi3>
 40061d0:	b00b883a 	mov	r5,r22
 40061d4:	a809883a 	mov	r4,r21
 40061d8:	d8800415 	stw	r2,16(sp)
 40061dc:	40073ec0 	call	40073ec <__mulsi3>
 40061e0:	d9c00217 	ldw	r7,8(sp)
 40061e4:	1505883a 	add	r2,r2,r20
 40061e8:	d8c00517 	ldw	r3,20(sp)
 40061ec:	3826d43a 	srli	r19,r7,16
 40061f0:	d9800717 	ldw	r6,28(sp)
 40061f4:	da000617 	ldw	r8,24(sp)
 40061f8:	9885883a 	add	r2,r19,r2
 40061fc:	da400417 	ldw	r9,16(sp)
 4006200:	1500022e 	bgeu	r2,r20,400620c <__muldf3+0x458>
 4006204:	01000074 	movhi	r4,1
 4006208:	4913883a 	add	r9,r9,r4
 400620c:	1028d43a 	srli	r20,r2,16
 4006210:	1004943a 	slli	r2,r2,16
 4006214:	802cd43a 	srli	r22,r16,16
 4006218:	843fffcc 	andi	r16,r16,65535
 400621c:	3cffffcc 	andi	r19,r7,65535
 4006220:	9009883a 	mov	r4,r18
 4006224:	800b883a 	mov	r5,r16
 4006228:	a269883a 	add	r20,r20,r9
 400622c:	d8c00515 	stw	r3,20(sp)
 4006230:	d9800715 	stw	r6,28(sp)
 4006234:	da000615 	stw	r8,24(sp)
 4006238:	14e7883a 	add	r19,r2,r19
 400623c:	40073ec0 	call	40073ec <__mulsi3>
 4006240:	9009883a 	mov	r4,r18
 4006244:	b00b883a 	mov	r5,r22
 4006248:	d8800315 	stw	r2,12(sp)
 400624c:	40073ec0 	call	40073ec <__mulsi3>
 4006250:	b809883a 	mov	r4,r23
 4006254:	b00b883a 	mov	r5,r22
 4006258:	d8800215 	stw	r2,8(sp)
 400625c:	40073ec0 	call	40073ec <__mulsi3>
 4006260:	b80b883a 	mov	r5,r23
 4006264:	8009883a 	mov	r4,r16
 4006268:	d8800415 	stw	r2,16(sp)
 400626c:	40073ec0 	call	40073ec <__mulsi3>
 4006270:	da800317 	ldw	r10,12(sp)
 4006274:	d9c00217 	ldw	r7,8(sp)
 4006278:	d9000017 	ldw	r4,0(sp)
 400627c:	502ed43a 	srli	r23,r10,16
 4006280:	11c5883a 	add	r2,r2,r7
 4006284:	24e5883a 	add	r18,r4,r19
 4006288:	b885883a 	add	r2,r23,r2
 400628c:	d8c00517 	ldw	r3,20(sp)
 4006290:	d9800717 	ldw	r6,28(sp)
 4006294:	da000617 	ldw	r8,24(sp)
 4006298:	da400417 	ldw	r9,16(sp)
 400629c:	11c0022e 	bgeu	r2,r7,40062a8 <__muldf3+0x4f4>
 40062a0:	01000074 	movhi	r4,1
 40062a4:	4913883a 	add	r9,r9,r4
 40062a8:	100ed43a 	srli	r7,r2,16
 40062ac:	1004943a 	slli	r2,r2,16
 40062b0:	55ffffcc 	andi	r23,r10,65535
 40062b4:	3a53883a 	add	r9,r7,r9
 40062b8:	8809883a 	mov	r4,r17
 40062bc:	800b883a 	mov	r5,r16
 40062c0:	d8c00515 	stw	r3,20(sp)
 40062c4:	d9800715 	stw	r6,28(sp)
 40062c8:	da000615 	stw	r8,24(sp)
 40062cc:	da400415 	stw	r9,16(sp)
 40062d0:	15ef883a 	add	r23,r2,r23
 40062d4:	40073ec0 	call	40073ec <__mulsi3>
 40062d8:	8809883a 	mov	r4,r17
 40062dc:	b00b883a 	mov	r5,r22
 40062e0:	d8800215 	stw	r2,8(sp)
 40062e4:	40073ec0 	call	40073ec <__mulsi3>
 40062e8:	b00b883a 	mov	r5,r22
 40062ec:	a809883a 	mov	r4,r21
 40062f0:	d8800315 	stw	r2,12(sp)
 40062f4:	40073ec0 	call	40073ec <__mulsi3>
 40062f8:	8009883a 	mov	r4,r16
 40062fc:	a80b883a 	mov	r5,r21
 4006300:	1023883a 	mov	r17,r2
 4006304:	40073ec0 	call	40073ec <__mulsi3>
 4006308:	d9c00217 	ldw	r7,8(sp)
 400630c:	da800317 	ldw	r10,12(sp)
 4006310:	d8c00517 	ldw	r3,20(sp)
 4006314:	3808d43a 	srli	r4,r7,16
 4006318:	1285883a 	add	r2,r2,r10
 400631c:	d9800717 	ldw	r6,28(sp)
 4006320:	2085883a 	add	r2,r4,r2
 4006324:	da000617 	ldw	r8,24(sp)
 4006328:	da400417 	ldw	r9,16(sp)
 400632c:	1280022e 	bgeu	r2,r10,4006338 <__muldf3+0x584>
 4006330:	01000074 	movhi	r4,1
 4006334:	8923883a 	add	r17,r17,r4
 4006338:	1008943a 	slli	r4,r2,16
 400633c:	39ffffcc 	andi	r7,r7,65535
 4006340:	e4b9883a 	add	fp,fp,r18
 4006344:	21cf883a 	add	r7,r4,r7
 4006348:	e4e7803a 	cmpltu	r19,fp,r19
 400634c:	3d0f883a 	add	r7,r7,r20
 4006350:	bf39883a 	add	fp,r23,fp
 4006354:	99c9883a 	add	r4,r19,r7
 4006358:	e5ef803a 	cmpltu	r23,fp,r23
 400635c:	490b883a 	add	r5,r9,r4
 4006360:	1004d43a 	srli	r2,r2,16
 4006364:	b965883a 	add	r18,r23,r5
 4006368:	24c9803a 	cmpltu	r4,r4,r19
 400636c:	3d29803a 	cmpltu	r20,r7,r20
 4006370:	a128b03a 	or	r20,r20,r4
 4006374:	95ef803a 	cmpltu	r23,r18,r23
 4006378:	2a53803a 	cmpltu	r9,r5,r9
 400637c:	a0a9883a 	add	r20,r20,r2
 4006380:	4deeb03a 	or	r23,r9,r23
 4006384:	a5ef883a 	add	r23,r20,r23
 4006388:	bc63883a 	add	r17,r23,r17
 400638c:	e004927a 	slli	r2,fp,9
 4006390:	d9000117 	ldw	r4,4(sp)
 4006394:	882e927a 	slli	r23,r17,9
 4006398:	9022d5fa 	srli	r17,r18,23
 400639c:	e038d5fa 	srli	fp,fp,23
 40063a0:	1104b03a 	or	r2,r2,r4
 40063a4:	9024927a 	slli	r18,r18,9
 40063a8:	1004c03a 	cmpne	r2,r2,zero
 40063ac:	bc62b03a 	or	r17,r23,r17
 40063b0:	1738b03a 	or	fp,r2,fp
 40063b4:	8880402c 	andhi	r2,r17,256
 40063b8:	e4a4b03a 	or	r18,fp,r18
 40063bc:	10000726 	beq	r2,zero,40063dc <__muldf3+0x628>
 40063c0:	9006d07a 	srli	r3,r18,1
 40063c4:	880497fa 	slli	r2,r17,31
 40063c8:	9480004c 	andi	r18,r18,1
 40063cc:	8822d07a 	srli	r17,r17,1
 40063d0:	1ca4b03a 	or	r18,r3,r18
 40063d4:	14a4b03a 	or	r18,r2,r18
 40063d8:	4007883a 	mov	r3,r8
 40063dc:	1880ffc4 	addi	r2,r3,1023
 40063e0:	0080460e 	bge	zero,r2,40064fc <__muldf3+0x748>
 40063e4:	910001cc 	andi	r4,r18,7
 40063e8:	20000726 	beq	r4,zero,4006408 <__muldf3+0x654>
 40063ec:	910003cc 	andi	r4,r18,15
 40063f0:	01400104 	movi	r5,4
 40063f4:	21400426 	beq	r4,r5,4006408 <__muldf3+0x654>
 40063f8:	9149883a 	add	r4,r18,r5
 40063fc:	24a5803a 	cmpltu	r18,r4,r18
 4006400:	8ca3883a 	add	r17,r17,r18
 4006404:	2025883a 	mov	r18,r4
 4006408:	8900402c 	andhi	r4,r17,256
 400640c:	20000426 	beq	r4,zero,4006420 <__muldf3+0x66c>
 4006410:	18810004 	addi	r2,r3,1024
 4006414:	00ffc034 	movhi	r3,65280
 4006418:	18ffffc4 	addi	r3,r3,-1
 400641c:	88e2703a 	and	r17,r17,r3
 4006420:	00c1ff84 	movi	r3,2046
 4006424:	18bf1316 	blt	r3,r2,4006074 <__alt_data_end+0xfc006074>
 4006428:	882c977a 	slli	r22,r17,29
 400642c:	9024d0fa 	srli	r18,r18,3
 4006430:	8822927a 	slli	r17,r17,9
 4006434:	1081ffcc 	andi	r2,r2,2047
 4006438:	b4acb03a 	or	r22,r22,r18
 400643c:	8820d33a 	srli	r16,r17,12
 4006440:	3027883a 	mov	r19,r6
 4006444:	003eba06 	br	4005f30 <__alt_data_end+0xfc005f30>
 4006448:	8080022c 	andhi	r2,r16,8
 400644c:	10000926 	beq	r2,zero,4006474 <__muldf3+0x6c0>
 4006450:	8880022c 	andhi	r2,r17,8
 4006454:	1000071e 	bne	r2,zero,4006474 <__muldf3+0x6c0>
 4006458:	00800434 	movhi	r2,16
 400645c:	8c000234 	orhi	r16,r17,8
 4006460:	10bfffc4 	addi	r2,r2,-1
 4006464:	e027883a 	mov	r19,fp
 4006468:	80a0703a 	and	r16,r16,r2
 400646c:	902d883a 	mov	r22,r18
 4006470:	003f1706 	br	40060d0 <__alt_data_end+0xfc0060d0>
 4006474:	00800434 	movhi	r2,16
 4006478:	84000234 	orhi	r16,r16,8
 400647c:	10bfffc4 	addi	r2,r2,-1
 4006480:	80a0703a 	and	r16,r16,r2
 4006484:	003f1206 	br	40060d0 <__alt_data_end+0xfc0060d0>
 4006488:	147ff604 	addi	r17,r2,-40
 400648c:	3462983a 	sll	r17,r6,r17
 4006490:	0025883a 	mov	r18,zero
 4006494:	003ef306 	br	4006064 <__alt_data_end+0xfc006064>
 4006498:	3009883a 	mov	r4,r6
 400649c:	d9400215 	stw	r5,8(sp)
 40064a0:	d9800715 	stw	r6,28(sp)
 40064a4:	da400415 	stw	r9,16(sp)
 40064a8:	da800315 	stw	r10,12(sp)
 40064ac:	40071d40 	call	40071d4 <__clzsi2>
 40064b0:	10800804 	addi	r2,r2,32
 40064b4:	da800317 	ldw	r10,12(sp)
 40064b8:	da400417 	ldw	r9,16(sp)
 40064bc:	d9800717 	ldw	r6,28(sp)
 40064c0:	d9400217 	ldw	r5,8(sp)
 40064c4:	003edd06 	br	400603c <__alt_data_end+0xfc00603c>
 40064c8:	143ff604 	addi	r16,r2,-40
 40064cc:	ac20983a 	sll	r16,r21,r16
 40064d0:	002d883a 	mov	r22,zero
 40064d4:	003ec106 	br	4005fdc <__alt_data_end+0xfc005fdc>
 40064d8:	d9800715 	stw	r6,28(sp)
 40064dc:	d9c00215 	stw	r7,8(sp)
 40064e0:	da400415 	stw	r9,16(sp)
 40064e4:	40071d40 	call	40071d4 <__clzsi2>
 40064e8:	10800804 	addi	r2,r2,32
 40064ec:	da400417 	ldw	r9,16(sp)
 40064f0:	d9c00217 	ldw	r7,8(sp)
 40064f4:	d9800717 	ldw	r6,28(sp)
 40064f8:	003eae06 	br	4005fb4 <__alt_data_end+0xfc005fb4>
 40064fc:	00c00044 	movi	r3,1
 4006500:	1887c83a 	sub	r3,r3,r2
 4006504:	01000e04 	movi	r4,56
 4006508:	20fe8516 	blt	r4,r3,4005f20 <__alt_data_end+0xfc005f20>
 400650c:	010007c4 	movi	r4,31
 4006510:	20c01b16 	blt	r4,r3,4006580 <__muldf3+0x7cc>
 4006514:	00800804 	movi	r2,32
 4006518:	10c5c83a 	sub	r2,r2,r3
 400651c:	888a983a 	sll	r5,r17,r2
 4006520:	90c8d83a 	srl	r4,r18,r3
 4006524:	9084983a 	sll	r2,r18,r2
 4006528:	88e2d83a 	srl	r17,r17,r3
 400652c:	2906b03a 	or	r3,r5,r4
 4006530:	1004c03a 	cmpne	r2,r2,zero
 4006534:	1886b03a 	or	r3,r3,r2
 4006538:	188001cc 	andi	r2,r3,7
 400653c:	10000726 	beq	r2,zero,400655c <__muldf3+0x7a8>
 4006540:	188003cc 	andi	r2,r3,15
 4006544:	01000104 	movi	r4,4
 4006548:	11000426 	beq	r2,r4,400655c <__muldf3+0x7a8>
 400654c:	1805883a 	mov	r2,r3
 4006550:	10c00104 	addi	r3,r2,4
 4006554:	1885803a 	cmpltu	r2,r3,r2
 4006558:	88a3883a 	add	r17,r17,r2
 400655c:	8880202c 	andhi	r2,r17,128
 4006560:	10001c26 	beq	r2,zero,40065d4 <__muldf3+0x820>
 4006564:	3027883a 	mov	r19,r6
 4006568:	00800044 	movi	r2,1
 400656c:	0021883a 	mov	r16,zero
 4006570:	002d883a 	mov	r22,zero
 4006574:	003e6e06 	br	4005f30 <__alt_data_end+0xfc005f30>
 4006578:	4007883a 	mov	r3,r8
 400657c:	003f9706 	br	40063dc <__alt_data_end+0xfc0063dc>
 4006580:	017ff844 	movi	r5,-31
 4006584:	2885c83a 	sub	r2,r5,r2
 4006588:	888ad83a 	srl	r5,r17,r2
 400658c:	00800804 	movi	r2,32
 4006590:	18801a26 	beq	r3,r2,40065fc <__muldf3+0x848>
 4006594:	01001004 	movi	r4,64
 4006598:	20c7c83a 	sub	r3,r4,r3
 400659c:	88e2983a 	sll	r17,r17,r3
 40065a0:	8ca4b03a 	or	r18,r17,r18
 40065a4:	9004c03a 	cmpne	r2,r18,zero
 40065a8:	2884b03a 	or	r2,r5,r2
 40065ac:	144001cc 	andi	r17,r2,7
 40065b0:	88000d1e 	bne	r17,zero,40065e8 <__muldf3+0x834>
 40065b4:	0021883a 	mov	r16,zero
 40065b8:	102cd0fa 	srli	r22,r2,3
 40065bc:	3027883a 	mov	r19,r6
 40065c0:	0005883a 	mov	r2,zero
 40065c4:	b46cb03a 	or	r22,r22,r17
 40065c8:	003e5906 	br	4005f30 <__alt_data_end+0xfc005f30>
 40065cc:	1007883a 	mov	r3,r2
 40065d0:	0023883a 	mov	r17,zero
 40065d4:	8820927a 	slli	r16,r17,9
 40065d8:	1805883a 	mov	r2,r3
 40065dc:	8822977a 	slli	r17,r17,29
 40065e0:	8020d33a 	srli	r16,r16,12
 40065e4:	003ff406 	br	40065b8 <__alt_data_end+0xfc0065b8>
 40065e8:	10c003cc 	andi	r3,r2,15
 40065ec:	01000104 	movi	r4,4
 40065f0:	193ff626 	beq	r3,r4,40065cc <__alt_data_end+0xfc0065cc>
 40065f4:	0023883a 	mov	r17,zero
 40065f8:	003fd506 	br	4006550 <__alt_data_end+0xfc006550>
 40065fc:	0023883a 	mov	r17,zero
 4006600:	003fe706 	br	40065a0 <__alt_data_end+0xfc0065a0>
 4006604:	00800434 	movhi	r2,16
 4006608:	8c000234 	orhi	r16,r17,8
 400660c:	10bfffc4 	addi	r2,r2,-1
 4006610:	3027883a 	mov	r19,r6
 4006614:	80a0703a 	and	r16,r16,r2
 4006618:	902d883a 	mov	r22,r18
 400661c:	003eac06 	br	40060d0 <__alt_data_end+0xfc0060d0>

04006620 <__subdf3>:
 4006620:	02000434 	movhi	r8,16
 4006624:	423fffc4 	addi	r8,r8,-1
 4006628:	defffb04 	addi	sp,sp,-20
 400662c:	2a14703a 	and	r10,r5,r8
 4006630:	3812d53a 	srli	r9,r7,20
 4006634:	3a10703a 	and	r8,r7,r8
 4006638:	2006d77a 	srli	r3,r4,29
 400663c:	3004d77a 	srli	r2,r6,29
 4006640:	dc000015 	stw	r16,0(sp)
 4006644:	501490fa 	slli	r10,r10,3
 4006648:	2820d53a 	srli	r16,r5,20
 400664c:	401090fa 	slli	r8,r8,3
 4006650:	dc800215 	stw	r18,8(sp)
 4006654:	dc400115 	stw	r17,4(sp)
 4006658:	dfc00415 	stw	ra,16(sp)
 400665c:	202290fa 	slli	r17,r4,3
 4006660:	dcc00315 	stw	r19,12(sp)
 4006664:	4a41ffcc 	andi	r9,r9,2047
 4006668:	0101ffc4 	movi	r4,2047
 400666c:	2824d7fa 	srli	r18,r5,31
 4006670:	8401ffcc 	andi	r16,r16,2047
 4006674:	50c6b03a 	or	r3,r10,r3
 4006678:	380ed7fa 	srli	r7,r7,31
 400667c:	408ab03a 	or	r5,r8,r2
 4006680:	300c90fa 	slli	r6,r6,3
 4006684:	49009626 	beq	r9,r4,40068e0 <__subdf3+0x2c0>
 4006688:	39c0005c 	xori	r7,r7,1
 400668c:	8245c83a 	sub	r2,r16,r9
 4006690:	3c807426 	beq	r7,r18,4006864 <__subdf3+0x244>
 4006694:	0080af0e 	bge	zero,r2,4006954 <__subdf3+0x334>
 4006698:	48002a1e 	bne	r9,zero,4006744 <__subdf3+0x124>
 400669c:	2988b03a 	or	r4,r5,r6
 40066a0:	20009a1e 	bne	r4,zero,400690c <__subdf3+0x2ec>
 40066a4:	888001cc 	andi	r2,r17,7
 40066a8:	10000726 	beq	r2,zero,40066c8 <__subdf3+0xa8>
 40066ac:	888003cc 	andi	r2,r17,15
 40066b0:	01000104 	movi	r4,4
 40066b4:	11000426 	beq	r2,r4,40066c8 <__subdf3+0xa8>
 40066b8:	890b883a 	add	r5,r17,r4
 40066bc:	2c63803a 	cmpltu	r17,r5,r17
 40066c0:	1c47883a 	add	r3,r3,r17
 40066c4:	2823883a 	mov	r17,r5
 40066c8:	1880202c 	andhi	r2,r3,128
 40066cc:	10005926 	beq	r2,zero,4006834 <__subdf3+0x214>
 40066d0:	84000044 	addi	r16,r16,1
 40066d4:	0081ffc4 	movi	r2,2047
 40066d8:	8080be26 	beq	r16,r2,40069d4 <__subdf3+0x3b4>
 40066dc:	017fe034 	movhi	r5,65408
 40066e0:	297fffc4 	addi	r5,r5,-1
 40066e4:	1946703a 	and	r3,r3,r5
 40066e8:	1804977a 	slli	r2,r3,29
 40066ec:	1806927a 	slli	r3,r3,9
 40066f0:	8822d0fa 	srli	r17,r17,3
 40066f4:	8401ffcc 	andi	r16,r16,2047
 40066f8:	180ad33a 	srli	r5,r3,12
 40066fc:	9100004c 	andi	r4,r18,1
 4006700:	1444b03a 	or	r2,r2,r17
 4006704:	80c1ffcc 	andi	r3,r16,2047
 4006708:	1820953a 	slli	r16,r3,20
 400670c:	20c03fcc 	andi	r3,r4,255
 4006710:	180897fa 	slli	r4,r3,31
 4006714:	00c00434 	movhi	r3,16
 4006718:	18ffffc4 	addi	r3,r3,-1
 400671c:	28c6703a 	and	r3,r5,r3
 4006720:	1c06b03a 	or	r3,r3,r16
 4006724:	1906b03a 	or	r3,r3,r4
 4006728:	dfc00417 	ldw	ra,16(sp)
 400672c:	dcc00317 	ldw	r19,12(sp)
 4006730:	dc800217 	ldw	r18,8(sp)
 4006734:	dc400117 	ldw	r17,4(sp)
 4006738:	dc000017 	ldw	r16,0(sp)
 400673c:	dec00504 	addi	sp,sp,20
 4006740:	f800283a 	ret
 4006744:	0101ffc4 	movi	r4,2047
 4006748:	813fd626 	beq	r16,r4,40066a4 <__alt_data_end+0xfc0066a4>
 400674c:	29402034 	orhi	r5,r5,128
 4006750:	01000e04 	movi	r4,56
 4006754:	2080a316 	blt	r4,r2,40069e4 <__subdf3+0x3c4>
 4006758:	010007c4 	movi	r4,31
 400675c:	2080c616 	blt	r4,r2,4006a78 <__subdf3+0x458>
 4006760:	01000804 	movi	r4,32
 4006764:	2089c83a 	sub	r4,r4,r2
 4006768:	2910983a 	sll	r8,r5,r4
 400676c:	308ed83a 	srl	r7,r6,r2
 4006770:	3108983a 	sll	r4,r6,r4
 4006774:	2884d83a 	srl	r2,r5,r2
 4006778:	41ccb03a 	or	r6,r8,r7
 400677c:	2008c03a 	cmpne	r4,r4,zero
 4006780:	310cb03a 	or	r6,r6,r4
 4006784:	898dc83a 	sub	r6,r17,r6
 4006788:	89a3803a 	cmpltu	r17,r17,r6
 400678c:	1887c83a 	sub	r3,r3,r2
 4006790:	1c47c83a 	sub	r3,r3,r17
 4006794:	3023883a 	mov	r17,r6
 4006798:	1880202c 	andhi	r2,r3,128
 400679c:	10002326 	beq	r2,zero,400682c <__subdf3+0x20c>
 40067a0:	04c02034 	movhi	r19,128
 40067a4:	9cffffc4 	addi	r19,r19,-1
 40067a8:	1ce6703a 	and	r19,r3,r19
 40067ac:	98007a26 	beq	r19,zero,4006998 <__subdf3+0x378>
 40067b0:	9809883a 	mov	r4,r19
 40067b4:	40071d40 	call	40071d4 <__clzsi2>
 40067b8:	113ffe04 	addi	r4,r2,-8
 40067bc:	00c007c4 	movi	r3,31
 40067c0:	19007b16 	blt	r3,r4,40069b0 <__subdf3+0x390>
 40067c4:	00800804 	movi	r2,32
 40067c8:	1105c83a 	sub	r2,r2,r4
 40067cc:	8884d83a 	srl	r2,r17,r2
 40067d0:	9906983a 	sll	r3,r19,r4
 40067d4:	8922983a 	sll	r17,r17,r4
 40067d8:	10c4b03a 	or	r2,r2,r3
 40067dc:	24007816 	blt	r4,r16,40069c0 <__subdf3+0x3a0>
 40067e0:	2421c83a 	sub	r16,r4,r16
 40067e4:	80c00044 	addi	r3,r16,1
 40067e8:	010007c4 	movi	r4,31
 40067ec:	20c09516 	blt	r4,r3,4006a44 <__subdf3+0x424>
 40067f0:	01400804 	movi	r5,32
 40067f4:	28cbc83a 	sub	r5,r5,r3
 40067f8:	88c8d83a 	srl	r4,r17,r3
 40067fc:	8962983a 	sll	r17,r17,r5
 4006800:	114a983a 	sll	r5,r2,r5
 4006804:	10c6d83a 	srl	r3,r2,r3
 4006808:	8804c03a 	cmpne	r2,r17,zero
 400680c:	290ab03a 	or	r5,r5,r4
 4006810:	28a2b03a 	or	r17,r5,r2
 4006814:	0021883a 	mov	r16,zero
 4006818:	003fa206 	br	40066a4 <__alt_data_end+0xfc0066a4>
 400681c:	2090b03a 	or	r8,r4,r2
 4006820:	40018e26 	beq	r8,zero,4006e5c <__subdf3+0x83c>
 4006824:	1007883a 	mov	r3,r2
 4006828:	2023883a 	mov	r17,r4
 400682c:	888001cc 	andi	r2,r17,7
 4006830:	103f9e1e 	bne	r2,zero,40066ac <__alt_data_end+0xfc0066ac>
 4006834:	1804977a 	slli	r2,r3,29
 4006838:	8822d0fa 	srli	r17,r17,3
 400683c:	1810d0fa 	srli	r8,r3,3
 4006840:	9100004c 	andi	r4,r18,1
 4006844:	1444b03a 	or	r2,r2,r17
 4006848:	00c1ffc4 	movi	r3,2047
 400684c:	80c02826 	beq	r16,r3,40068f0 <__subdf3+0x2d0>
 4006850:	01400434 	movhi	r5,16
 4006854:	297fffc4 	addi	r5,r5,-1
 4006858:	80e0703a 	and	r16,r16,r3
 400685c:	414a703a 	and	r5,r8,r5
 4006860:	003fa806 	br	4006704 <__alt_data_end+0xfc006704>
 4006864:	0080630e 	bge	zero,r2,40069f4 <__subdf3+0x3d4>
 4006868:	48003026 	beq	r9,zero,400692c <__subdf3+0x30c>
 400686c:	0101ffc4 	movi	r4,2047
 4006870:	813f8c26 	beq	r16,r4,40066a4 <__alt_data_end+0xfc0066a4>
 4006874:	29402034 	orhi	r5,r5,128
 4006878:	01000e04 	movi	r4,56
 400687c:	2080a90e 	bge	r4,r2,4006b24 <__subdf3+0x504>
 4006880:	298cb03a 	or	r6,r5,r6
 4006884:	3012c03a 	cmpne	r9,r6,zero
 4006888:	0005883a 	mov	r2,zero
 400688c:	4c53883a 	add	r9,r9,r17
 4006890:	4c63803a 	cmpltu	r17,r9,r17
 4006894:	10c7883a 	add	r3,r2,r3
 4006898:	88c7883a 	add	r3,r17,r3
 400689c:	4823883a 	mov	r17,r9
 40068a0:	1880202c 	andhi	r2,r3,128
 40068a4:	1000d026 	beq	r2,zero,4006be8 <__subdf3+0x5c8>
 40068a8:	84000044 	addi	r16,r16,1
 40068ac:	0081ffc4 	movi	r2,2047
 40068b0:	8080fe26 	beq	r16,r2,4006cac <__subdf3+0x68c>
 40068b4:	00bfe034 	movhi	r2,65408
 40068b8:	10bfffc4 	addi	r2,r2,-1
 40068bc:	1886703a 	and	r3,r3,r2
 40068c0:	880ad07a 	srli	r5,r17,1
 40068c4:	180497fa 	slli	r2,r3,31
 40068c8:	8900004c 	andi	r4,r17,1
 40068cc:	2922b03a 	or	r17,r5,r4
 40068d0:	1806d07a 	srli	r3,r3,1
 40068d4:	1462b03a 	or	r17,r2,r17
 40068d8:	3825883a 	mov	r18,r7
 40068dc:	003f7106 	br	40066a4 <__alt_data_end+0xfc0066a4>
 40068e0:	2984b03a 	or	r2,r5,r6
 40068e4:	103f6826 	beq	r2,zero,4006688 <__alt_data_end+0xfc006688>
 40068e8:	39c03fcc 	andi	r7,r7,255
 40068ec:	003f6706 	br	400668c <__alt_data_end+0xfc00668c>
 40068f0:	4086b03a 	or	r3,r8,r2
 40068f4:	18015226 	beq	r3,zero,4006e40 <__subdf3+0x820>
 40068f8:	00c00434 	movhi	r3,16
 40068fc:	41400234 	orhi	r5,r8,8
 4006900:	18ffffc4 	addi	r3,r3,-1
 4006904:	28ca703a 	and	r5,r5,r3
 4006908:	003f7e06 	br	4006704 <__alt_data_end+0xfc006704>
 400690c:	10bfffc4 	addi	r2,r2,-1
 4006910:	1000491e 	bne	r2,zero,4006a38 <__subdf3+0x418>
 4006914:	898fc83a 	sub	r7,r17,r6
 4006918:	89e3803a 	cmpltu	r17,r17,r7
 400691c:	1947c83a 	sub	r3,r3,r5
 4006920:	1c47c83a 	sub	r3,r3,r17
 4006924:	3823883a 	mov	r17,r7
 4006928:	003f9b06 	br	4006798 <__alt_data_end+0xfc006798>
 400692c:	2988b03a 	or	r4,r5,r6
 4006930:	203f5c26 	beq	r4,zero,40066a4 <__alt_data_end+0xfc0066a4>
 4006934:	10bfffc4 	addi	r2,r2,-1
 4006938:	1000931e 	bne	r2,zero,4006b88 <__subdf3+0x568>
 400693c:	898d883a 	add	r6,r17,r6
 4006940:	3463803a 	cmpltu	r17,r6,r17
 4006944:	1947883a 	add	r3,r3,r5
 4006948:	88c7883a 	add	r3,r17,r3
 400694c:	3023883a 	mov	r17,r6
 4006950:	003fd306 	br	40068a0 <__alt_data_end+0xfc0068a0>
 4006954:	1000541e 	bne	r2,zero,4006aa8 <__subdf3+0x488>
 4006958:	80800044 	addi	r2,r16,1
 400695c:	1081ffcc 	andi	r2,r2,2047
 4006960:	01000044 	movi	r4,1
 4006964:	2080a20e 	bge	r4,r2,4006bf0 <__subdf3+0x5d0>
 4006968:	8989c83a 	sub	r4,r17,r6
 400696c:	8905803a 	cmpltu	r2,r17,r4
 4006970:	1967c83a 	sub	r19,r3,r5
 4006974:	98a7c83a 	sub	r19,r19,r2
 4006978:	9880202c 	andhi	r2,r19,128
 400697c:	10006326 	beq	r2,zero,4006b0c <__subdf3+0x4ec>
 4006980:	3463c83a 	sub	r17,r6,r17
 4006984:	28c7c83a 	sub	r3,r5,r3
 4006988:	344d803a 	cmpltu	r6,r6,r17
 400698c:	19a7c83a 	sub	r19,r3,r6
 4006990:	3825883a 	mov	r18,r7
 4006994:	983f861e 	bne	r19,zero,40067b0 <__alt_data_end+0xfc0067b0>
 4006998:	8809883a 	mov	r4,r17
 400699c:	40071d40 	call	40071d4 <__clzsi2>
 40069a0:	10800804 	addi	r2,r2,32
 40069a4:	113ffe04 	addi	r4,r2,-8
 40069a8:	00c007c4 	movi	r3,31
 40069ac:	193f850e 	bge	r3,r4,40067c4 <__alt_data_end+0xfc0067c4>
 40069b0:	10bff604 	addi	r2,r2,-40
 40069b4:	8884983a 	sll	r2,r17,r2
 40069b8:	0023883a 	mov	r17,zero
 40069bc:	243f880e 	bge	r4,r16,40067e0 <__alt_data_end+0xfc0067e0>
 40069c0:	00ffe034 	movhi	r3,65408
 40069c4:	18ffffc4 	addi	r3,r3,-1
 40069c8:	8121c83a 	sub	r16,r16,r4
 40069cc:	10c6703a 	and	r3,r2,r3
 40069d0:	003f3406 	br	40066a4 <__alt_data_end+0xfc0066a4>
 40069d4:	9100004c 	andi	r4,r18,1
 40069d8:	000b883a 	mov	r5,zero
 40069dc:	0005883a 	mov	r2,zero
 40069e0:	003f4806 	br	4006704 <__alt_data_end+0xfc006704>
 40069e4:	298cb03a 	or	r6,r5,r6
 40069e8:	300cc03a 	cmpne	r6,r6,zero
 40069ec:	0005883a 	mov	r2,zero
 40069f0:	003f6406 	br	4006784 <__alt_data_end+0xfc006784>
 40069f4:	10009a1e 	bne	r2,zero,4006c60 <__subdf3+0x640>
 40069f8:	82400044 	addi	r9,r16,1
 40069fc:	4881ffcc 	andi	r2,r9,2047
 4006a00:	02800044 	movi	r10,1
 4006a04:	5080670e 	bge	r10,r2,4006ba4 <__subdf3+0x584>
 4006a08:	0081ffc4 	movi	r2,2047
 4006a0c:	4880af26 	beq	r9,r2,4006ccc <__subdf3+0x6ac>
 4006a10:	898d883a 	add	r6,r17,r6
 4006a14:	1945883a 	add	r2,r3,r5
 4006a18:	3447803a 	cmpltu	r3,r6,r17
 4006a1c:	1887883a 	add	r3,r3,r2
 4006a20:	182297fa 	slli	r17,r3,31
 4006a24:	300cd07a 	srli	r6,r6,1
 4006a28:	1806d07a 	srli	r3,r3,1
 4006a2c:	4821883a 	mov	r16,r9
 4006a30:	89a2b03a 	or	r17,r17,r6
 4006a34:	003f1b06 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006a38:	0101ffc4 	movi	r4,2047
 4006a3c:	813f441e 	bne	r16,r4,4006750 <__alt_data_end+0xfc006750>
 4006a40:	003f1806 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006a44:	843ff844 	addi	r16,r16,-31
 4006a48:	01400804 	movi	r5,32
 4006a4c:	1408d83a 	srl	r4,r2,r16
 4006a50:	19405026 	beq	r3,r5,4006b94 <__subdf3+0x574>
 4006a54:	01401004 	movi	r5,64
 4006a58:	28c7c83a 	sub	r3,r5,r3
 4006a5c:	10c4983a 	sll	r2,r2,r3
 4006a60:	88a2b03a 	or	r17,r17,r2
 4006a64:	8822c03a 	cmpne	r17,r17,zero
 4006a68:	2462b03a 	or	r17,r4,r17
 4006a6c:	0007883a 	mov	r3,zero
 4006a70:	0021883a 	mov	r16,zero
 4006a74:	003f6d06 	br	400682c <__alt_data_end+0xfc00682c>
 4006a78:	11fff804 	addi	r7,r2,-32
 4006a7c:	01000804 	movi	r4,32
 4006a80:	29ced83a 	srl	r7,r5,r7
 4006a84:	11004526 	beq	r2,r4,4006b9c <__subdf3+0x57c>
 4006a88:	01001004 	movi	r4,64
 4006a8c:	2089c83a 	sub	r4,r4,r2
 4006a90:	2904983a 	sll	r2,r5,r4
 4006a94:	118cb03a 	or	r6,r2,r6
 4006a98:	300cc03a 	cmpne	r6,r6,zero
 4006a9c:	398cb03a 	or	r6,r7,r6
 4006aa0:	0005883a 	mov	r2,zero
 4006aa4:	003f3706 	br	4006784 <__alt_data_end+0xfc006784>
 4006aa8:	80002a26 	beq	r16,zero,4006b54 <__subdf3+0x534>
 4006aac:	0101ffc4 	movi	r4,2047
 4006ab0:	49006626 	beq	r9,r4,4006c4c <__subdf3+0x62c>
 4006ab4:	0085c83a 	sub	r2,zero,r2
 4006ab8:	18c02034 	orhi	r3,r3,128
 4006abc:	01000e04 	movi	r4,56
 4006ac0:	20807e16 	blt	r4,r2,4006cbc <__subdf3+0x69c>
 4006ac4:	010007c4 	movi	r4,31
 4006ac8:	2080e716 	blt	r4,r2,4006e68 <__subdf3+0x848>
 4006acc:	01000804 	movi	r4,32
 4006ad0:	2089c83a 	sub	r4,r4,r2
 4006ad4:	1914983a 	sll	r10,r3,r4
 4006ad8:	8890d83a 	srl	r8,r17,r2
 4006adc:	8908983a 	sll	r4,r17,r4
 4006ae0:	1884d83a 	srl	r2,r3,r2
 4006ae4:	5222b03a 	or	r17,r10,r8
 4006ae8:	2006c03a 	cmpne	r3,r4,zero
 4006aec:	88e2b03a 	or	r17,r17,r3
 4006af0:	3463c83a 	sub	r17,r6,r17
 4006af4:	2885c83a 	sub	r2,r5,r2
 4006af8:	344d803a 	cmpltu	r6,r6,r17
 4006afc:	1187c83a 	sub	r3,r2,r6
 4006b00:	4821883a 	mov	r16,r9
 4006b04:	3825883a 	mov	r18,r7
 4006b08:	003f2306 	br	4006798 <__alt_data_end+0xfc006798>
 4006b0c:	24d0b03a 	or	r8,r4,r19
 4006b10:	40001b1e 	bne	r8,zero,4006b80 <__subdf3+0x560>
 4006b14:	0005883a 	mov	r2,zero
 4006b18:	0009883a 	mov	r4,zero
 4006b1c:	0021883a 	mov	r16,zero
 4006b20:	003f4906 	br	4006848 <__alt_data_end+0xfc006848>
 4006b24:	010007c4 	movi	r4,31
 4006b28:	20803a16 	blt	r4,r2,4006c14 <__subdf3+0x5f4>
 4006b2c:	01000804 	movi	r4,32
 4006b30:	2089c83a 	sub	r4,r4,r2
 4006b34:	2912983a 	sll	r9,r5,r4
 4006b38:	3090d83a 	srl	r8,r6,r2
 4006b3c:	3108983a 	sll	r4,r6,r4
 4006b40:	2884d83a 	srl	r2,r5,r2
 4006b44:	4a12b03a 	or	r9,r9,r8
 4006b48:	2008c03a 	cmpne	r4,r4,zero
 4006b4c:	4912b03a 	or	r9,r9,r4
 4006b50:	003f4e06 	br	400688c <__alt_data_end+0xfc00688c>
 4006b54:	1c48b03a 	or	r4,r3,r17
 4006b58:	20003c26 	beq	r4,zero,4006c4c <__subdf3+0x62c>
 4006b5c:	0084303a 	nor	r2,zero,r2
 4006b60:	1000381e 	bne	r2,zero,4006c44 <__subdf3+0x624>
 4006b64:	3463c83a 	sub	r17,r6,r17
 4006b68:	28c5c83a 	sub	r2,r5,r3
 4006b6c:	344d803a 	cmpltu	r6,r6,r17
 4006b70:	1187c83a 	sub	r3,r2,r6
 4006b74:	4821883a 	mov	r16,r9
 4006b78:	3825883a 	mov	r18,r7
 4006b7c:	003f0606 	br	4006798 <__alt_data_end+0xfc006798>
 4006b80:	2023883a 	mov	r17,r4
 4006b84:	003f0906 	br	40067ac <__alt_data_end+0xfc0067ac>
 4006b88:	0101ffc4 	movi	r4,2047
 4006b8c:	813f3a1e 	bne	r16,r4,4006878 <__alt_data_end+0xfc006878>
 4006b90:	003ec406 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006b94:	0005883a 	mov	r2,zero
 4006b98:	003fb106 	br	4006a60 <__alt_data_end+0xfc006a60>
 4006b9c:	0005883a 	mov	r2,zero
 4006ba0:	003fbc06 	br	4006a94 <__alt_data_end+0xfc006a94>
 4006ba4:	1c44b03a 	or	r2,r3,r17
 4006ba8:	80008e1e 	bne	r16,zero,4006de4 <__subdf3+0x7c4>
 4006bac:	1000c826 	beq	r2,zero,4006ed0 <__subdf3+0x8b0>
 4006bb0:	2984b03a 	or	r2,r5,r6
 4006bb4:	103ebb26 	beq	r2,zero,40066a4 <__alt_data_end+0xfc0066a4>
 4006bb8:	8989883a 	add	r4,r17,r6
 4006bbc:	1945883a 	add	r2,r3,r5
 4006bc0:	2447803a 	cmpltu	r3,r4,r17
 4006bc4:	1887883a 	add	r3,r3,r2
 4006bc8:	1880202c 	andhi	r2,r3,128
 4006bcc:	2023883a 	mov	r17,r4
 4006bd0:	103f1626 	beq	r2,zero,400682c <__alt_data_end+0xfc00682c>
 4006bd4:	00bfe034 	movhi	r2,65408
 4006bd8:	10bfffc4 	addi	r2,r2,-1
 4006bdc:	5021883a 	mov	r16,r10
 4006be0:	1886703a 	and	r3,r3,r2
 4006be4:	003eaf06 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006be8:	3825883a 	mov	r18,r7
 4006bec:	003f0f06 	br	400682c <__alt_data_end+0xfc00682c>
 4006bf0:	1c44b03a 	or	r2,r3,r17
 4006bf4:	8000251e 	bne	r16,zero,4006c8c <__subdf3+0x66c>
 4006bf8:	1000661e 	bne	r2,zero,4006d94 <__subdf3+0x774>
 4006bfc:	2990b03a 	or	r8,r5,r6
 4006c00:	40009626 	beq	r8,zero,4006e5c <__subdf3+0x83c>
 4006c04:	2807883a 	mov	r3,r5
 4006c08:	3023883a 	mov	r17,r6
 4006c0c:	3825883a 	mov	r18,r7
 4006c10:	003ea406 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006c14:	127ff804 	addi	r9,r2,-32
 4006c18:	01000804 	movi	r4,32
 4006c1c:	2a52d83a 	srl	r9,r5,r9
 4006c20:	11008c26 	beq	r2,r4,4006e54 <__subdf3+0x834>
 4006c24:	01001004 	movi	r4,64
 4006c28:	2085c83a 	sub	r2,r4,r2
 4006c2c:	2884983a 	sll	r2,r5,r2
 4006c30:	118cb03a 	or	r6,r2,r6
 4006c34:	300cc03a 	cmpne	r6,r6,zero
 4006c38:	4992b03a 	or	r9,r9,r6
 4006c3c:	0005883a 	mov	r2,zero
 4006c40:	003f1206 	br	400688c <__alt_data_end+0xfc00688c>
 4006c44:	0101ffc4 	movi	r4,2047
 4006c48:	493f9c1e 	bne	r9,r4,4006abc <__alt_data_end+0xfc006abc>
 4006c4c:	2807883a 	mov	r3,r5
 4006c50:	3023883a 	mov	r17,r6
 4006c54:	4821883a 	mov	r16,r9
 4006c58:	3825883a 	mov	r18,r7
 4006c5c:	003e9106 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006c60:	80001f1e 	bne	r16,zero,4006ce0 <__subdf3+0x6c0>
 4006c64:	1c48b03a 	or	r4,r3,r17
 4006c68:	20005a26 	beq	r4,zero,4006dd4 <__subdf3+0x7b4>
 4006c6c:	0084303a 	nor	r2,zero,r2
 4006c70:	1000561e 	bne	r2,zero,4006dcc <__subdf3+0x7ac>
 4006c74:	89a3883a 	add	r17,r17,r6
 4006c78:	1945883a 	add	r2,r3,r5
 4006c7c:	898d803a 	cmpltu	r6,r17,r6
 4006c80:	3087883a 	add	r3,r6,r2
 4006c84:	4821883a 	mov	r16,r9
 4006c88:	003f0506 	br	40068a0 <__alt_data_end+0xfc0068a0>
 4006c8c:	10002b1e 	bne	r2,zero,4006d3c <__subdf3+0x71c>
 4006c90:	2984b03a 	or	r2,r5,r6
 4006c94:	10008026 	beq	r2,zero,4006e98 <__subdf3+0x878>
 4006c98:	2807883a 	mov	r3,r5
 4006c9c:	3023883a 	mov	r17,r6
 4006ca0:	3825883a 	mov	r18,r7
 4006ca4:	0401ffc4 	movi	r16,2047
 4006ca8:	003e7e06 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006cac:	3809883a 	mov	r4,r7
 4006cb0:	0011883a 	mov	r8,zero
 4006cb4:	0005883a 	mov	r2,zero
 4006cb8:	003ee306 	br	4006848 <__alt_data_end+0xfc006848>
 4006cbc:	1c62b03a 	or	r17,r3,r17
 4006cc0:	8822c03a 	cmpne	r17,r17,zero
 4006cc4:	0005883a 	mov	r2,zero
 4006cc8:	003f8906 	br	4006af0 <__alt_data_end+0xfc006af0>
 4006ccc:	3809883a 	mov	r4,r7
 4006cd0:	4821883a 	mov	r16,r9
 4006cd4:	0011883a 	mov	r8,zero
 4006cd8:	0005883a 	mov	r2,zero
 4006cdc:	003eda06 	br	4006848 <__alt_data_end+0xfc006848>
 4006ce0:	0101ffc4 	movi	r4,2047
 4006ce4:	49003b26 	beq	r9,r4,4006dd4 <__subdf3+0x7b4>
 4006ce8:	0085c83a 	sub	r2,zero,r2
 4006cec:	18c02034 	orhi	r3,r3,128
 4006cf0:	01000e04 	movi	r4,56
 4006cf4:	20806e16 	blt	r4,r2,4006eb0 <__subdf3+0x890>
 4006cf8:	010007c4 	movi	r4,31
 4006cfc:	20807716 	blt	r4,r2,4006edc <__subdf3+0x8bc>
 4006d00:	01000804 	movi	r4,32
 4006d04:	2089c83a 	sub	r4,r4,r2
 4006d08:	1914983a 	sll	r10,r3,r4
 4006d0c:	8890d83a 	srl	r8,r17,r2
 4006d10:	8908983a 	sll	r4,r17,r4
 4006d14:	1884d83a 	srl	r2,r3,r2
 4006d18:	5222b03a 	or	r17,r10,r8
 4006d1c:	2006c03a 	cmpne	r3,r4,zero
 4006d20:	88e2b03a 	or	r17,r17,r3
 4006d24:	89a3883a 	add	r17,r17,r6
 4006d28:	1145883a 	add	r2,r2,r5
 4006d2c:	898d803a 	cmpltu	r6,r17,r6
 4006d30:	3087883a 	add	r3,r6,r2
 4006d34:	4821883a 	mov	r16,r9
 4006d38:	003ed906 	br	40068a0 <__alt_data_end+0xfc0068a0>
 4006d3c:	2984b03a 	or	r2,r5,r6
 4006d40:	10004226 	beq	r2,zero,4006e4c <__subdf3+0x82c>
 4006d44:	1808d0fa 	srli	r4,r3,3
 4006d48:	8822d0fa 	srli	r17,r17,3
 4006d4c:	1806977a 	slli	r3,r3,29
 4006d50:	2080022c 	andhi	r2,r4,8
 4006d54:	1c62b03a 	or	r17,r3,r17
 4006d58:	10000826 	beq	r2,zero,4006d7c <__subdf3+0x75c>
 4006d5c:	2812d0fa 	srli	r9,r5,3
 4006d60:	4880022c 	andhi	r2,r9,8
 4006d64:	1000051e 	bne	r2,zero,4006d7c <__subdf3+0x75c>
 4006d68:	300cd0fa 	srli	r6,r6,3
 4006d6c:	2804977a 	slli	r2,r5,29
 4006d70:	4809883a 	mov	r4,r9
 4006d74:	3825883a 	mov	r18,r7
 4006d78:	11a2b03a 	or	r17,r2,r6
 4006d7c:	8806d77a 	srli	r3,r17,29
 4006d80:	200890fa 	slli	r4,r4,3
 4006d84:	882290fa 	slli	r17,r17,3
 4006d88:	0401ffc4 	movi	r16,2047
 4006d8c:	1906b03a 	or	r3,r3,r4
 4006d90:	003e4406 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006d94:	2984b03a 	or	r2,r5,r6
 4006d98:	103e4226 	beq	r2,zero,40066a4 <__alt_data_end+0xfc0066a4>
 4006d9c:	8989c83a 	sub	r4,r17,r6
 4006da0:	8911803a 	cmpltu	r8,r17,r4
 4006da4:	1945c83a 	sub	r2,r3,r5
 4006da8:	1205c83a 	sub	r2,r2,r8
 4006dac:	1200202c 	andhi	r8,r2,128
 4006db0:	403e9a26 	beq	r8,zero,400681c <__alt_data_end+0xfc00681c>
 4006db4:	3463c83a 	sub	r17,r6,r17
 4006db8:	28c5c83a 	sub	r2,r5,r3
 4006dbc:	344d803a 	cmpltu	r6,r6,r17
 4006dc0:	1187c83a 	sub	r3,r2,r6
 4006dc4:	3825883a 	mov	r18,r7
 4006dc8:	003e3606 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006dcc:	0101ffc4 	movi	r4,2047
 4006dd0:	493fc71e 	bne	r9,r4,4006cf0 <__alt_data_end+0xfc006cf0>
 4006dd4:	2807883a 	mov	r3,r5
 4006dd8:	3023883a 	mov	r17,r6
 4006ddc:	4821883a 	mov	r16,r9
 4006de0:	003e3006 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006de4:	10003626 	beq	r2,zero,4006ec0 <__subdf3+0x8a0>
 4006de8:	2984b03a 	or	r2,r5,r6
 4006dec:	10001726 	beq	r2,zero,4006e4c <__subdf3+0x82c>
 4006df0:	1808d0fa 	srli	r4,r3,3
 4006df4:	8822d0fa 	srli	r17,r17,3
 4006df8:	1806977a 	slli	r3,r3,29
 4006dfc:	2080022c 	andhi	r2,r4,8
 4006e00:	1c62b03a 	or	r17,r3,r17
 4006e04:	10000726 	beq	r2,zero,4006e24 <__subdf3+0x804>
 4006e08:	2812d0fa 	srli	r9,r5,3
 4006e0c:	4880022c 	andhi	r2,r9,8
 4006e10:	1000041e 	bne	r2,zero,4006e24 <__subdf3+0x804>
 4006e14:	300cd0fa 	srli	r6,r6,3
 4006e18:	2804977a 	slli	r2,r5,29
 4006e1c:	4809883a 	mov	r4,r9
 4006e20:	11a2b03a 	or	r17,r2,r6
 4006e24:	8806d77a 	srli	r3,r17,29
 4006e28:	200890fa 	slli	r4,r4,3
 4006e2c:	882290fa 	slli	r17,r17,3
 4006e30:	3825883a 	mov	r18,r7
 4006e34:	1906b03a 	or	r3,r3,r4
 4006e38:	0401ffc4 	movi	r16,2047
 4006e3c:	003e1906 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006e40:	000b883a 	mov	r5,zero
 4006e44:	0005883a 	mov	r2,zero
 4006e48:	003e2e06 	br	4006704 <__alt_data_end+0xfc006704>
 4006e4c:	0401ffc4 	movi	r16,2047
 4006e50:	003e1406 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006e54:	0005883a 	mov	r2,zero
 4006e58:	003f7506 	br	4006c30 <__alt_data_end+0xfc006c30>
 4006e5c:	0005883a 	mov	r2,zero
 4006e60:	0009883a 	mov	r4,zero
 4006e64:	003e7806 	br	4006848 <__alt_data_end+0xfc006848>
 4006e68:	123ff804 	addi	r8,r2,-32
 4006e6c:	01000804 	movi	r4,32
 4006e70:	1a10d83a 	srl	r8,r3,r8
 4006e74:	11002526 	beq	r2,r4,4006f0c <__subdf3+0x8ec>
 4006e78:	01001004 	movi	r4,64
 4006e7c:	2085c83a 	sub	r2,r4,r2
 4006e80:	1884983a 	sll	r2,r3,r2
 4006e84:	1444b03a 	or	r2,r2,r17
 4006e88:	1004c03a 	cmpne	r2,r2,zero
 4006e8c:	40a2b03a 	or	r17,r8,r2
 4006e90:	0005883a 	mov	r2,zero
 4006e94:	003f1606 	br	4006af0 <__alt_data_end+0xfc006af0>
 4006e98:	02000434 	movhi	r8,16
 4006e9c:	0009883a 	mov	r4,zero
 4006ea0:	423fffc4 	addi	r8,r8,-1
 4006ea4:	00bfffc4 	movi	r2,-1
 4006ea8:	0401ffc4 	movi	r16,2047
 4006eac:	003e6606 	br	4006848 <__alt_data_end+0xfc006848>
 4006eb0:	1c62b03a 	or	r17,r3,r17
 4006eb4:	8822c03a 	cmpne	r17,r17,zero
 4006eb8:	0005883a 	mov	r2,zero
 4006ebc:	003f9906 	br	4006d24 <__alt_data_end+0xfc006d24>
 4006ec0:	2807883a 	mov	r3,r5
 4006ec4:	3023883a 	mov	r17,r6
 4006ec8:	0401ffc4 	movi	r16,2047
 4006ecc:	003df506 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006ed0:	2807883a 	mov	r3,r5
 4006ed4:	3023883a 	mov	r17,r6
 4006ed8:	003df206 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006edc:	123ff804 	addi	r8,r2,-32
 4006ee0:	01000804 	movi	r4,32
 4006ee4:	1a10d83a 	srl	r8,r3,r8
 4006ee8:	11000a26 	beq	r2,r4,4006f14 <__subdf3+0x8f4>
 4006eec:	01001004 	movi	r4,64
 4006ef0:	2085c83a 	sub	r2,r4,r2
 4006ef4:	1884983a 	sll	r2,r3,r2
 4006ef8:	1444b03a 	or	r2,r2,r17
 4006efc:	1004c03a 	cmpne	r2,r2,zero
 4006f00:	40a2b03a 	or	r17,r8,r2
 4006f04:	0005883a 	mov	r2,zero
 4006f08:	003f8606 	br	4006d24 <__alt_data_end+0xfc006d24>
 4006f0c:	0005883a 	mov	r2,zero
 4006f10:	003fdc06 	br	4006e84 <__alt_data_end+0xfc006e84>
 4006f14:	0005883a 	mov	r2,zero
 4006f18:	003ff706 	br	4006ef8 <__alt_data_end+0xfc006ef8>

04006f1c <__extendsfdf2>:
 4006f1c:	200ad5fa 	srli	r5,r4,23
 4006f20:	defffd04 	addi	sp,sp,-12
 4006f24:	dc400115 	stw	r17,4(sp)
 4006f28:	29403fcc 	andi	r5,r5,255
 4006f2c:	29800044 	addi	r6,r5,1
 4006f30:	04402034 	movhi	r17,128
 4006f34:	dc000015 	stw	r16,0(sp)
 4006f38:	8c7fffc4 	addi	r17,r17,-1
 4006f3c:	dfc00215 	stw	ra,8(sp)
 4006f40:	31803fcc 	andi	r6,r6,255
 4006f44:	00800044 	movi	r2,1
 4006f48:	8922703a 	and	r17,r17,r4
 4006f4c:	2020d7fa 	srli	r16,r4,31
 4006f50:	1180110e 	bge	r2,r6,4006f98 <__extendsfdf2+0x7c>
 4006f54:	880cd0fa 	srli	r6,r17,3
 4006f58:	8822977a 	slli	r17,r17,29
 4006f5c:	2940e004 	addi	r5,r5,896
 4006f60:	2941ffcc 	andi	r5,r5,2047
 4006f64:	2804953a 	slli	r2,r5,20
 4006f68:	01400434 	movhi	r5,16
 4006f6c:	800697fa 	slli	r3,r16,31
 4006f70:	297fffc4 	addi	r5,r5,-1
 4006f74:	314a703a 	and	r5,r6,r5
 4006f78:	288ab03a 	or	r5,r5,r2
 4006f7c:	28c6b03a 	or	r3,r5,r3
 4006f80:	8805883a 	mov	r2,r17
 4006f84:	dfc00217 	ldw	ra,8(sp)
 4006f88:	dc400117 	ldw	r17,4(sp)
 4006f8c:	dc000017 	ldw	r16,0(sp)
 4006f90:	dec00304 	addi	sp,sp,12
 4006f94:	f800283a 	ret
 4006f98:	2800111e 	bne	r5,zero,4006fe0 <__extendsfdf2+0xc4>
 4006f9c:	88001c26 	beq	r17,zero,4007010 <__extendsfdf2+0xf4>
 4006fa0:	8809883a 	mov	r4,r17
 4006fa4:	40071d40 	call	40071d4 <__clzsi2>
 4006fa8:	00c00284 	movi	r3,10
 4006fac:	18801b16 	blt	r3,r2,400701c <__extendsfdf2+0x100>
 4006fb0:	018002c4 	movi	r6,11
 4006fb4:	308dc83a 	sub	r6,r6,r2
 4006fb8:	11000544 	addi	r4,r2,21
 4006fbc:	8986d83a 	srl	r3,r17,r6
 4006fc0:	8922983a 	sll	r17,r17,r4
 4006fc4:	0180e244 	movi	r6,905
 4006fc8:	01400434 	movhi	r5,16
 4006fcc:	3085c83a 	sub	r2,r6,r2
 4006fd0:	297fffc4 	addi	r5,r5,-1
 4006fd4:	194c703a 	and	r6,r3,r5
 4006fd8:	1141ffcc 	andi	r5,r2,2047
 4006fdc:	003fe006 	br	4006f60 <__alt_data_end+0xfc006f60>
 4006fe0:	88000826 	beq	r17,zero,4007004 <__extendsfdf2+0xe8>
 4006fe4:	880cd0fa 	srli	r6,r17,3
 4006fe8:	00800434 	movhi	r2,16
 4006fec:	10bfffc4 	addi	r2,r2,-1
 4006ff0:	31800234 	orhi	r6,r6,8
 4006ff4:	8822977a 	slli	r17,r17,29
 4006ff8:	308c703a 	and	r6,r6,r2
 4006ffc:	0141ffc4 	movi	r5,2047
 4007000:	003fd706 	br	4006f60 <__alt_data_end+0xfc006f60>
 4007004:	0141ffc4 	movi	r5,2047
 4007008:	000d883a 	mov	r6,zero
 400700c:	003fd406 	br	4006f60 <__alt_data_end+0xfc006f60>
 4007010:	000b883a 	mov	r5,zero
 4007014:	000d883a 	mov	r6,zero
 4007018:	003fd106 	br	4006f60 <__alt_data_end+0xfc006f60>
 400701c:	11bffd44 	addi	r6,r2,-11
 4007020:	8986983a 	sll	r3,r17,r6
 4007024:	0023883a 	mov	r17,zero
 4007028:	003fe606 	br	4006fc4 <__alt_data_end+0xfc006fc4>

0400702c <__truncdfsf2>:
 400702c:	2810d53a 	srli	r8,r5,20
 4007030:	01c00434 	movhi	r7,16
 4007034:	39ffffc4 	addi	r7,r7,-1
 4007038:	29ce703a 	and	r7,r5,r7
 400703c:	4201ffcc 	andi	r8,r8,2047
 4007040:	380e90fa 	slli	r7,r7,3
 4007044:	200cd77a 	srli	r6,r4,29
 4007048:	42400044 	addi	r9,r8,1
 400704c:	4a41ffcc 	andi	r9,r9,2047
 4007050:	00c00044 	movi	r3,1
 4007054:	280ad7fa 	srli	r5,r5,31
 4007058:	31ceb03a 	or	r7,r6,r7
 400705c:	200490fa 	slli	r2,r4,3
 4007060:	1a40230e 	bge	r3,r9,40070f0 <__truncdfsf2+0xc4>
 4007064:	40ff2004 	addi	r3,r8,-896
 4007068:	01803f84 	movi	r6,254
 400706c:	30c01516 	blt	r6,r3,40070c4 <__truncdfsf2+0x98>
 4007070:	00c0380e 	bge	zero,r3,4007154 <__truncdfsf2+0x128>
 4007074:	200c91ba 	slli	r6,r4,6
 4007078:	380e90fa 	slli	r7,r7,3
 400707c:	1004d77a 	srli	r2,r2,29
 4007080:	300cc03a 	cmpne	r6,r6,zero
 4007084:	31ccb03a 	or	r6,r6,r7
 4007088:	308cb03a 	or	r6,r6,r2
 400708c:	308001cc 	andi	r2,r6,7
 4007090:	10000426 	beq	r2,zero,40070a4 <__truncdfsf2+0x78>
 4007094:	308003cc 	andi	r2,r6,15
 4007098:	01000104 	movi	r4,4
 400709c:	11000126 	beq	r2,r4,40070a4 <__truncdfsf2+0x78>
 40070a0:	31800104 	addi	r6,r6,4
 40070a4:	3081002c 	andhi	r2,r6,1024
 40070a8:	10001626 	beq	r2,zero,4007104 <__truncdfsf2+0xd8>
 40070ac:	18c00044 	addi	r3,r3,1
 40070b0:	00803fc4 	movi	r2,255
 40070b4:	18800326 	beq	r3,r2,40070c4 <__truncdfsf2+0x98>
 40070b8:	300c91ba 	slli	r6,r6,6
 40070bc:	300cd27a 	srli	r6,r6,9
 40070c0:	00000206 	br	40070cc <__truncdfsf2+0xa0>
 40070c4:	00ffffc4 	movi	r3,-1
 40070c8:	000d883a 	mov	r6,zero
 40070cc:	18c03fcc 	andi	r3,r3,255
 40070d0:	180895fa 	slli	r4,r3,23
 40070d4:	00c02034 	movhi	r3,128
 40070d8:	280a97fa 	slli	r5,r5,31
 40070dc:	18ffffc4 	addi	r3,r3,-1
 40070e0:	30c6703a 	and	r3,r6,r3
 40070e4:	1906b03a 	or	r3,r3,r4
 40070e8:	1944b03a 	or	r2,r3,r5
 40070ec:	f800283a 	ret
 40070f0:	40000b1e 	bne	r8,zero,4007120 <__truncdfsf2+0xf4>
 40070f4:	388cb03a 	or	r6,r7,r2
 40070f8:	0007883a 	mov	r3,zero
 40070fc:	30000426 	beq	r6,zero,4007110 <__truncdfsf2+0xe4>
 4007100:	01800144 	movi	r6,5
 4007104:	00803fc4 	movi	r2,255
 4007108:	300cd0fa 	srli	r6,r6,3
 400710c:	18800a26 	beq	r3,r2,4007138 <__truncdfsf2+0x10c>
 4007110:	00802034 	movhi	r2,128
 4007114:	10bfffc4 	addi	r2,r2,-1
 4007118:	308c703a 	and	r6,r6,r2
 400711c:	003feb06 	br	40070cc <__alt_data_end+0xfc0070cc>
 4007120:	3888b03a 	or	r4,r7,r2
 4007124:	203fe726 	beq	r4,zero,40070c4 <__alt_data_end+0xfc0070c4>
 4007128:	380c90fa 	slli	r6,r7,3
 400712c:	00c03fc4 	movi	r3,255
 4007130:	31808034 	orhi	r6,r6,512
 4007134:	003fd506 	br	400708c <__alt_data_end+0xfc00708c>
 4007138:	303fe226 	beq	r6,zero,40070c4 <__alt_data_end+0xfc0070c4>
 400713c:	00802034 	movhi	r2,128
 4007140:	31801034 	orhi	r6,r6,64
 4007144:	10bfffc4 	addi	r2,r2,-1
 4007148:	00ffffc4 	movi	r3,-1
 400714c:	308c703a 	and	r6,r6,r2
 4007150:	003fde06 	br	40070cc <__alt_data_end+0xfc0070cc>
 4007154:	013ffa44 	movi	r4,-23
 4007158:	19000e16 	blt	r3,r4,4007194 <__truncdfsf2+0x168>
 400715c:	01000784 	movi	r4,30
 4007160:	20c9c83a 	sub	r4,r4,r3
 4007164:	018007c4 	movi	r6,31
 4007168:	39c02034 	orhi	r7,r7,128
 400716c:	31000b16 	blt	r6,r4,400719c <__truncdfsf2+0x170>
 4007170:	423f2084 	addi	r8,r8,-894
 4007174:	120c983a 	sll	r6,r2,r8
 4007178:	3a0e983a 	sll	r7,r7,r8
 400717c:	1104d83a 	srl	r2,r2,r4
 4007180:	300cc03a 	cmpne	r6,r6,zero
 4007184:	31ceb03a 	or	r7,r6,r7
 4007188:	388cb03a 	or	r6,r7,r2
 400718c:	0007883a 	mov	r3,zero
 4007190:	003fbe06 	br	400708c <__alt_data_end+0xfc00708c>
 4007194:	0007883a 	mov	r3,zero
 4007198:	003fd906 	br	4007100 <__alt_data_end+0xfc007100>
 400719c:	01bfff84 	movi	r6,-2
 40071a0:	30cdc83a 	sub	r6,r6,r3
 40071a4:	00c00804 	movi	r3,32
 40071a8:	398cd83a 	srl	r6,r7,r6
 40071ac:	20c00726 	beq	r4,r3,40071cc <__truncdfsf2+0x1a0>
 40071b0:	423f2884 	addi	r8,r8,-862
 40071b4:	3a0e983a 	sll	r7,r7,r8
 40071b8:	3884b03a 	or	r2,r7,r2
 40071bc:	1004c03a 	cmpne	r2,r2,zero
 40071c0:	118cb03a 	or	r6,r2,r6
 40071c4:	0007883a 	mov	r3,zero
 40071c8:	003fb006 	br	400708c <__alt_data_end+0xfc00708c>
 40071cc:	000f883a 	mov	r7,zero
 40071d0:	003ff906 	br	40071b8 <__alt_data_end+0xfc0071b8>

040071d4 <__clzsi2>:
 40071d4:	00bfffd4 	movui	r2,65535
 40071d8:	11000536 	bltu	r2,r4,40071f0 <__clzsi2+0x1c>
 40071dc:	00803fc4 	movi	r2,255
 40071e0:	11000f36 	bltu	r2,r4,4007220 <__clzsi2+0x4c>
 40071e4:	00800804 	movi	r2,32
 40071e8:	0007883a 	mov	r3,zero
 40071ec:	00000506 	br	4007204 <__clzsi2+0x30>
 40071f0:	00804034 	movhi	r2,256
 40071f4:	10bfffc4 	addi	r2,r2,-1
 40071f8:	11000c2e 	bgeu	r2,r4,400722c <__clzsi2+0x58>
 40071fc:	00800204 	movi	r2,8
 4007200:	00c00604 	movi	r3,24
 4007204:	20c8d83a 	srl	r4,r4,r3
 4007208:	00c10074 	movhi	r3,1025
 400720c:	18ea3804 	addi	r3,r3,-22304
 4007210:	1909883a 	add	r4,r3,r4
 4007214:	20c00003 	ldbu	r3,0(r4)
 4007218:	10c5c83a 	sub	r2,r2,r3
 400721c:	f800283a 	ret
 4007220:	00800604 	movi	r2,24
 4007224:	00c00204 	movi	r3,8
 4007228:	003ff606 	br	4007204 <__alt_data_end+0xfc007204>
 400722c:	00800404 	movi	r2,16
 4007230:	1007883a 	mov	r3,r2
 4007234:	003ff306 	br	4007204 <__alt_data_end+0xfc007204>

04007238 <__divsi3>:
 4007238:	20001b16 	blt	r4,zero,40072a8 <__divsi3+0x70>
 400723c:	000f883a 	mov	r7,zero
 4007240:	28001616 	blt	r5,zero,400729c <__divsi3+0x64>
 4007244:	200d883a 	mov	r6,r4
 4007248:	29001a2e 	bgeu	r5,r4,40072b4 <__divsi3+0x7c>
 400724c:	00800804 	movi	r2,32
 4007250:	00c00044 	movi	r3,1
 4007254:	00000106 	br	400725c <__divsi3+0x24>
 4007258:	10000d26 	beq	r2,zero,4007290 <__divsi3+0x58>
 400725c:	294b883a 	add	r5,r5,r5
 4007260:	10bfffc4 	addi	r2,r2,-1
 4007264:	18c7883a 	add	r3,r3,r3
 4007268:	293ffb36 	bltu	r5,r4,4007258 <__alt_data_end+0xfc007258>
 400726c:	0005883a 	mov	r2,zero
 4007270:	18000726 	beq	r3,zero,4007290 <__divsi3+0x58>
 4007274:	0005883a 	mov	r2,zero
 4007278:	31400236 	bltu	r6,r5,4007284 <__divsi3+0x4c>
 400727c:	314dc83a 	sub	r6,r6,r5
 4007280:	10c4b03a 	or	r2,r2,r3
 4007284:	1806d07a 	srli	r3,r3,1
 4007288:	280ad07a 	srli	r5,r5,1
 400728c:	183ffa1e 	bne	r3,zero,4007278 <__alt_data_end+0xfc007278>
 4007290:	38000126 	beq	r7,zero,4007298 <__divsi3+0x60>
 4007294:	0085c83a 	sub	r2,zero,r2
 4007298:	f800283a 	ret
 400729c:	014bc83a 	sub	r5,zero,r5
 40072a0:	39c0005c 	xori	r7,r7,1
 40072a4:	003fe706 	br	4007244 <__alt_data_end+0xfc007244>
 40072a8:	0109c83a 	sub	r4,zero,r4
 40072ac:	01c00044 	movi	r7,1
 40072b0:	003fe306 	br	4007240 <__alt_data_end+0xfc007240>
 40072b4:	00c00044 	movi	r3,1
 40072b8:	003fee06 	br	4007274 <__alt_data_end+0xfc007274>

040072bc <__modsi3>:
 40072bc:	20001716 	blt	r4,zero,400731c <__modsi3+0x60>
 40072c0:	000f883a 	mov	r7,zero
 40072c4:	2005883a 	mov	r2,r4
 40072c8:	28001216 	blt	r5,zero,4007314 <__modsi3+0x58>
 40072cc:	2900162e 	bgeu	r5,r4,4007328 <__modsi3+0x6c>
 40072d0:	01800804 	movi	r6,32
 40072d4:	00c00044 	movi	r3,1
 40072d8:	00000106 	br	40072e0 <__modsi3+0x24>
 40072dc:	30000a26 	beq	r6,zero,4007308 <__modsi3+0x4c>
 40072e0:	294b883a 	add	r5,r5,r5
 40072e4:	31bfffc4 	addi	r6,r6,-1
 40072e8:	18c7883a 	add	r3,r3,r3
 40072ec:	293ffb36 	bltu	r5,r4,40072dc <__alt_data_end+0xfc0072dc>
 40072f0:	18000526 	beq	r3,zero,4007308 <__modsi3+0x4c>
 40072f4:	1806d07a 	srli	r3,r3,1
 40072f8:	11400136 	bltu	r2,r5,4007300 <__modsi3+0x44>
 40072fc:	1145c83a 	sub	r2,r2,r5
 4007300:	280ad07a 	srli	r5,r5,1
 4007304:	183ffb1e 	bne	r3,zero,40072f4 <__alt_data_end+0xfc0072f4>
 4007308:	38000126 	beq	r7,zero,4007310 <__modsi3+0x54>
 400730c:	0085c83a 	sub	r2,zero,r2
 4007310:	f800283a 	ret
 4007314:	014bc83a 	sub	r5,zero,r5
 4007318:	003fec06 	br	40072cc <__alt_data_end+0xfc0072cc>
 400731c:	0109c83a 	sub	r4,zero,r4
 4007320:	01c00044 	movi	r7,1
 4007324:	003fe706 	br	40072c4 <__alt_data_end+0xfc0072c4>
 4007328:	00c00044 	movi	r3,1
 400732c:	003ff106 	br	40072f4 <__alt_data_end+0xfc0072f4>

04007330 <__udivsi3>:
 4007330:	200d883a 	mov	r6,r4
 4007334:	2900152e 	bgeu	r5,r4,400738c <__udivsi3+0x5c>
 4007338:	28001416 	blt	r5,zero,400738c <__udivsi3+0x5c>
 400733c:	00800804 	movi	r2,32
 4007340:	00c00044 	movi	r3,1
 4007344:	00000206 	br	4007350 <__udivsi3+0x20>
 4007348:	10000e26 	beq	r2,zero,4007384 <__udivsi3+0x54>
 400734c:	28000516 	blt	r5,zero,4007364 <__udivsi3+0x34>
 4007350:	294b883a 	add	r5,r5,r5
 4007354:	10bfffc4 	addi	r2,r2,-1
 4007358:	18c7883a 	add	r3,r3,r3
 400735c:	293ffa36 	bltu	r5,r4,4007348 <__alt_data_end+0xfc007348>
 4007360:	18000826 	beq	r3,zero,4007384 <__udivsi3+0x54>
 4007364:	0005883a 	mov	r2,zero
 4007368:	31400236 	bltu	r6,r5,4007374 <__udivsi3+0x44>
 400736c:	314dc83a 	sub	r6,r6,r5
 4007370:	10c4b03a 	or	r2,r2,r3
 4007374:	1806d07a 	srli	r3,r3,1
 4007378:	280ad07a 	srli	r5,r5,1
 400737c:	183ffa1e 	bne	r3,zero,4007368 <__alt_data_end+0xfc007368>
 4007380:	f800283a 	ret
 4007384:	0005883a 	mov	r2,zero
 4007388:	f800283a 	ret
 400738c:	00c00044 	movi	r3,1
 4007390:	003ff406 	br	4007364 <__alt_data_end+0xfc007364>

04007394 <__umodsi3>:
 4007394:	2005883a 	mov	r2,r4
 4007398:	2900122e 	bgeu	r5,r4,40073e4 <__umodsi3+0x50>
 400739c:	28001116 	blt	r5,zero,40073e4 <__umodsi3+0x50>
 40073a0:	01800804 	movi	r6,32
 40073a4:	00c00044 	movi	r3,1
 40073a8:	00000206 	br	40073b4 <__umodsi3+0x20>
 40073ac:	30000c26 	beq	r6,zero,40073e0 <__umodsi3+0x4c>
 40073b0:	28000516 	blt	r5,zero,40073c8 <__umodsi3+0x34>
 40073b4:	294b883a 	add	r5,r5,r5
 40073b8:	31bfffc4 	addi	r6,r6,-1
 40073bc:	18c7883a 	add	r3,r3,r3
 40073c0:	293ffa36 	bltu	r5,r4,40073ac <__alt_data_end+0xfc0073ac>
 40073c4:	18000626 	beq	r3,zero,40073e0 <__umodsi3+0x4c>
 40073c8:	1806d07a 	srli	r3,r3,1
 40073cc:	11400136 	bltu	r2,r5,40073d4 <__umodsi3+0x40>
 40073d0:	1145c83a 	sub	r2,r2,r5
 40073d4:	280ad07a 	srli	r5,r5,1
 40073d8:	183ffb1e 	bne	r3,zero,40073c8 <__alt_data_end+0xfc0073c8>
 40073dc:	f800283a 	ret
 40073e0:	f800283a 	ret
 40073e4:	00c00044 	movi	r3,1
 40073e8:	003ff706 	br	40073c8 <__alt_data_end+0xfc0073c8>

040073ec <__mulsi3>:
 40073ec:	0005883a 	mov	r2,zero
 40073f0:	20000726 	beq	r4,zero,4007410 <__mulsi3+0x24>
 40073f4:	20c0004c 	andi	r3,r4,1
 40073f8:	2008d07a 	srli	r4,r4,1
 40073fc:	18000126 	beq	r3,zero,4007404 <__mulsi3+0x18>
 4007400:	1145883a 	add	r2,r2,r5
 4007404:	294b883a 	add	r5,r5,r5
 4007408:	203ffa1e 	bne	r4,zero,40073f4 <__alt_data_end+0xfc0073f4>
 400740c:	f800283a 	ret
 4007410:	f800283a 	ret

04007414 <__errno>:
 4007414:	00810074 	movhi	r2,1025
 4007418:	10b1f704 	addi	r2,r2,-14372
 400741c:	10800017 	ldw	r2,0(r2)
 4007420:	f800283a 	ret

04007424 <malloc>:
 4007424:	00810074 	movhi	r2,1025
 4007428:	10b1f704 	addi	r2,r2,-14372
 400742c:	200b883a 	mov	r5,r4
 4007430:	11000017 	ldw	r4,0(r2)
 4007434:	400744c1 	jmpi	400744c <_malloc_r>

04007438 <free>:
 4007438:	00810074 	movhi	r2,1025
 400743c:	10b1f704 	addi	r2,r2,-14372
 4007440:	200b883a 	mov	r5,r4
 4007444:	11000017 	ldw	r4,0(r2)
 4007448:	4007dd01 	jmpi	4007dd0 <_free_r>

0400744c <_malloc_r>:
 400744c:	defff504 	addi	sp,sp,-44
 4007450:	dc800315 	stw	r18,12(sp)
 4007454:	dfc00a15 	stw	ra,40(sp)
 4007458:	df000915 	stw	fp,36(sp)
 400745c:	ddc00815 	stw	r23,32(sp)
 4007460:	dd800715 	stw	r22,28(sp)
 4007464:	dd400615 	stw	r21,24(sp)
 4007468:	dd000515 	stw	r20,20(sp)
 400746c:	dcc00415 	stw	r19,16(sp)
 4007470:	dc400215 	stw	r17,8(sp)
 4007474:	dc000115 	stw	r16,4(sp)
 4007478:	288002c4 	addi	r2,r5,11
 400747c:	00c00584 	movi	r3,22
 4007480:	2025883a 	mov	r18,r4
 4007484:	18807f2e 	bgeu	r3,r2,4007684 <_malloc_r+0x238>
 4007488:	047ffe04 	movi	r17,-8
 400748c:	1462703a 	and	r17,r2,r17
 4007490:	8800a316 	blt	r17,zero,4007720 <_malloc_r+0x2d4>
 4007494:	8940a236 	bltu	r17,r5,4007720 <_malloc_r+0x2d4>
 4007498:	40082480 	call	4008248 <__malloc_lock>
 400749c:	00807dc4 	movi	r2,503
 40074a0:	1441e92e 	bgeu	r2,r17,4007c48 <_malloc_r+0x7fc>
 40074a4:	8804d27a 	srli	r2,r17,9
 40074a8:	1000a126 	beq	r2,zero,4007730 <_malloc_r+0x2e4>
 40074ac:	00c00104 	movi	r3,4
 40074b0:	18811e36 	bltu	r3,r2,400792c <_malloc_r+0x4e0>
 40074b4:	8804d1ba 	srli	r2,r17,6
 40074b8:	12000e44 	addi	r8,r2,57
 40074bc:	11c00e04 	addi	r7,r2,56
 40074c0:	4209883a 	add	r4,r8,r8
 40074c4:	04c10074 	movhi	r19,1025
 40074c8:	2109883a 	add	r4,r4,r4
 40074cc:	9cec6f04 	addi	r19,r19,-20036
 40074d0:	2109883a 	add	r4,r4,r4
 40074d4:	9909883a 	add	r4,r19,r4
 40074d8:	24000117 	ldw	r16,4(r4)
 40074dc:	213ffe04 	addi	r4,r4,-8
 40074e0:	24009726 	beq	r4,r16,4007740 <_malloc_r+0x2f4>
 40074e4:	80800117 	ldw	r2,4(r16)
 40074e8:	01bfff04 	movi	r6,-4
 40074ec:	014003c4 	movi	r5,15
 40074f0:	1184703a 	and	r2,r2,r6
 40074f4:	1447c83a 	sub	r3,r2,r17
 40074f8:	28c00716 	blt	r5,r3,4007518 <_malloc_r+0xcc>
 40074fc:	1800920e 	bge	r3,zero,4007748 <_malloc_r+0x2fc>
 4007500:	84000317 	ldw	r16,12(r16)
 4007504:	24008e26 	beq	r4,r16,4007740 <_malloc_r+0x2f4>
 4007508:	80800117 	ldw	r2,4(r16)
 400750c:	1184703a 	and	r2,r2,r6
 4007510:	1447c83a 	sub	r3,r2,r17
 4007514:	28fff90e 	bge	r5,r3,40074fc <__alt_data_end+0xfc0074fc>
 4007518:	3809883a 	mov	r4,r7
 400751c:	01810074 	movhi	r6,1025
 4007520:	9c000417 	ldw	r16,16(r19)
 4007524:	31ac6f04 	addi	r6,r6,-20036
 4007528:	32000204 	addi	r8,r6,8
 400752c:	82013426 	beq	r16,r8,4007a00 <_malloc_r+0x5b4>
 4007530:	80c00117 	ldw	r3,4(r16)
 4007534:	00bfff04 	movi	r2,-4
 4007538:	188e703a 	and	r7,r3,r2
 400753c:	3c45c83a 	sub	r2,r7,r17
 4007540:	00c003c4 	movi	r3,15
 4007544:	18811f16 	blt	r3,r2,40079c4 <_malloc_r+0x578>
 4007548:	32000515 	stw	r8,20(r6)
 400754c:	32000415 	stw	r8,16(r6)
 4007550:	10007f0e 	bge	r2,zero,4007750 <_malloc_r+0x304>
 4007554:	00807fc4 	movi	r2,511
 4007558:	11c0fd36 	bltu	r2,r7,4007950 <_malloc_r+0x504>
 400755c:	3806d0fa 	srli	r3,r7,3
 4007560:	01c00044 	movi	r7,1
 4007564:	30800117 	ldw	r2,4(r6)
 4007568:	19400044 	addi	r5,r3,1
 400756c:	294b883a 	add	r5,r5,r5
 4007570:	1807d0ba 	srai	r3,r3,2
 4007574:	294b883a 	add	r5,r5,r5
 4007578:	294b883a 	add	r5,r5,r5
 400757c:	298b883a 	add	r5,r5,r6
 4007580:	38c6983a 	sll	r3,r7,r3
 4007584:	29c00017 	ldw	r7,0(r5)
 4007588:	2a7ffe04 	addi	r9,r5,-8
 400758c:	1886b03a 	or	r3,r3,r2
 4007590:	82400315 	stw	r9,12(r16)
 4007594:	81c00215 	stw	r7,8(r16)
 4007598:	30c00115 	stw	r3,4(r6)
 400759c:	2c000015 	stw	r16,0(r5)
 40075a0:	3c000315 	stw	r16,12(r7)
 40075a4:	2005d0ba 	srai	r2,r4,2
 40075a8:	01400044 	movi	r5,1
 40075ac:	288a983a 	sll	r5,r5,r2
 40075b0:	19406f36 	bltu	r3,r5,4007770 <_malloc_r+0x324>
 40075b4:	28c4703a 	and	r2,r5,r3
 40075b8:	10000a1e 	bne	r2,zero,40075e4 <_malloc_r+0x198>
 40075bc:	00bfff04 	movi	r2,-4
 40075c0:	294b883a 	add	r5,r5,r5
 40075c4:	2088703a 	and	r4,r4,r2
 40075c8:	28c4703a 	and	r2,r5,r3
 40075cc:	21000104 	addi	r4,r4,4
 40075d0:	1000041e 	bne	r2,zero,40075e4 <_malloc_r+0x198>
 40075d4:	294b883a 	add	r5,r5,r5
 40075d8:	28c4703a 	and	r2,r5,r3
 40075dc:	21000104 	addi	r4,r4,4
 40075e0:	103ffc26 	beq	r2,zero,40075d4 <__alt_data_end+0xfc0075d4>
 40075e4:	02bfff04 	movi	r10,-4
 40075e8:	024003c4 	movi	r9,15
 40075ec:	21800044 	addi	r6,r4,1
 40075f0:	318d883a 	add	r6,r6,r6
 40075f4:	318d883a 	add	r6,r6,r6
 40075f8:	318d883a 	add	r6,r6,r6
 40075fc:	998d883a 	add	r6,r19,r6
 4007600:	333ffe04 	addi	r12,r6,-8
 4007604:	2017883a 	mov	r11,r4
 4007608:	31800104 	addi	r6,r6,4
 400760c:	34000017 	ldw	r16,0(r6)
 4007610:	31fffd04 	addi	r7,r6,-12
 4007614:	81c0041e 	bne	r16,r7,4007628 <_malloc_r+0x1dc>
 4007618:	0000fb06 	br	4007a08 <_malloc_r+0x5bc>
 400761c:	1801030e 	bge	r3,zero,4007a2c <_malloc_r+0x5e0>
 4007620:	84000317 	ldw	r16,12(r16)
 4007624:	81c0f826 	beq	r16,r7,4007a08 <_malloc_r+0x5bc>
 4007628:	80800117 	ldw	r2,4(r16)
 400762c:	1284703a 	and	r2,r2,r10
 4007630:	1447c83a 	sub	r3,r2,r17
 4007634:	48fff90e 	bge	r9,r3,400761c <__alt_data_end+0xfc00761c>
 4007638:	80800317 	ldw	r2,12(r16)
 400763c:	81000217 	ldw	r4,8(r16)
 4007640:	89400054 	ori	r5,r17,1
 4007644:	81400115 	stw	r5,4(r16)
 4007648:	20800315 	stw	r2,12(r4)
 400764c:	11000215 	stw	r4,8(r2)
 4007650:	8463883a 	add	r17,r16,r17
 4007654:	9c400515 	stw	r17,20(r19)
 4007658:	9c400415 	stw	r17,16(r19)
 400765c:	18800054 	ori	r2,r3,1
 4007660:	88800115 	stw	r2,4(r17)
 4007664:	8a000315 	stw	r8,12(r17)
 4007668:	8a000215 	stw	r8,8(r17)
 400766c:	88e3883a 	add	r17,r17,r3
 4007670:	88c00015 	stw	r3,0(r17)
 4007674:	9009883a 	mov	r4,r18
 4007678:	400826c0 	call	400826c <__malloc_unlock>
 400767c:	80800204 	addi	r2,r16,8
 4007680:	00001b06 	br	40076f0 <_malloc_r+0x2a4>
 4007684:	04400404 	movi	r17,16
 4007688:	89402536 	bltu	r17,r5,4007720 <_malloc_r+0x2d4>
 400768c:	40082480 	call	4008248 <__malloc_lock>
 4007690:	00800184 	movi	r2,6
 4007694:	01000084 	movi	r4,2
 4007698:	04c10074 	movhi	r19,1025
 400769c:	1085883a 	add	r2,r2,r2
 40076a0:	9cec6f04 	addi	r19,r19,-20036
 40076a4:	1085883a 	add	r2,r2,r2
 40076a8:	9885883a 	add	r2,r19,r2
 40076ac:	14000117 	ldw	r16,4(r2)
 40076b0:	10fffe04 	addi	r3,r2,-8
 40076b4:	80c0d926 	beq	r16,r3,4007a1c <_malloc_r+0x5d0>
 40076b8:	80c00117 	ldw	r3,4(r16)
 40076bc:	81000317 	ldw	r4,12(r16)
 40076c0:	00bfff04 	movi	r2,-4
 40076c4:	1884703a 	and	r2,r3,r2
 40076c8:	81400217 	ldw	r5,8(r16)
 40076cc:	8085883a 	add	r2,r16,r2
 40076d0:	10c00117 	ldw	r3,4(r2)
 40076d4:	29000315 	stw	r4,12(r5)
 40076d8:	21400215 	stw	r5,8(r4)
 40076dc:	18c00054 	ori	r3,r3,1
 40076e0:	10c00115 	stw	r3,4(r2)
 40076e4:	9009883a 	mov	r4,r18
 40076e8:	400826c0 	call	400826c <__malloc_unlock>
 40076ec:	80800204 	addi	r2,r16,8
 40076f0:	dfc00a17 	ldw	ra,40(sp)
 40076f4:	df000917 	ldw	fp,36(sp)
 40076f8:	ddc00817 	ldw	r23,32(sp)
 40076fc:	dd800717 	ldw	r22,28(sp)
 4007700:	dd400617 	ldw	r21,24(sp)
 4007704:	dd000517 	ldw	r20,20(sp)
 4007708:	dcc00417 	ldw	r19,16(sp)
 400770c:	dc800317 	ldw	r18,12(sp)
 4007710:	dc400217 	ldw	r17,8(sp)
 4007714:	dc000117 	ldw	r16,4(sp)
 4007718:	dec00b04 	addi	sp,sp,44
 400771c:	f800283a 	ret
 4007720:	00800304 	movi	r2,12
 4007724:	90800015 	stw	r2,0(r18)
 4007728:	0005883a 	mov	r2,zero
 400772c:	003ff006 	br	40076f0 <__alt_data_end+0xfc0076f0>
 4007730:	01002004 	movi	r4,128
 4007734:	02001004 	movi	r8,64
 4007738:	01c00fc4 	movi	r7,63
 400773c:	003f6106 	br	40074c4 <__alt_data_end+0xfc0074c4>
 4007740:	4009883a 	mov	r4,r8
 4007744:	003f7506 	br	400751c <__alt_data_end+0xfc00751c>
 4007748:	81000317 	ldw	r4,12(r16)
 400774c:	003fde06 	br	40076c8 <__alt_data_end+0xfc0076c8>
 4007750:	81c5883a 	add	r2,r16,r7
 4007754:	11400117 	ldw	r5,4(r2)
 4007758:	9009883a 	mov	r4,r18
 400775c:	29400054 	ori	r5,r5,1
 4007760:	11400115 	stw	r5,4(r2)
 4007764:	400826c0 	call	400826c <__malloc_unlock>
 4007768:	80800204 	addi	r2,r16,8
 400776c:	003fe006 	br	40076f0 <__alt_data_end+0xfc0076f0>
 4007770:	9c000217 	ldw	r16,8(r19)
 4007774:	00bfff04 	movi	r2,-4
 4007778:	85800117 	ldw	r22,4(r16)
 400777c:	b0ac703a 	and	r22,r22,r2
 4007780:	b4400336 	bltu	r22,r17,4007790 <_malloc_r+0x344>
 4007784:	b445c83a 	sub	r2,r22,r17
 4007788:	00c003c4 	movi	r3,15
 400778c:	18805d16 	blt	r3,r2,4007904 <_malloc_r+0x4b8>
 4007790:	05c10074 	movhi	r23,1025
 4007794:	00810074 	movhi	r2,1025
 4007798:	10b98404 	addi	r2,r2,-6640
 400779c:	bdf1f804 	addi	r23,r23,-14368
 40077a0:	15400017 	ldw	r21,0(r2)
 40077a4:	b8c00017 	ldw	r3,0(r23)
 40077a8:	00bfffc4 	movi	r2,-1
 40077ac:	858d883a 	add	r6,r16,r22
 40077b0:	8d6b883a 	add	r21,r17,r21
 40077b4:	1880ea26 	beq	r3,r2,4007b60 <_malloc_r+0x714>
 40077b8:	ad4403c4 	addi	r21,r21,4111
 40077bc:	00bc0004 	movi	r2,-4096
 40077c0:	a8aa703a 	and	r21,r21,r2
 40077c4:	a80b883a 	mov	r5,r21
 40077c8:	9009883a 	mov	r4,r18
 40077cc:	d9800015 	stw	r6,0(sp)
 40077d0:	4007c580 	call	4007c58 <_sbrk_r>
 40077d4:	1029883a 	mov	r20,r2
 40077d8:	00bfffc4 	movi	r2,-1
 40077dc:	d9800017 	ldw	r6,0(sp)
 40077e0:	a080e826 	beq	r20,r2,4007b84 <_malloc_r+0x738>
 40077e4:	a180a636 	bltu	r20,r6,4007a80 <_malloc_r+0x634>
 40077e8:	07010074 	movhi	fp,1025
 40077ec:	e7398d04 	addi	fp,fp,-6604
 40077f0:	e0800017 	ldw	r2,0(fp)
 40077f4:	a887883a 	add	r3,r21,r2
 40077f8:	e0c00015 	stw	r3,0(fp)
 40077fc:	3500e626 	beq	r6,r20,4007b98 <_malloc_r+0x74c>
 4007800:	b9000017 	ldw	r4,0(r23)
 4007804:	00bfffc4 	movi	r2,-1
 4007808:	2080ee26 	beq	r4,r2,4007bc4 <_malloc_r+0x778>
 400780c:	a185c83a 	sub	r2,r20,r6
 4007810:	10c5883a 	add	r2,r2,r3
 4007814:	e0800015 	stw	r2,0(fp)
 4007818:	a0c001cc 	andi	r3,r20,7
 400781c:	1800bc26 	beq	r3,zero,4007b10 <_malloc_r+0x6c4>
 4007820:	a0e9c83a 	sub	r20,r20,r3
 4007824:	00840204 	movi	r2,4104
 4007828:	a5000204 	addi	r20,r20,8
 400782c:	10c7c83a 	sub	r3,r2,r3
 4007830:	a545883a 	add	r2,r20,r21
 4007834:	1083ffcc 	andi	r2,r2,4095
 4007838:	18abc83a 	sub	r21,r3,r2
 400783c:	a80b883a 	mov	r5,r21
 4007840:	9009883a 	mov	r4,r18
 4007844:	4007c580 	call	4007c58 <_sbrk_r>
 4007848:	00ffffc4 	movi	r3,-1
 400784c:	10c0e126 	beq	r2,r3,4007bd4 <_malloc_r+0x788>
 4007850:	1505c83a 	sub	r2,r2,r20
 4007854:	1545883a 	add	r2,r2,r21
 4007858:	10800054 	ori	r2,r2,1
 400785c:	e0c00017 	ldw	r3,0(fp)
 4007860:	9d000215 	stw	r20,8(r19)
 4007864:	a0800115 	stw	r2,4(r20)
 4007868:	a8c7883a 	add	r3,r21,r3
 400786c:	e0c00015 	stw	r3,0(fp)
 4007870:	84c00e26 	beq	r16,r19,40078ac <_malloc_r+0x460>
 4007874:	018003c4 	movi	r6,15
 4007878:	3580a72e 	bgeu	r6,r22,4007b18 <_malloc_r+0x6cc>
 400787c:	81400117 	ldw	r5,4(r16)
 4007880:	013ffe04 	movi	r4,-8
 4007884:	b0bffd04 	addi	r2,r22,-12
 4007888:	1104703a 	and	r2,r2,r4
 400788c:	2900004c 	andi	r4,r5,1
 4007890:	2088b03a 	or	r4,r4,r2
 4007894:	81000115 	stw	r4,4(r16)
 4007898:	01400144 	movi	r5,5
 400789c:	8089883a 	add	r4,r16,r2
 40078a0:	21400115 	stw	r5,4(r4)
 40078a4:	21400215 	stw	r5,8(r4)
 40078a8:	3080cd36 	bltu	r6,r2,4007be0 <_malloc_r+0x794>
 40078ac:	00810074 	movhi	r2,1025
 40078b0:	10b98304 	addi	r2,r2,-6644
 40078b4:	11000017 	ldw	r4,0(r2)
 40078b8:	20c0012e 	bgeu	r4,r3,40078c0 <_malloc_r+0x474>
 40078bc:	10c00015 	stw	r3,0(r2)
 40078c0:	00810074 	movhi	r2,1025
 40078c4:	10b98204 	addi	r2,r2,-6648
 40078c8:	11000017 	ldw	r4,0(r2)
 40078cc:	9c000217 	ldw	r16,8(r19)
 40078d0:	20c0012e 	bgeu	r4,r3,40078d8 <_malloc_r+0x48c>
 40078d4:	10c00015 	stw	r3,0(r2)
 40078d8:	80c00117 	ldw	r3,4(r16)
 40078dc:	00bfff04 	movi	r2,-4
 40078e0:	1886703a 	and	r3,r3,r2
 40078e4:	1c45c83a 	sub	r2,r3,r17
 40078e8:	1c400236 	bltu	r3,r17,40078f4 <_malloc_r+0x4a8>
 40078ec:	00c003c4 	movi	r3,15
 40078f0:	18800416 	blt	r3,r2,4007904 <_malloc_r+0x4b8>
 40078f4:	9009883a 	mov	r4,r18
 40078f8:	400826c0 	call	400826c <__malloc_unlock>
 40078fc:	0005883a 	mov	r2,zero
 4007900:	003f7b06 	br	40076f0 <__alt_data_end+0xfc0076f0>
 4007904:	88c00054 	ori	r3,r17,1
 4007908:	80c00115 	stw	r3,4(r16)
 400790c:	8463883a 	add	r17,r16,r17
 4007910:	10800054 	ori	r2,r2,1
 4007914:	9c400215 	stw	r17,8(r19)
 4007918:	88800115 	stw	r2,4(r17)
 400791c:	9009883a 	mov	r4,r18
 4007920:	400826c0 	call	400826c <__malloc_unlock>
 4007924:	80800204 	addi	r2,r16,8
 4007928:	003f7106 	br	40076f0 <__alt_data_end+0xfc0076f0>
 400792c:	00c00504 	movi	r3,20
 4007930:	18804a2e 	bgeu	r3,r2,4007a5c <_malloc_r+0x610>
 4007934:	00c01504 	movi	r3,84
 4007938:	18806e36 	bltu	r3,r2,4007af4 <_malloc_r+0x6a8>
 400793c:	8804d33a 	srli	r2,r17,12
 4007940:	12001bc4 	addi	r8,r2,111
 4007944:	11c01b84 	addi	r7,r2,110
 4007948:	4209883a 	add	r4,r8,r8
 400794c:	003edd06 	br	40074c4 <__alt_data_end+0xfc0074c4>
 4007950:	3804d27a 	srli	r2,r7,9
 4007954:	00c00104 	movi	r3,4
 4007958:	1880442e 	bgeu	r3,r2,4007a6c <_malloc_r+0x620>
 400795c:	00c00504 	movi	r3,20
 4007960:	18808136 	bltu	r3,r2,4007b68 <_malloc_r+0x71c>
 4007964:	11401704 	addi	r5,r2,92
 4007968:	10c016c4 	addi	r3,r2,91
 400796c:	294b883a 	add	r5,r5,r5
 4007970:	294b883a 	add	r5,r5,r5
 4007974:	294b883a 	add	r5,r5,r5
 4007978:	994b883a 	add	r5,r19,r5
 400797c:	28800017 	ldw	r2,0(r5)
 4007980:	01810074 	movhi	r6,1025
 4007984:	297ffe04 	addi	r5,r5,-8
 4007988:	31ac6f04 	addi	r6,r6,-20036
 400798c:	28806526 	beq	r5,r2,4007b24 <_malloc_r+0x6d8>
 4007990:	01bfff04 	movi	r6,-4
 4007994:	10c00117 	ldw	r3,4(r2)
 4007998:	1986703a 	and	r3,r3,r6
 400799c:	38c0022e 	bgeu	r7,r3,40079a8 <_malloc_r+0x55c>
 40079a0:	10800217 	ldw	r2,8(r2)
 40079a4:	28bffb1e 	bne	r5,r2,4007994 <__alt_data_end+0xfc007994>
 40079a8:	11400317 	ldw	r5,12(r2)
 40079ac:	98c00117 	ldw	r3,4(r19)
 40079b0:	81400315 	stw	r5,12(r16)
 40079b4:	80800215 	stw	r2,8(r16)
 40079b8:	2c000215 	stw	r16,8(r5)
 40079bc:	14000315 	stw	r16,12(r2)
 40079c0:	003ef806 	br	40075a4 <__alt_data_end+0xfc0075a4>
 40079c4:	88c00054 	ori	r3,r17,1
 40079c8:	80c00115 	stw	r3,4(r16)
 40079cc:	8463883a 	add	r17,r16,r17
 40079d0:	34400515 	stw	r17,20(r6)
 40079d4:	34400415 	stw	r17,16(r6)
 40079d8:	10c00054 	ori	r3,r2,1
 40079dc:	8a000315 	stw	r8,12(r17)
 40079e0:	8a000215 	stw	r8,8(r17)
 40079e4:	88c00115 	stw	r3,4(r17)
 40079e8:	88a3883a 	add	r17,r17,r2
 40079ec:	88800015 	stw	r2,0(r17)
 40079f0:	9009883a 	mov	r4,r18
 40079f4:	400826c0 	call	400826c <__malloc_unlock>
 40079f8:	80800204 	addi	r2,r16,8
 40079fc:	003f3c06 	br	40076f0 <__alt_data_end+0xfc0076f0>
 4007a00:	30c00117 	ldw	r3,4(r6)
 4007a04:	003ee706 	br	40075a4 <__alt_data_end+0xfc0075a4>
 4007a08:	5ac00044 	addi	r11,r11,1
 4007a0c:	588000cc 	andi	r2,r11,3
 4007a10:	31800204 	addi	r6,r6,8
 4007a14:	103efd1e 	bne	r2,zero,400760c <__alt_data_end+0xfc00760c>
 4007a18:	00002406 	br	4007aac <_malloc_r+0x660>
 4007a1c:	14000317 	ldw	r16,12(r2)
 4007a20:	143f251e 	bne	r2,r16,40076b8 <__alt_data_end+0xfc0076b8>
 4007a24:	21000084 	addi	r4,r4,2
 4007a28:	003ebc06 	br	400751c <__alt_data_end+0xfc00751c>
 4007a2c:	8085883a 	add	r2,r16,r2
 4007a30:	10c00117 	ldw	r3,4(r2)
 4007a34:	81000317 	ldw	r4,12(r16)
 4007a38:	81400217 	ldw	r5,8(r16)
 4007a3c:	18c00054 	ori	r3,r3,1
 4007a40:	10c00115 	stw	r3,4(r2)
 4007a44:	29000315 	stw	r4,12(r5)
 4007a48:	21400215 	stw	r5,8(r4)
 4007a4c:	9009883a 	mov	r4,r18
 4007a50:	400826c0 	call	400826c <__malloc_unlock>
 4007a54:	80800204 	addi	r2,r16,8
 4007a58:	003f2506 	br	40076f0 <__alt_data_end+0xfc0076f0>
 4007a5c:	12001704 	addi	r8,r2,92
 4007a60:	11c016c4 	addi	r7,r2,91
 4007a64:	4209883a 	add	r4,r8,r8
 4007a68:	003e9606 	br	40074c4 <__alt_data_end+0xfc0074c4>
 4007a6c:	3804d1ba 	srli	r2,r7,6
 4007a70:	11400e44 	addi	r5,r2,57
 4007a74:	10c00e04 	addi	r3,r2,56
 4007a78:	294b883a 	add	r5,r5,r5
 4007a7c:	003fbc06 	br	4007970 <__alt_data_end+0xfc007970>
 4007a80:	84ff5926 	beq	r16,r19,40077e8 <__alt_data_end+0xfc0077e8>
 4007a84:	00810074 	movhi	r2,1025
 4007a88:	10ac6f04 	addi	r2,r2,-20036
 4007a8c:	14000217 	ldw	r16,8(r2)
 4007a90:	00bfff04 	movi	r2,-4
 4007a94:	80c00117 	ldw	r3,4(r16)
 4007a98:	1886703a 	and	r3,r3,r2
 4007a9c:	003f9106 	br	40078e4 <__alt_data_end+0xfc0078e4>
 4007aa0:	60800217 	ldw	r2,8(r12)
 4007aa4:	213fffc4 	addi	r4,r4,-1
 4007aa8:	1300651e 	bne	r2,r12,4007c40 <_malloc_r+0x7f4>
 4007aac:	208000cc 	andi	r2,r4,3
 4007ab0:	633ffe04 	addi	r12,r12,-8
 4007ab4:	103ffa1e 	bne	r2,zero,4007aa0 <__alt_data_end+0xfc007aa0>
 4007ab8:	98800117 	ldw	r2,4(r19)
 4007abc:	0146303a 	nor	r3,zero,r5
 4007ac0:	1884703a 	and	r2,r3,r2
 4007ac4:	98800115 	stw	r2,4(r19)
 4007ac8:	294b883a 	add	r5,r5,r5
 4007acc:	117f2836 	bltu	r2,r5,4007770 <__alt_data_end+0xfc007770>
 4007ad0:	283f2726 	beq	r5,zero,4007770 <__alt_data_end+0xfc007770>
 4007ad4:	2886703a 	and	r3,r5,r2
 4007ad8:	5809883a 	mov	r4,r11
 4007adc:	183ec31e 	bne	r3,zero,40075ec <__alt_data_end+0xfc0075ec>
 4007ae0:	294b883a 	add	r5,r5,r5
 4007ae4:	2886703a 	and	r3,r5,r2
 4007ae8:	21000104 	addi	r4,r4,4
 4007aec:	183ffc26 	beq	r3,zero,4007ae0 <__alt_data_end+0xfc007ae0>
 4007af0:	003ebe06 	br	40075ec <__alt_data_end+0xfc0075ec>
 4007af4:	00c05504 	movi	r3,340
 4007af8:	18801236 	bltu	r3,r2,4007b44 <_malloc_r+0x6f8>
 4007afc:	8804d3fa 	srli	r2,r17,15
 4007b00:	12001e04 	addi	r8,r2,120
 4007b04:	11c01dc4 	addi	r7,r2,119
 4007b08:	4209883a 	add	r4,r8,r8
 4007b0c:	003e6d06 	br	40074c4 <__alt_data_end+0xfc0074c4>
 4007b10:	00c40004 	movi	r3,4096
 4007b14:	003f4606 	br	4007830 <__alt_data_end+0xfc007830>
 4007b18:	00800044 	movi	r2,1
 4007b1c:	a0800115 	stw	r2,4(r20)
 4007b20:	003f7406 	br	40078f4 <__alt_data_end+0xfc0078f4>
 4007b24:	1805d0ba 	srai	r2,r3,2
 4007b28:	01c00044 	movi	r7,1
 4007b2c:	30c00117 	ldw	r3,4(r6)
 4007b30:	388e983a 	sll	r7,r7,r2
 4007b34:	2805883a 	mov	r2,r5
 4007b38:	38c6b03a 	or	r3,r7,r3
 4007b3c:	30c00115 	stw	r3,4(r6)
 4007b40:	003f9b06 	br	40079b0 <__alt_data_end+0xfc0079b0>
 4007b44:	00c15504 	movi	r3,1364
 4007b48:	18801a36 	bltu	r3,r2,4007bb4 <_malloc_r+0x768>
 4007b4c:	8804d4ba 	srli	r2,r17,18
 4007b50:	12001f44 	addi	r8,r2,125
 4007b54:	11c01f04 	addi	r7,r2,124
 4007b58:	4209883a 	add	r4,r8,r8
 4007b5c:	003e5906 	br	40074c4 <__alt_data_end+0xfc0074c4>
 4007b60:	ad400404 	addi	r21,r21,16
 4007b64:	003f1706 	br	40077c4 <__alt_data_end+0xfc0077c4>
 4007b68:	00c01504 	movi	r3,84
 4007b6c:	18802336 	bltu	r3,r2,4007bfc <_malloc_r+0x7b0>
 4007b70:	3804d33a 	srli	r2,r7,12
 4007b74:	11401bc4 	addi	r5,r2,111
 4007b78:	10c01b84 	addi	r3,r2,110
 4007b7c:	294b883a 	add	r5,r5,r5
 4007b80:	003f7b06 	br	4007970 <__alt_data_end+0xfc007970>
 4007b84:	9c000217 	ldw	r16,8(r19)
 4007b88:	00bfff04 	movi	r2,-4
 4007b8c:	80c00117 	ldw	r3,4(r16)
 4007b90:	1886703a 	and	r3,r3,r2
 4007b94:	003f5306 	br	40078e4 <__alt_data_end+0xfc0078e4>
 4007b98:	3083ffcc 	andi	r2,r6,4095
 4007b9c:	103f181e 	bne	r2,zero,4007800 <__alt_data_end+0xfc007800>
 4007ba0:	99000217 	ldw	r4,8(r19)
 4007ba4:	b545883a 	add	r2,r22,r21
 4007ba8:	10800054 	ori	r2,r2,1
 4007bac:	20800115 	stw	r2,4(r4)
 4007bb0:	003f3e06 	br	40078ac <__alt_data_end+0xfc0078ac>
 4007bb4:	01003f84 	movi	r4,254
 4007bb8:	02001fc4 	movi	r8,127
 4007bbc:	01c01f84 	movi	r7,126
 4007bc0:	003e4006 	br	40074c4 <__alt_data_end+0xfc0074c4>
 4007bc4:	00810074 	movhi	r2,1025
 4007bc8:	10b1f804 	addi	r2,r2,-14368
 4007bcc:	15000015 	stw	r20,0(r2)
 4007bd0:	003f1106 	br	4007818 <__alt_data_end+0xfc007818>
 4007bd4:	00800044 	movi	r2,1
 4007bd8:	002b883a 	mov	r21,zero
 4007bdc:	003f1f06 	br	400785c <__alt_data_end+0xfc00785c>
 4007be0:	81400204 	addi	r5,r16,8
 4007be4:	9009883a 	mov	r4,r18
 4007be8:	4007dd00 	call	4007dd0 <_free_r>
 4007bec:	00810074 	movhi	r2,1025
 4007bf0:	10b98d04 	addi	r2,r2,-6604
 4007bf4:	10c00017 	ldw	r3,0(r2)
 4007bf8:	003f2c06 	br	40078ac <__alt_data_end+0xfc0078ac>
 4007bfc:	00c05504 	movi	r3,340
 4007c00:	18800536 	bltu	r3,r2,4007c18 <_malloc_r+0x7cc>
 4007c04:	3804d3fa 	srli	r2,r7,15
 4007c08:	11401e04 	addi	r5,r2,120
 4007c0c:	10c01dc4 	addi	r3,r2,119
 4007c10:	294b883a 	add	r5,r5,r5
 4007c14:	003f5606 	br	4007970 <__alt_data_end+0xfc007970>
 4007c18:	00c15504 	movi	r3,1364
 4007c1c:	18800536 	bltu	r3,r2,4007c34 <_malloc_r+0x7e8>
 4007c20:	3804d4ba 	srli	r2,r7,18
 4007c24:	11401f44 	addi	r5,r2,125
 4007c28:	10c01f04 	addi	r3,r2,124
 4007c2c:	294b883a 	add	r5,r5,r5
 4007c30:	003f4f06 	br	4007970 <__alt_data_end+0xfc007970>
 4007c34:	01403f84 	movi	r5,254
 4007c38:	00c01f84 	movi	r3,126
 4007c3c:	003f4c06 	br	4007970 <__alt_data_end+0xfc007970>
 4007c40:	98800117 	ldw	r2,4(r19)
 4007c44:	003fa006 	br	4007ac8 <__alt_data_end+0xfc007ac8>
 4007c48:	8808d0fa 	srli	r4,r17,3
 4007c4c:	20800044 	addi	r2,r4,1
 4007c50:	1085883a 	add	r2,r2,r2
 4007c54:	003e9006 	br	4007698 <__alt_data_end+0xfc007698>

04007c58 <_sbrk_r>:
 4007c58:	defffd04 	addi	sp,sp,-12
 4007c5c:	dc000015 	stw	r16,0(sp)
 4007c60:	04010074 	movhi	r16,1025
 4007c64:	dc400115 	stw	r17,4(sp)
 4007c68:	84398504 	addi	r16,r16,-6636
 4007c6c:	2023883a 	mov	r17,r4
 4007c70:	2809883a 	mov	r4,r5
 4007c74:	dfc00215 	stw	ra,8(sp)
 4007c78:	80000015 	stw	zero,0(r16)
 4007c7c:	40082900 	call	4008290 <sbrk>
 4007c80:	00ffffc4 	movi	r3,-1
 4007c84:	10c00526 	beq	r2,r3,4007c9c <_sbrk_r+0x44>
 4007c88:	dfc00217 	ldw	ra,8(sp)
 4007c8c:	dc400117 	ldw	r17,4(sp)
 4007c90:	dc000017 	ldw	r16,0(sp)
 4007c94:	dec00304 	addi	sp,sp,12
 4007c98:	f800283a 	ret
 4007c9c:	80c00017 	ldw	r3,0(r16)
 4007ca0:	183ff926 	beq	r3,zero,4007c88 <__alt_data_end+0xfc007c88>
 4007ca4:	88c00015 	stw	r3,0(r17)
 4007ca8:	003ff706 	br	4007c88 <__alt_data_end+0xfc007c88>

04007cac <_malloc_trim_r>:
 4007cac:	defffb04 	addi	sp,sp,-20
 4007cb0:	dcc00315 	stw	r19,12(sp)
 4007cb4:	04c10074 	movhi	r19,1025
 4007cb8:	dc800215 	stw	r18,8(sp)
 4007cbc:	dc400115 	stw	r17,4(sp)
 4007cc0:	dc000015 	stw	r16,0(sp)
 4007cc4:	dfc00415 	stw	ra,16(sp)
 4007cc8:	2821883a 	mov	r16,r5
 4007ccc:	9cec6f04 	addi	r19,r19,-20036
 4007cd0:	2025883a 	mov	r18,r4
 4007cd4:	40082480 	call	4008248 <__malloc_lock>
 4007cd8:	98800217 	ldw	r2,8(r19)
 4007cdc:	14400117 	ldw	r17,4(r2)
 4007ce0:	00bfff04 	movi	r2,-4
 4007ce4:	88a2703a 	and	r17,r17,r2
 4007ce8:	8c21c83a 	sub	r16,r17,r16
 4007cec:	8403fbc4 	addi	r16,r16,4079
 4007cf0:	8020d33a 	srli	r16,r16,12
 4007cf4:	0083ffc4 	movi	r2,4095
 4007cf8:	843fffc4 	addi	r16,r16,-1
 4007cfc:	8020933a 	slli	r16,r16,12
 4007d00:	1400060e 	bge	r2,r16,4007d1c <_malloc_trim_r+0x70>
 4007d04:	000b883a 	mov	r5,zero
 4007d08:	9009883a 	mov	r4,r18
 4007d0c:	4007c580 	call	4007c58 <_sbrk_r>
 4007d10:	98c00217 	ldw	r3,8(r19)
 4007d14:	1c47883a 	add	r3,r3,r17
 4007d18:	10c00a26 	beq	r2,r3,4007d44 <_malloc_trim_r+0x98>
 4007d1c:	9009883a 	mov	r4,r18
 4007d20:	400826c0 	call	400826c <__malloc_unlock>
 4007d24:	0005883a 	mov	r2,zero
 4007d28:	dfc00417 	ldw	ra,16(sp)
 4007d2c:	dcc00317 	ldw	r19,12(sp)
 4007d30:	dc800217 	ldw	r18,8(sp)
 4007d34:	dc400117 	ldw	r17,4(sp)
 4007d38:	dc000017 	ldw	r16,0(sp)
 4007d3c:	dec00504 	addi	sp,sp,20
 4007d40:	f800283a 	ret
 4007d44:	040bc83a 	sub	r5,zero,r16
 4007d48:	9009883a 	mov	r4,r18
 4007d4c:	4007c580 	call	4007c58 <_sbrk_r>
 4007d50:	00ffffc4 	movi	r3,-1
 4007d54:	10c00d26 	beq	r2,r3,4007d8c <_malloc_trim_r+0xe0>
 4007d58:	00c10074 	movhi	r3,1025
 4007d5c:	18f98d04 	addi	r3,r3,-6604
 4007d60:	18800017 	ldw	r2,0(r3)
 4007d64:	99000217 	ldw	r4,8(r19)
 4007d68:	8c23c83a 	sub	r17,r17,r16
 4007d6c:	8c400054 	ori	r17,r17,1
 4007d70:	1421c83a 	sub	r16,r2,r16
 4007d74:	24400115 	stw	r17,4(r4)
 4007d78:	9009883a 	mov	r4,r18
 4007d7c:	1c000015 	stw	r16,0(r3)
 4007d80:	400826c0 	call	400826c <__malloc_unlock>
 4007d84:	00800044 	movi	r2,1
 4007d88:	003fe706 	br	4007d28 <__alt_data_end+0xfc007d28>
 4007d8c:	000b883a 	mov	r5,zero
 4007d90:	9009883a 	mov	r4,r18
 4007d94:	4007c580 	call	4007c58 <_sbrk_r>
 4007d98:	99000217 	ldw	r4,8(r19)
 4007d9c:	014003c4 	movi	r5,15
 4007da0:	1107c83a 	sub	r3,r2,r4
 4007da4:	28ffdd0e 	bge	r5,r3,4007d1c <__alt_data_end+0xfc007d1c>
 4007da8:	01410074 	movhi	r5,1025
 4007dac:	2971f804 	addi	r5,r5,-14368
 4007db0:	29400017 	ldw	r5,0(r5)
 4007db4:	18c00054 	ori	r3,r3,1
 4007db8:	20c00115 	stw	r3,4(r4)
 4007dbc:	00c10074 	movhi	r3,1025
 4007dc0:	1145c83a 	sub	r2,r2,r5
 4007dc4:	18f98d04 	addi	r3,r3,-6604
 4007dc8:	18800015 	stw	r2,0(r3)
 4007dcc:	003fd306 	br	4007d1c <__alt_data_end+0xfc007d1c>

04007dd0 <_free_r>:
 4007dd0:	28004126 	beq	r5,zero,4007ed8 <_free_r+0x108>
 4007dd4:	defffd04 	addi	sp,sp,-12
 4007dd8:	dc400115 	stw	r17,4(sp)
 4007ddc:	dc000015 	stw	r16,0(sp)
 4007de0:	2023883a 	mov	r17,r4
 4007de4:	2821883a 	mov	r16,r5
 4007de8:	dfc00215 	stw	ra,8(sp)
 4007dec:	40082480 	call	4008248 <__malloc_lock>
 4007df0:	81ffff17 	ldw	r7,-4(r16)
 4007df4:	00bfff84 	movi	r2,-2
 4007df8:	01010074 	movhi	r4,1025
 4007dfc:	81bffe04 	addi	r6,r16,-8
 4007e00:	3884703a 	and	r2,r7,r2
 4007e04:	212c6f04 	addi	r4,r4,-20036
 4007e08:	308b883a 	add	r5,r6,r2
 4007e0c:	2a400117 	ldw	r9,4(r5)
 4007e10:	22000217 	ldw	r8,8(r4)
 4007e14:	00ffff04 	movi	r3,-4
 4007e18:	48c6703a 	and	r3,r9,r3
 4007e1c:	2a005726 	beq	r5,r8,4007f7c <_free_r+0x1ac>
 4007e20:	28c00115 	stw	r3,4(r5)
 4007e24:	39c0004c 	andi	r7,r7,1
 4007e28:	3800091e 	bne	r7,zero,4007e50 <_free_r+0x80>
 4007e2c:	823ffe17 	ldw	r8,-8(r16)
 4007e30:	22400204 	addi	r9,r4,8
 4007e34:	320dc83a 	sub	r6,r6,r8
 4007e38:	31c00217 	ldw	r7,8(r6)
 4007e3c:	1205883a 	add	r2,r2,r8
 4007e40:	3a406526 	beq	r7,r9,4007fd8 <_free_r+0x208>
 4007e44:	32000317 	ldw	r8,12(r6)
 4007e48:	3a000315 	stw	r8,12(r7)
 4007e4c:	41c00215 	stw	r7,8(r8)
 4007e50:	28cf883a 	add	r7,r5,r3
 4007e54:	39c00117 	ldw	r7,4(r7)
 4007e58:	39c0004c 	andi	r7,r7,1
 4007e5c:	38003a26 	beq	r7,zero,4007f48 <_free_r+0x178>
 4007e60:	10c00054 	ori	r3,r2,1
 4007e64:	30c00115 	stw	r3,4(r6)
 4007e68:	3087883a 	add	r3,r6,r2
 4007e6c:	18800015 	stw	r2,0(r3)
 4007e70:	00c07fc4 	movi	r3,511
 4007e74:	18801936 	bltu	r3,r2,4007edc <_free_r+0x10c>
 4007e78:	1004d0fa 	srli	r2,r2,3
 4007e7c:	01c00044 	movi	r7,1
 4007e80:	21400117 	ldw	r5,4(r4)
 4007e84:	10c00044 	addi	r3,r2,1
 4007e88:	18c7883a 	add	r3,r3,r3
 4007e8c:	1005d0ba 	srai	r2,r2,2
 4007e90:	18c7883a 	add	r3,r3,r3
 4007e94:	18c7883a 	add	r3,r3,r3
 4007e98:	1907883a 	add	r3,r3,r4
 4007e9c:	3884983a 	sll	r2,r7,r2
 4007ea0:	19c00017 	ldw	r7,0(r3)
 4007ea4:	1a3ffe04 	addi	r8,r3,-8
 4007ea8:	1144b03a 	or	r2,r2,r5
 4007eac:	32000315 	stw	r8,12(r6)
 4007eb0:	31c00215 	stw	r7,8(r6)
 4007eb4:	20800115 	stw	r2,4(r4)
 4007eb8:	19800015 	stw	r6,0(r3)
 4007ebc:	39800315 	stw	r6,12(r7)
 4007ec0:	8809883a 	mov	r4,r17
 4007ec4:	dfc00217 	ldw	ra,8(sp)
 4007ec8:	dc400117 	ldw	r17,4(sp)
 4007ecc:	dc000017 	ldw	r16,0(sp)
 4007ed0:	dec00304 	addi	sp,sp,12
 4007ed4:	400826c1 	jmpi	400826c <__malloc_unlock>
 4007ed8:	f800283a 	ret
 4007edc:	100ad27a 	srli	r5,r2,9
 4007ee0:	00c00104 	movi	r3,4
 4007ee4:	19404a36 	bltu	r3,r5,4008010 <_free_r+0x240>
 4007ee8:	100ad1ba 	srli	r5,r2,6
 4007eec:	28c00e44 	addi	r3,r5,57
 4007ef0:	18c7883a 	add	r3,r3,r3
 4007ef4:	29400e04 	addi	r5,r5,56
 4007ef8:	18c7883a 	add	r3,r3,r3
 4007efc:	18c7883a 	add	r3,r3,r3
 4007f00:	1909883a 	add	r4,r3,r4
 4007f04:	20c00017 	ldw	r3,0(r4)
 4007f08:	01c10074 	movhi	r7,1025
 4007f0c:	213ffe04 	addi	r4,r4,-8
 4007f10:	39ec6f04 	addi	r7,r7,-20036
 4007f14:	20c04426 	beq	r4,r3,4008028 <_free_r+0x258>
 4007f18:	01ffff04 	movi	r7,-4
 4007f1c:	19400117 	ldw	r5,4(r3)
 4007f20:	29ca703a 	and	r5,r5,r7
 4007f24:	1140022e 	bgeu	r2,r5,4007f30 <_free_r+0x160>
 4007f28:	18c00217 	ldw	r3,8(r3)
 4007f2c:	20fffb1e 	bne	r4,r3,4007f1c <__alt_data_end+0xfc007f1c>
 4007f30:	19000317 	ldw	r4,12(r3)
 4007f34:	31000315 	stw	r4,12(r6)
 4007f38:	30c00215 	stw	r3,8(r6)
 4007f3c:	21800215 	stw	r6,8(r4)
 4007f40:	19800315 	stw	r6,12(r3)
 4007f44:	003fde06 	br	4007ec0 <__alt_data_end+0xfc007ec0>
 4007f48:	29c00217 	ldw	r7,8(r5)
 4007f4c:	10c5883a 	add	r2,r2,r3
 4007f50:	00c10074 	movhi	r3,1025
 4007f54:	18ec7104 	addi	r3,r3,-20028
 4007f58:	38c03b26 	beq	r7,r3,4008048 <_free_r+0x278>
 4007f5c:	2a000317 	ldw	r8,12(r5)
 4007f60:	11400054 	ori	r5,r2,1
 4007f64:	3087883a 	add	r3,r6,r2
 4007f68:	3a000315 	stw	r8,12(r7)
 4007f6c:	41c00215 	stw	r7,8(r8)
 4007f70:	31400115 	stw	r5,4(r6)
 4007f74:	18800015 	stw	r2,0(r3)
 4007f78:	003fbd06 	br	4007e70 <__alt_data_end+0xfc007e70>
 4007f7c:	39c0004c 	andi	r7,r7,1
 4007f80:	10c5883a 	add	r2,r2,r3
 4007f84:	3800071e 	bne	r7,zero,4007fa4 <_free_r+0x1d4>
 4007f88:	81fffe17 	ldw	r7,-8(r16)
 4007f8c:	31cdc83a 	sub	r6,r6,r7
 4007f90:	30c00317 	ldw	r3,12(r6)
 4007f94:	31400217 	ldw	r5,8(r6)
 4007f98:	11c5883a 	add	r2,r2,r7
 4007f9c:	28c00315 	stw	r3,12(r5)
 4007fa0:	19400215 	stw	r5,8(r3)
 4007fa4:	10c00054 	ori	r3,r2,1
 4007fa8:	30c00115 	stw	r3,4(r6)
 4007fac:	00c10074 	movhi	r3,1025
 4007fb0:	18f1f904 	addi	r3,r3,-14364
 4007fb4:	18c00017 	ldw	r3,0(r3)
 4007fb8:	21800215 	stw	r6,8(r4)
 4007fbc:	10ffc036 	bltu	r2,r3,4007ec0 <__alt_data_end+0xfc007ec0>
 4007fc0:	00810074 	movhi	r2,1025
 4007fc4:	10b98404 	addi	r2,r2,-6640
 4007fc8:	11400017 	ldw	r5,0(r2)
 4007fcc:	8809883a 	mov	r4,r17
 4007fd0:	4007cac0 	call	4007cac <_malloc_trim_r>
 4007fd4:	003fba06 	br	4007ec0 <__alt_data_end+0xfc007ec0>
 4007fd8:	28c9883a 	add	r4,r5,r3
 4007fdc:	21000117 	ldw	r4,4(r4)
 4007fe0:	2100004c 	andi	r4,r4,1
 4007fe4:	2000391e 	bne	r4,zero,40080cc <_free_r+0x2fc>
 4007fe8:	29c00217 	ldw	r7,8(r5)
 4007fec:	29000317 	ldw	r4,12(r5)
 4007ff0:	1885883a 	add	r2,r3,r2
 4007ff4:	10c00054 	ori	r3,r2,1
 4007ff8:	39000315 	stw	r4,12(r7)
 4007ffc:	21c00215 	stw	r7,8(r4)
 4008000:	30c00115 	stw	r3,4(r6)
 4008004:	308d883a 	add	r6,r6,r2
 4008008:	30800015 	stw	r2,0(r6)
 400800c:	003fac06 	br	4007ec0 <__alt_data_end+0xfc007ec0>
 4008010:	00c00504 	movi	r3,20
 4008014:	19401536 	bltu	r3,r5,400806c <_free_r+0x29c>
 4008018:	28c01704 	addi	r3,r5,92
 400801c:	18c7883a 	add	r3,r3,r3
 4008020:	294016c4 	addi	r5,r5,91
 4008024:	003fb406 	br	4007ef8 <__alt_data_end+0xfc007ef8>
 4008028:	280bd0ba 	srai	r5,r5,2
 400802c:	00c00044 	movi	r3,1
 4008030:	38800117 	ldw	r2,4(r7)
 4008034:	194a983a 	sll	r5,r3,r5
 4008038:	2007883a 	mov	r3,r4
 400803c:	2884b03a 	or	r2,r5,r2
 4008040:	38800115 	stw	r2,4(r7)
 4008044:	003fbb06 	br	4007f34 <__alt_data_end+0xfc007f34>
 4008048:	21800515 	stw	r6,20(r4)
 400804c:	21800415 	stw	r6,16(r4)
 4008050:	10c00054 	ori	r3,r2,1
 4008054:	31c00315 	stw	r7,12(r6)
 4008058:	31c00215 	stw	r7,8(r6)
 400805c:	30c00115 	stw	r3,4(r6)
 4008060:	308d883a 	add	r6,r6,r2
 4008064:	30800015 	stw	r2,0(r6)
 4008068:	003f9506 	br	4007ec0 <__alt_data_end+0xfc007ec0>
 400806c:	00c01504 	movi	r3,84
 4008070:	19400536 	bltu	r3,r5,4008088 <_free_r+0x2b8>
 4008074:	100ad33a 	srli	r5,r2,12
 4008078:	28c01bc4 	addi	r3,r5,111
 400807c:	18c7883a 	add	r3,r3,r3
 4008080:	29401b84 	addi	r5,r5,110
 4008084:	003f9c06 	br	4007ef8 <__alt_data_end+0xfc007ef8>
 4008088:	00c05504 	movi	r3,340
 400808c:	19400536 	bltu	r3,r5,40080a4 <_free_r+0x2d4>
 4008090:	100ad3fa 	srli	r5,r2,15
 4008094:	28c01e04 	addi	r3,r5,120
 4008098:	18c7883a 	add	r3,r3,r3
 400809c:	29401dc4 	addi	r5,r5,119
 40080a0:	003f9506 	br	4007ef8 <__alt_data_end+0xfc007ef8>
 40080a4:	00c15504 	movi	r3,1364
 40080a8:	19400536 	bltu	r3,r5,40080c0 <_free_r+0x2f0>
 40080ac:	100ad4ba 	srli	r5,r2,18
 40080b0:	28c01f44 	addi	r3,r5,125
 40080b4:	18c7883a 	add	r3,r3,r3
 40080b8:	29401f04 	addi	r5,r5,124
 40080bc:	003f8e06 	br	4007ef8 <__alt_data_end+0xfc007ef8>
 40080c0:	00c03f84 	movi	r3,254
 40080c4:	01401f84 	movi	r5,126
 40080c8:	003f8b06 	br	4007ef8 <__alt_data_end+0xfc007ef8>
 40080cc:	10c00054 	ori	r3,r2,1
 40080d0:	30c00115 	stw	r3,4(r6)
 40080d4:	308d883a 	add	r6,r6,r2
 40080d8:	30800015 	stw	r2,0(r6)
 40080dc:	003f7806 	br	4007ec0 <__alt_data_end+0xfc007ec0>

040080e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40080e0:	defffc04 	addi	sp,sp,-16
 40080e4:	df000315 	stw	fp,12(sp)
 40080e8:	df000304 	addi	fp,sp,12
 40080ec:	e13ffd15 	stw	r4,-12(fp)
 40080f0:	e17ffe15 	stw	r5,-8(fp)
 40080f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40080f8:	e0fffe17 	ldw	r3,-8(fp)
 40080fc:	e0bffd17 	ldw	r2,-12(fp)
 4008100:	18800c26 	beq	r3,r2,4008134 <alt_load_section+0x54>
  {
    while( to != end )
 4008104:	00000806 	br	4008128 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4008108:	e0bffe17 	ldw	r2,-8(fp)
 400810c:	10c00104 	addi	r3,r2,4
 4008110:	e0fffe15 	stw	r3,-8(fp)
 4008114:	e0fffd17 	ldw	r3,-12(fp)
 4008118:	19000104 	addi	r4,r3,4
 400811c:	e13ffd15 	stw	r4,-12(fp)
 4008120:	18c00017 	ldw	r3,0(r3)
 4008124:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4008128:	e0fffe17 	ldw	r3,-8(fp)
 400812c:	e0bfff17 	ldw	r2,-4(fp)
 4008130:	18bff51e 	bne	r3,r2,4008108 <__alt_data_end+0xfc008108>
    {
      *to++ = *from++;
    }
  }
}
 4008134:	0001883a 	nop
 4008138:	e037883a 	mov	sp,fp
 400813c:	df000017 	ldw	fp,0(sp)
 4008140:	dec00104 	addi	sp,sp,4
 4008144:	f800283a 	ret

04008148 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4008148:	defffe04 	addi	sp,sp,-8
 400814c:	dfc00115 	stw	ra,4(sp)
 4008150:	df000015 	stw	fp,0(sp)
 4008154:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4008158:	01810074 	movhi	r6,1025
 400815c:	31b20404 	addi	r6,r6,-14320
 4008160:	01410074 	movhi	r5,1025
 4008164:	296a8604 	addi	r5,r5,-21992
 4008168:	01010074 	movhi	r4,1025
 400816c:	21320404 	addi	r4,r4,-14320
 4008170:	40080e00 	call	40080e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4008174:	01810034 	movhi	r6,1024
 4008178:	31808c04 	addi	r6,r6,560
 400817c:	01410034 	movhi	r5,1024
 4008180:	29400804 	addi	r5,r5,32
 4008184:	01010034 	movhi	r4,1024
 4008188:	21000804 	addi	r4,r4,32
 400818c:	40080e00 	call	40080e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4008190:	01810074 	movhi	r6,1025
 4008194:	31aa8604 	addi	r6,r6,-21992
 4008198:	01410074 	movhi	r5,1025
 400819c:	29693e04 	addi	r5,r5,-23304
 40081a0:	01010074 	movhi	r4,1025
 40081a4:	21293e04 	addi	r4,r4,-23304
 40081a8:	40080e00 	call	40080e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40081ac:	40091b00 	call	40091b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40081b0:	400939c0 	call	400939c <alt_icache_flush_all>
}
 40081b4:	0001883a 	nop
 40081b8:	e037883a 	mov	sp,fp
 40081bc:	dfc00117 	ldw	ra,4(sp)
 40081c0:	df000017 	ldw	fp,0(sp)
 40081c4:	dec00204 	addi	sp,sp,8
 40081c8:	f800283a 	ret

040081cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40081cc:	defffd04 	addi	sp,sp,-12
 40081d0:	dfc00215 	stw	ra,8(sp)
 40081d4:	df000115 	stw	fp,4(sp)
 40081d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40081dc:	0009883a 	mov	r4,zero
 40081e0:	40083740 	call	4008374 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40081e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40081e8:	40083ac0 	call	40083ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40081ec:	01810074 	movhi	r6,1025
 40081f0:	31aa7904 	addi	r6,r6,-22044
 40081f4:	01410074 	movhi	r5,1025
 40081f8:	296a7904 	addi	r5,r5,-22044
 40081fc:	01010074 	movhi	r4,1025
 4008200:	212a7904 	addi	r4,r4,-22044
 4008204:	40097400 	call	4009740 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4008208:	40092dc0 	call	40092dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400820c:	01010074 	movhi	r4,1025
 4008210:	2124cf04 	addi	r4,r4,-27844
 4008214:	4009f840 	call	4009f84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4008218:	d0a79317 	ldw	r2,-25012(gp)
 400821c:	d0e79417 	ldw	r3,-25008(gp)
 4008220:	d1279517 	ldw	r4,-25004(gp)
 4008224:	200d883a 	mov	r6,r4
 4008228:	180b883a 	mov	r5,r3
 400822c:	1009883a 	mov	r4,r2
 4008230:	40009840 	call	4000984 <main>
 4008234:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4008238:	01000044 	movi	r4,1
 400823c:	40090d80 	call	40090d8 <close>
  exit (result);
 4008240:	e13fff17 	ldw	r4,-4(fp)
 4008244:	4009f980 	call	4009f98 <exit>

04008248 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4008248:	defffe04 	addi	sp,sp,-8
 400824c:	df000115 	stw	fp,4(sp)
 4008250:	df000104 	addi	fp,sp,4
 4008254:	e13fff15 	stw	r4,-4(fp)
}
 4008258:	0001883a 	nop
 400825c:	e037883a 	mov	sp,fp
 4008260:	df000017 	ldw	fp,0(sp)
 4008264:	dec00104 	addi	sp,sp,4
 4008268:	f800283a 	ret

0400826c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400826c:	defffe04 	addi	sp,sp,-8
 4008270:	df000115 	stw	fp,4(sp)
 4008274:	df000104 	addi	fp,sp,4
 4008278:	e13fff15 	stw	r4,-4(fp)
}
 400827c:	0001883a 	nop
 4008280:	e037883a 	mov	sp,fp
 4008284:	df000017 	ldw	fp,0(sp)
 4008288:	dec00104 	addi	sp,sp,4
 400828c:	f800283a 	ret

04008290 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4008290:	defff904 	addi	sp,sp,-28
 4008294:	df000615 	stw	fp,24(sp)
 4008298:	df000604 	addi	fp,sp,24
 400829c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40082a0:	0005303a 	rdctl	r2,status
 40082a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40082a8:	e0fffe17 	ldw	r3,-8(fp)
 40082ac:	00bfff84 	movi	r2,-2
 40082b0:	1884703a 	and	r2,r3,r2
 40082b4:	1001703a 	wrctl	status,r2
  
  return context;
 40082b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40082bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40082c0:	d0a00717 	ldw	r2,-32740(gp)
 40082c4:	10c000c4 	addi	r3,r2,3
 40082c8:	00bfff04 	movi	r2,-4
 40082cc:	1884703a 	and	r2,r3,r2
 40082d0:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40082d4:	d0e00717 	ldw	r3,-32740(gp)
 40082d8:	e0bfff17 	ldw	r2,-4(fp)
 40082dc:	1887883a 	add	r3,r3,r2
 40082e0:	00820034 	movhi	r2,2048
 40082e4:	10800004 	addi	r2,r2,0
 40082e8:	10c0062e 	bgeu	r2,r3,4008304 <sbrk+0x74>
 40082ec:	e0bffb17 	ldw	r2,-20(fp)
 40082f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40082f4:	e0bffa17 	ldw	r2,-24(fp)
 40082f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40082fc:	00bfffc4 	movi	r2,-1
 4008300:	00000b06 	br	4008330 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4008304:	d0a00717 	ldw	r2,-32740(gp)
 4008308:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400830c:	d0e00717 	ldw	r3,-32740(gp)
 4008310:	e0bfff17 	ldw	r2,-4(fp)
 4008314:	1885883a 	add	r2,r3,r2
 4008318:	d0a00715 	stw	r2,-32740(gp)
 400831c:	e0bffb17 	ldw	r2,-20(fp)
 4008320:	e0bffc15 	stw	r2,-16(fp)
 4008324:	e0bffc17 	ldw	r2,-16(fp)
 4008328:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400832c:	e0bffd17 	ldw	r2,-12(fp)
} 
 4008330:	e037883a 	mov	sp,fp
 4008334:	df000017 	ldw	fp,0(sp)
 4008338:	dec00104 	addi	sp,sp,4
 400833c:	f800283a 	ret

04008340 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4008340:	defffd04 	addi	sp,sp,-12
 4008344:	dfc00215 	stw	ra,8(sp)
 4008348:	df000115 	stw	fp,4(sp)
 400834c:	df000104 	addi	fp,sp,4
 4008350:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4008354:	d1600a04 	addi	r5,gp,-32728
 4008358:	e13fff17 	ldw	r4,-4(fp)
 400835c:	40092380 	call	4009238 <alt_dev_llist_insert>
}
 4008360:	e037883a 	mov	sp,fp
 4008364:	dfc00117 	ldw	ra,4(sp)
 4008368:	df000017 	ldw	fp,0(sp)
 400836c:	dec00204 	addi	sp,sp,8
 4008370:	f800283a 	ret

04008374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4008374:	defffd04 	addi	sp,sp,-12
 4008378:	dfc00215 	stw	ra,8(sp)
 400837c:	df000115 	stw	fp,4(sp)
 4008380:	df000104 	addi	fp,sp,4
 4008384:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4008388:	4009c680 	call	4009c68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400838c:	00800044 	movi	r2,1
 4008390:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4008394:	0001883a 	nop
 4008398:	e037883a 	mov	sp,fp
 400839c:	dfc00117 	ldw	ra,4(sp)
 40083a0:	df000017 	ldw	fp,0(sp)
 40083a4:	dec00204 	addi	sp,sp,8
 40083a8:	f800283a 	ret

040083ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40083ac:	defffe04 	addi	sp,sp,-8
 40083b0:	dfc00115 	stw	ra,4(sp)
 40083b4:	df000015 	stw	fp,0(sp)
 40083b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 40083bc:	01c0fa04 	movi	r7,1000
 40083c0:	01800084 	movi	r6,2
 40083c4:	000b883a 	mov	r5,zero
 40083c8:	01020034 	movhi	r4,2048
 40083cc:	210c1004 	addi	r4,r4,12352
 40083d0:	4008ef40 	call	4008ef4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40083d4:	01800044 	movi	r6,1
 40083d8:	000b883a 	mov	r5,zero
 40083dc:	01010074 	movhi	r4,1025
 40083e0:	212d7b04 	addi	r4,r4,-18964
 40083e4:	40085780 	call	4008578 <altera_avalon_jtag_uart_init>
 40083e8:	01010074 	movhi	r4,1025
 40083ec:	212d7104 	addi	r4,r4,-19004
 40083f0:	40083400 	call	4008340 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 40083f4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 40083f8:	0001883a 	nop
}
 40083fc:	0001883a 	nop
 4008400:	e037883a 	mov	sp,fp
 4008404:	dfc00117 	ldw	ra,4(sp)
 4008408:	df000017 	ldw	fp,0(sp)
 400840c:	dec00204 	addi	sp,sp,8
 4008410:	f800283a 	ret

04008414 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4008414:	defffa04 	addi	sp,sp,-24
 4008418:	dfc00515 	stw	ra,20(sp)
 400841c:	df000415 	stw	fp,16(sp)
 4008420:	df000404 	addi	fp,sp,16
 4008424:	e13ffd15 	stw	r4,-12(fp)
 4008428:	e17ffe15 	stw	r5,-8(fp)
 400842c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4008430:	e0bffd17 	ldw	r2,-12(fp)
 4008434:	10800017 	ldw	r2,0(r2)
 4008438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400843c:	e0bffc17 	ldw	r2,-16(fp)
 4008440:	10c00a04 	addi	r3,r2,40
 4008444:	e0bffd17 	ldw	r2,-12(fp)
 4008448:	10800217 	ldw	r2,8(r2)
 400844c:	100f883a 	mov	r7,r2
 4008450:	e1bfff17 	ldw	r6,-4(fp)
 4008454:	e17ffe17 	ldw	r5,-8(fp)
 4008458:	1809883a 	mov	r4,r3
 400845c:	4008a3c0 	call	4008a3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4008460:	e037883a 	mov	sp,fp
 4008464:	dfc00117 	ldw	ra,4(sp)
 4008468:	df000017 	ldw	fp,0(sp)
 400846c:	dec00204 	addi	sp,sp,8
 4008470:	f800283a 	ret

04008474 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4008474:	defffa04 	addi	sp,sp,-24
 4008478:	dfc00515 	stw	ra,20(sp)
 400847c:	df000415 	stw	fp,16(sp)
 4008480:	df000404 	addi	fp,sp,16
 4008484:	e13ffd15 	stw	r4,-12(fp)
 4008488:	e17ffe15 	stw	r5,-8(fp)
 400848c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4008490:	e0bffd17 	ldw	r2,-12(fp)
 4008494:	10800017 	ldw	r2,0(r2)
 4008498:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400849c:	e0bffc17 	ldw	r2,-16(fp)
 40084a0:	10c00a04 	addi	r3,r2,40
 40084a4:	e0bffd17 	ldw	r2,-12(fp)
 40084a8:	10800217 	ldw	r2,8(r2)
 40084ac:	100f883a 	mov	r7,r2
 40084b0:	e1bfff17 	ldw	r6,-4(fp)
 40084b4:	e17ffe17 	ldw	r5,-8(fp)
 40084b8:	1809883a 	mov	r4,r3
 40084bc:	4008c580 	call	4008c58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40084c0:	e037883a 	mov	sp,fp
 40084c4:	dfc00117 	ldw	ra,4(sp)
 40084c8:	df000017 	ldw	fp,0(sp)
 40084cc:	dec00204 	addi	sp,sp,8
 40084d0:	f800283a 	ret

040084d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40084d4:	defffc04 	addi	sp,sp,-16
 40084d8:	dfc00315 	stw	ra,12(sp)
 40084dc:	df000215 	stw	fp,8(sp)
 40084e0:	df000204 	addi	fp,sp,8
 40084e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40084e8:	e0bfff17 	ldw	r2,-4(fp)
 40084ec:	10800017 	ldw	r2,0(r2)
 40084f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40084f4:	e0bffe17 	ldw	r2,-8(fp)
 40084f8:	10c00a04 	addi	r3,r2,40
 40084fc:	e0bfff17 	ldw	r2,-4(fp)
 4008500:	10800217 	ldw	r2,8(r2)
 4008504:	100b883a 	mov	r5,r2
 4008508:	1809883a 	mov	r4,r3
 400850c:	40088e40 	call	40088e4 <altera_avalon_jtag_uart_close>
}
 4008510:	e037883a 	mov	sp,fp
 4008514:	dfc00117 	ldw	ra,4(sp)
 4008518:	df000017 	ldw	fp,0(sp)
 400851c:	dec00204 	addi	sp,sp,8
 4008520:	f800283a 	ret

04008524 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4008524:	defffa04 	addi	sp,sp,-24
 4008528:	dfc00515 	stw	ra,20(sp)
 400852c:	df000415 	stw	fp,16(sp)
 4008530:	df000404 	addi	fp,sp,16
 4008534:	e13ffd15 	stw	r4,-12(fp)
 4008538:	e17ffe15 	stw	r5,-8(fp)
 400853c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4008540:	e0bffd17 	ldw	r2,-12(fp)
 4008544:	10800017 	ldw	r2,0(r2)
 4008548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400854c:	e0bffc17 	ldw	r2,-16(fp)
 4008550:	10800a04 	addi	r2,r2,40
 4008554:	e1bfff17 	ldw	r6,-4(fp)
 4008558:	e17ffe17 	ldw	r5,-8(fp)
 400855c:	1009883a 	mov	r4,r2
 4008560:	400894c0 	call	400894c <altera_avalon_jtag_uart_ioctl>
}
 4008564:	e037883a 	mov	sp,fp
 4008568:	dfc00117 	ldw	ra,4(sp)
 400856c:	df000017 	ldw	fp,0(sp)
 4008570:	dec00204 	addi	sp,sp,8
 4008574:	f800283a 	ret

04008578 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4008578:	defffa04 	addi	sp,sp,-24
 400857c:	dfc00515 	stw	ra,20(sp)
 4008580:	df000415 	stw	fp,16(sp)
 4008584:	df000404 	addi	fp,sp,16
 4008588:	e13ffd15 	stw	r4,-12(fp)
 400858c:	e17ffe15 	stw	r5,-8(fp)
 4008590:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4008594:	e0bffd17 	ldw	r2,-12(fp)
 4008598:	00c00044 	movi	r3,1
 400859c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40085a0:	e0bffd17 	ldw	r2,-12(fp)
 40085a4:	10800017 	ldw	r2,0(r2)
 40085a8:	10800104 	addi	r2,r2,4
 40085ac:	1007883a 	mov	r3,r2
 40085b0:	e0bffd17 	ldw	r2,-12(fp)
 40085b4:	10800817 	ldw	r2,32(r2)
 40085b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40085bc:	e0bffe17 	ldw	r2,-8(fp)
 40085c0:	e0ffff17 	ldw	r3,-4(fp)
 40085c4:	d8000015 	stw	zero,0(sp)
 40085c8:	e1fffd17 	ldw	r7,-12(fp)
 40085cc:	01810074 	movhi	r6,1025
 40085d0:	31a18e04 	addi	r6,r6,-31176
 40085d4:	180b883a 	mov	r5,r3
 40085d8:	1009883a 	mov	r4,r2
 40085dc:	40093bc0 	call	40093bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40085e0:	e0bffd17 	ldw	r2,-12(fp)
 40085e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40085e8:	e0bffd17 	ldw	r2,-12(fp)
 40085ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40085f0:	d0e79717 	ldw	r3,-24996(gp)
 40085f4:	e1fffd17 	ldw	r7,-12(fp)
 40085f8:	01810074 	movhi	r6,1025
 40085fc:	31a21104 	addi	r6,r6,-30652
 4008600:	180b883a 	mov	r5,r3
 4008604:	1009883a 	mov	r4,r2
 4008608:	4008f700 	call	4008f70 <alt_alarm_start>
 400860c:	1000040e 	bge	r2,zero,4008620 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4008610:	e0fffd17 	ldw	r3,-12(fp)
 4008614:	00a00034 	movhi	r2,32768
 4008618:	10bfffc4 	addi	r2,r2,-1
 400861c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4008620:	0001883a 	nop
 4008624:	e037883a 	mov	sp,fp
 4008628:	dfc00117 	ldw	ra,4(sp)
 400862c:	df000017 	ldw	fp,0(sp)
 4008630:	dec00204 	addi	sp,sp,8
 4008634:	f800283a 	ret

04008638 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4008638:	defff804 	addi	sp,sp,-32
 400863c:	df000715 	stw	fp,28(sp)
 4008640:	df000704 	addi	fp,sp,28
 4008644:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4008648:	e0bfff17 	ldw	r2,-4(fp)
 400864c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4008650:	e0bffb17 	ldw	r2,-20(fp)
 4008654:	10800017 	ldw	r2,0(r2)
 4008658:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400865c:	e0bffc17 	ldw	r2,-16(fp)
 4008660:	10800104 	addi	r2,r2,4
 4008664:	10800037 	ldwio	r2,0(r2)
 4008668:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400866c:	e0bffd17 	ldw	r2,-12(fp)
 4008670:	1080c00c 	andi	r2,r2,768
 4008674:	10006d26 	beq	r2,zero,400882c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4008678:	e0bffd17 	ldw	r2,-12(fp)
 400867c:	1080400c 	andi	r2,r2,256
 4008680:	10003526 	beq	r2,zero,4008758 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4008684:	00800074 	movhi	r2,1
 4008688:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400868c:	e0bffb17 	ldw	r2,-20(fp)
 4008690:	10800a17 	ldw	r2,40(r2)
 4008694:	10800044 	addi	r2,r2,1
 4008698:	1081ffcc 	andi	r2,r2,2047
 400869c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40086a0:	e0bffb17 	ldw	r2,-20(fp)
 40086a4:	10c00b17 	ldw	r3,44(r2)
 40086a8:	e0bffe17 	ldw	r2,-8(fp)
 40086ac:	18801526 	beq	r3,r2,4008704 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40086b0:	e0bffc17 	ldw	r2,-16(fp)
 40086b4:	10800037 	ldwio	r2,0(r2)
 40086b8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40086bc:	e0bff917 	ldw	r2,-28(fp)
 40086c0:	10a0000c 	andi	r2,r2,32768
 40086c4:	10001126 	beq	r2,zero,400870c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40086c8:	e0bffb17 	ldw	r2,-20(fp)
 40086cc:	10800a17 	ldw	r2,40(r2)
 40086d0:	e0fff917 	ldw	r3,-28(fp)
 40086d4:	1809883a 	mov	r4,r3
 40086d8:	e0fffb17 	ldw	r3,-20(fp)
 40086dc:	1885883a 	add	r2,r3,r2
 40086e0:	10800e04 	addi	r2,r2,56
 40086e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40086e8:	e0bffb17 	ldw	r2,-20(fp)
 40086ec:	10800a17 	ldw	r2,40(r2)
 40086f0:	10800044 	addi	r2,r2,1
 40086f4:	10c1ffcc 	andi	r3,r2,2047
 40086f8:	e0bffb17 	ldw	r2,-20(fp)
 40086fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4008700:	003fe206 	br	400868c <__alt_data_end+0xfc00868c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4008704:	0001883a 	nop
 4008708:	00000106 	br	4008710 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400870c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4008710:	e0bff917 	ldw	r2,-28(fp)
 4008714:	10bfffec 	andhi	r2,r2,65535
 4008718:	10000f26 	beq	r2,zero,4008758 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400871c:	e0bffb17 	ldw	r2,-20(fp)
 4008720:	10c00817 	ldw	r3,32(r2)
 4008724:	00bfff84 	movi	r2,-2
 4008728:	1886703a 	and	r3,r3,r2
 400872c:	e0bffb17 	ldw	r2,-20(fp)
 4008730:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4008734:	e0bffc17 	ldw	r2,-16(fp)
 4008738:	10800104 	addi	r2,r2,4
 400873c:	1007883a 	mov	r3,r2
 4008740:	e0bffb17 	ldw	r2,-20(fp)
 4008744:	10800817 	ldw	r2,32(r2)
 4008748:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400874c:	e0bffc17 	ldw	r2,-16(fp)
 4008750:	10800104 	addi	r2,r2,4
 4008754:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4008758:	e0bffd17 	ldw	r2,-12(fp)
 400875c:	1080800c 	andi	r2,r2,512
 4008760:	103fbe26 	beq	r2,zero,400865c <__alt_data_end+0xfc00865c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4008764:	e0bffd17 	ldw	r2,-12(fp)
 4008768:	1004d43a 	srli	r2,r2,16
 400876c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4008770:	00001406 	br	40087c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4008774:	e0bffc17 	ldw	r2,-16(fp)
 4008778:	e0fffb17 	ldw	r3,-20(fp)
 400877c:	18c00d17 	ldw	r3,52(r3)
 4008780:	e13ffb17 	ldw	r4,-20(fp)
 4008784:	20c7883a 	add	r3,r4,r3
 4008788:	18c20e04 	addi	r3,r3,2104
 400878c:	18c00003 	ldbu	r3,0(r3)
 4008790:	18c03fcc 	andi	r3,r3,255
 4008794:	18c0201c 	xori	r3,r3,128
 4008798:	18ffe004 	addi	r3,r3,-128
 400879c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40087a0:	e0bffb17 	ldw	r2,-20(fp)
 40087a4:	10800d17 	ldw	r2,52(r2)
 40087a8:	10800044 	addi	r2,r2,1
 40087ac:	10c1ffcc 	andi	r3,r2,2047
 40087b0:	e0bffb17 	ldw	r2,-20(fp)
 40087b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40087b8:	e0bffa17 	ldw	r2,-24(fp)
 40087bc:	10bfffc4 	addi	r2,r2,-1
 40087c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40087c4:	e0bffa17 	ldw	r2,-24(fp)
 40087c8:	10000526 	beq	r2,zero,40087e0 <altera_avalon_jtag_uart_irq+0x1a8>
 40087cc:	e0bffb17 	ldw	r2,-20(fp)
 40087d0:	10c00d17 	ldw	r3,52(r2)
 40087d4:	e0bffb17 	ldw	r2,-20(fp)
 40087d8:	10800c17 	ldw	r2,48(r2)
 40087dc:	18bfe51e 	bne	r3,r2,4008774 <__alt_data_end+0xfc008774>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40087e0:	e0bffa17 	ldw	r2,-24(fp)
 40087e4:	103f9d26 	beq	r2,zero,400865c <__alt_data_end+0xfc00865c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40087e8:	e0bffb17 	ldw	r2,-20(fp)
 40087ec:	10c00817 	ldw	r3,32(r2)
 40087f0:	00bfff44 	movi	r2,-3
 40087f4:	1886703a 	and	r3,r3,r2
 40087f8:	e0bffb17 	ldw	r2,-20(fp)
 40087fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4008800:	e0bffb17 	ldw	r2,-20(fp)
 4008804:	10800017 	ldw	r2,0(r2)
 4008808:	10800104 	addi	r2,r2,4
 400880c:	1007883a 	mov	r3,r2
 4008810:	e0bffb17 	ldw	r2,-20(fp)
 4008814:	10800817 	ldw	r2,32(r2)
 4008818:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400881c:	e0bffc17 	ldw	r2,-16(fp)
 4008820:	10800104 	addi	r2,r2,4
 4008824:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4008828:	003f8c06 	br	400865c <__alt_data_end+0xfc00865c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400882c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4008830:	0001883a 	nop
 4008834:	e037883a 	mov	sp,fp
 4008838:	df000017 	ldw	fp,0(sp)
 400883c:	dec00104 	addi	sp,sp,4
 4008840:	f800283a 	ret

04008844 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4008844:	defff804 	addi	sp,sp,-32
 4008848:	df000715 	stw	fp,28(sp)
 400884c:	df000704 	addi	fp,sp,28
 4008850:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4008854:	e0bffb17 	ldw	r2,-20(fp)
 4008858:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400885c:	e0bff917 	ldw	r2,-28(fp)
 4008860:	10800017 	ldw	r2,0(r2)
 4008864:	10800104 	addi	r2,r2,4
 4008868:	10800037 	ldwio	r2,0(r2)
 400886c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4008870:	e0bffa17 	ldw	r2,-24(fp)
 4008874:	1081000c 	andi	r2,r2,1024
 4008878:	10000b26 	beq	r2,zero,40088a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400887c:	e0bff917 	ldw	r2,-28(fp)
 4008880:	10800017 	ldw	r2,0(r2)
 4008884:	10800104 	addi	r2,r2,4
 4008888:	1007883a 	mov	r3,r2
 400888c:	e0bff917 	ldw	r2,-28(fp)
 4008890:	10800817 	ldw	r2,32(r2)
 4008894:	10810014 	ori	r2,r2,1024
 4008898:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400889c:	e0bff917 	ldw	r2,-28(fp)
 40088a0:	10000915 	stw	zero,36(r2)
 40088a4:	00000a06 	br	40088d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40088a8:	e0bff917 	ldw	r2,-28(fp)
 40088ac:	10c00917 	ldw	r3,36(r2)
 40088b0:	00a00034 	movhi	r2,32768
 40088b4:	10bfff04 	addi	r2,r2,-4
 40088b8:	10c00536 	bltu	r2,r3,40088d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40088bc:	e0bff917 	ldw	r2,-28(fp)
 40088c0:	10800917 	ldw	r2,36(r2)
 40088c4:	10c00044 	addi	r3,r2,1
 40088c8:	e0bff917 	ldw	r2,-28(fp)
 40088cc:	10c00915 	stw	r3,36(r2)
 40088d0:	d0a79717 	ldw	r2,-24996(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40088d4:	e037883a 	mov	sp,fp
 40088d8:	df000017 	ldw	fp,0(sp)
 40088dc:	dec00104 	addi	sp,sp,4
 40088e0:	f800283a 	ret

040088e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40088e4:	defffd04 	addi	sp,sp,-12
 40088e8:	df000215 	stw	fp,8(sp)
 40088ec:	df000204 	addi	fp,sp,8
 40088f0:	e13ffe15 	stw	r4,-8(fp)
 40088f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40088f8:	00000506 	br	4008910 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40088fc:	e0bfff17 	ldw	r2,-4(fp)
 4008900:	1090000c 	andi	r2,r2,16384
 4008904:	10000226 	beq	r2,zero,4008910 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4008908:	00bffd44 	movi	r2,-11
 400890c:	00000b06 	br	400893c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4008910:	e0bffe17 	ldw	r2,-8(fp)
 4008914:	10c00d17 	ldw	r3,52(r2)
 4008918:	e0bffe17 	ldw	r2,-8(fp)
 400891c:	10800c17 	ldw	r2,48(r2)
 4008920:	18800526 	beq	r3,r2,4008938 <altera_avalon_jtag_uart_close+0x54>
 4008924:	e0bffe17 	ldw	r2,-8(fp)
 4008928:	10c00917 	ldw	r3,36(r2)
 400892c:	e0bffe17 	ldw	r2,-8(fp)
 4008930:	10800117 	ldw	r2,4(r2)
 4008934:	18bff136 	bltu	r3,r2,40088fc <__alt_data_end+0xfc0088fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4008938:	0005883a 	mov	r2,zero
}
 400893c:	e037883a 	mov	sp,fp
 4008940:	df000017 	ldw	fp,0(sp)
 4008944:	dec00104 	addi	sp,sp,4
 4008948:	f800283a 	ret

0400894c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400894c:	defffa04 	addi	sp,sp,-24
 4008950:	df000515 	stw	fp,20(sp)
 4008954:	df000504 	addi	fp,sp,20
 4008958:	e13ffd15 	stw	r4,-12(fp)
 400895c:	e17ffe15 	stw	r5,-8(fp)
 4008960:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4008964:	00bff9c4 	movi	r2,-25
 4008968:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400896c:	e0bffe17 	ldw	r2,-8(fp)
 4008970:	10da8060 	cmpeqi	r3,r2,27137
 4008974:	1800031e 	bne	r3,zero,4008984 <altera_avalon_jtag_uart_ioctl+0x38>
 4008978:	109a80a0 	cmpeqi	r2,r2,27138
 400897c:	1000181e 	bne	r2,zero,40089e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4008980:	00002906 	br	4008a28 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4008984:	e0bffd17 	ldw	r2,-12(fp)
 4008988:	10c00117 	ldw	r3,4(r2)
 400898c:	00a00034 	movhi	r2,32768
 4008990:	10bfffc4 	addi	r2,r2,-1
 4008994:	18802126 	beq	r3,r2,4008a1c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4008998:	e0bfff17 	ldw	r2,-4(fp)
 400899c:	10800017 	ldw	r2,0(r2)
 40089a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40089a4:	e0bffc17 	ldw	r2,-16(fp)
 40089a8:	10800090 	cmplti	r2,r2,2
 40089ac:	1000061e 	bne	r2,zero,40089c8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40089b0:	e0fffc17 	ldw	r3,-16(fp)
 40089b4:	00a00034 	movhi	r2,32768
 40089b8:	10bfffc4 	addi	r2,r2,-1
 40089bc:	18800226 	beq	r3,r2,40089c8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40089c0:	e0bffc17 	ldw	r2,-16(fp)
 40089c4:	00000206 	br	40089d0 <altera_avalon_jtag_uart_ioctl+0x84>
 40089c8:	00a00034 	movhi	r2,32768
 40089cc:	10bfff84 	addi	r2,r2,-2
 40089d0:	e0fffd17 	ldw	r3,-12(fp)
 40089d4:	18800115 	stw	r2,4(r3)
      rc = 0;
 40089d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40089dc:	00000f06 	br	4008a1c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40089e0:	e0bffd17 	ldw	r2,-12(fp)
 40089e4:	10c00117 	ldw	r3,4(r2)
 40089e8:	00a00034 	movhi	r2,32768
 40089ec:	10bfffc4 	addi	r2,r2,-1
 40089f0:	18800c26 	beq	r3,r2,4008a24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40089f4:	e0bffd17 	ldw	r2,-12(fp)
 40089f8:	10c00917 	ldw	r3,36(r2)
 40089fc:	e0bffd17 	ldw	r2,-12(fp)
 4008a00:	10800117 	ldw	r2,4(r2)
 4008a04:	1885803a 	cmpltu	r2,r3,r2
 4008a08:	10c03fcc 	andi	r3,r2,255
 4008a0c:	e0bfff17 	ldw	r2,-4(fp)
 4008a10:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4008a14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4008a18:	00000206 	br	4008a24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4008a1c:	0001883a 	nop
 4008a20:	00000106 	br	4008a28 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4008a24:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4008a28:	e0bffb17 	ldw	r2,-20(fp)
}
 4008a2c:	e037883a 	mov	sp,fp
 4008a30:	df000017 	ldw	fp,0(sp)
 4008a34:	dec00104 	addi	sp,sp,4
 4008a38:	f800283a 	ret

04008a3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4008a3c:	defff304 	addi	sp,sp,-52
 4008a40:	dfc00c15 	stw	ra,48(sp)
 4008a44:	df000b15 	stw	fp,44(sp)
 4008a48:	df000b04 	addi	fp,sp,44
 4008a4c:	e13ffc15 	stw	r4,-16(fp)
 4008a50:	e17ffd15 	stw	r5,-12(fp)
 4008a54:	e1bffe15 	stw	r6,-8(fp)
 4008a58:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4008a5c:	e0bffd17 	ldw	r2,-12(fp)
 4008a60:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4008a64:	00004706 	br	4008b84 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4008a68:	e0bffc17 	ldw	r2,-16(fp)
 4008a6c:	10800a17 	ldw	r2,40(r2)
 4008a70:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4008a74:	e0bffc17 	ldw	r2,-16(fp)
 4008a78:	10800b17 	ldw	r2,44(r2)
 4008a7c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4008a80:	e0fff717 	ldw	r3,-36(fp)
 4008a84:	e0bff817 	ldw	r2,-32(fp)
 4008a88:	18800536 	bltu	r3,r2,4008aa0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4008a8c:	e0fff717 	ldw	r3,-36(fp)
 4008a90:	e0bff817 	ldw	r2,-32(fp)
 4008a94:	1885c83a 	sub	r2,r3,r2
 4008a98:	e0bff615 	stw	r2,-40(fp)
 4008a9c:	00000406 	br	4008ab0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4008aa0:	00c20004 	movi	r3,2048
 4008aa4:	e0bff817 	ldw	r2,-32(fp)
 4008aa8:	1885c83a 	sub	r2,r3,r2
 4008aac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4008ab0:	e0bff617 	ldw	r2,-40(fp)
 4008ab4:	10001e26 	beq	r2,zero,4008b30 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4008ab8:	e0fffe17 	ldw	r3,-8(fp)
 4008abc:	e0bff617 	ldw	r2,-40(fp)
 4008ac0:	1880022e 	bgeu	r3,r2,4008acc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4008ac4:	e0bffe17 	ldw	r2,-8(fp)
 4008ac8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4008acc:	e0bffc17 	ldw	r2,-16(fp)
 4008ad0:	10c00e04 	addi	r3,r2,56
 4008ad4:	e0bff817 	ldw	r2,-32(fp)
 4008ad8:	1885883a 	add	r2,r3,r2
 4008adc:	e1bff617 	ldw	r6,-40(fp)
 4008ae0:	100b883a 	mov	r5,r2
 4008ae4:	e13ff517 	ldw	r4,-44(fp)
 4008ae8:	400a04c0 	call	400a04c <memcpy>
      ptr   += n;
 4008aec:	e0fff517 	ldw	r3,-44(fp)
 4008af0:	e0bff617 	ldw	r2,-40(fp)
 4008af4:	1885883a 	add	r2,r3,r2
 4008af8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4008afc:	e0fffe17 	ldw	r3,-8(fp)
 4008b00:	e0bff617 	ldw	r2,-40(fp)
 4008b04:	1885c83a 	sub	r2,r3,r2
 4008b08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4008b0c:	e0fff817 	ldw	r3,-32(fp)
 4008b10:	e0bff617 	ldw	r2,-40(fp)
 4008b14:	1885883a 	add	r2,r3,r2
 4008b18:	10c1ffcc 	andi	r3,r2,2047
 4008b1c:	e0bffc17 	ldw	r2,-16(fp)
 4008b20:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4008b24:	e0bffe17 	ldw	r2,-8(fp)
 4008b28:	00bfcf16 	blt	zero,r2,4008a68 <__alt_data_end+0xfc008a68>
 4008b2c:	00000106 	br	4008b34 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4008b30:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4008b34:	e0fff517 	ldw	r3,-44(fp)
 4008b38:	e0bffd17 	ldw	r2,-12(fp)
 4008b3c:	1880141e 	bne	r3,r2,4008b90 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4008b40:	e0bfff17 	ldw	r2,-4(fp)
 4008b44:	1090000c 	andi	r2,r2,16384
 4008b48:	1000131e 	bne	r2,zero,4008b98 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4008b4c:	0001883a 	nop
 4008b50:	e0bffc17 	ldw	r2,-16(fp)
 4008b54:	10c00a17 	ldw	r3,40(r2)
 4008b58:	e0bff717 	ldw	r2,-36(fp)
 4008b5c:	1880051e 	bne	r3,r2,4008b74 <altera_avalon_jtag_uart_read+0x138>
 4008b60:	e0bffc17 	ldw	r2,-16(fp)
 4008b64:	10c00917 	ldw	r3,36(r2)
 4008b68:	e0bffc17 	ldw	r2,-16(fp)
 4008b6c:	10800117 	ldw	r2,4(r2)
 4008b70:	18bff736 	bltu	r3,r2,4008b50 <__alt_data_end+0xfc008b50>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4008b74:	e0bffc17 	ldw	r2,-16(fp)
 4008b78:	10c00a17 	ldw	r3,40(r2)
 4008b7c:	e0bff717 	ldw	r2,-36(fp)
 4008b80:	18800726 	beq	r3,r2,4008ba0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4008b84:	e0bffe17 	ldw	r2,-8(fp)
 4008b88:	00bfb716 	blt	zero,r2,4008a68 <__alt_data_end+0xfc008a68>
 4008b8c:	00000506 	br	4008ba4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4008b90:	0001883a 	nop
 4008b94:	00000306 	br	4008ba4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4008b98:	0001883a 	nop
 4008b9c:	00000106 	br	4008ba4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4008ba0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4008ba4:	e0fff517 	ldw	r3,-44(fp)
 4008ba8:	e0bffd17 	ldw	r2,-12(fp)
 4008bac:	18801826 	beq	r3,r2,4008c10 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008bb0:	0005303a 	rdctl	r2,status
 4008bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008bb8:	e0fffb17 	ldw	r3,-20(fp)
 4008bbc:	00bfff84 	movi	r2,-2
 4008bc0:	1884703a 	and	r2,r3,r2
 4008bc4:	1001703a 	wrctl	status,r2
  
  return context;
 4008bc8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4008bcc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4008bd0:	e0bffc17 	ldw	r2,-16(fp)
 4008bd4:	10800817 	ldw	r2,32(r2)
 4008bd8:	10c00054 	ori	r3,r2,1
 4008bdc:	e0bffc17 	ldw	r2,-16(fp)
 4008be0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4008be4:	e0bffc17 	ldw	r2,-16(fp)
 4008be8:	10800017 	ldw	r2,0(r2)
 4008bec:	10800104 	addi	r2,r2,4
 4008bf0:	1007883a 	mov	r3,r2
 4008bf4:	e0bffc17 	ldw	r2,-16(fp)
 4008bf8:	10800817 	ldw	r2,32(r2)
 4008bfc:	18800035 	stwio	r2,0(r3)
 4008c00:	e0bffa17 	ldw	r2,-24(fp)
 4008c04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008c08:	e0bff917 	ldw	r2,-28(fp)
 4008c0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4008c10:	e0fff517 	ldw	r3,-44(fp)
 4008c14:	e0bffd17 	ldw	r2,-12(fp)
 4008c18:	18800426 	beq	r3,r2,4008c2c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4008c1c:	e0fff517 	ldw	r3,-44(fp)
 4008c20:	e0bffd17 	ldw	r2,-12(fp)
 4008c24:	1885c83a 	sub	r2,r3,r2
 4008c28:	00000606 	br	4008c44 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4008c2c:	e0bfff17 	ldw	r2,-4(fp)
 4008c30:	1090000c 	andi	r2,r2,16384
 4008c34:	10000226 	beq	r2,zero,4008c40 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4008c38:	00bffd44 	movi	r2,-11
 4008c3c:	00000106 	br	4008c44 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4008c40:	00bffec4 	movi	r2,-5
}
 4008c44:	e037883a 	mov	sp,fp
 4008c48:	dfc00117 	ldw	ra,4(sp)
 4008c4c:	df000017 	ldw	fp,0(sp)
 4008c50:	dec00204 	addi	sp,sp,8
 4008c54:	f800283a 	ret

04008c58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4008c58:	defff304 	addi	sp,sp,-52
 4008c5c:	dfc00c15 	stw	ra,48(sp)
 4008c60:	df000b15 	stw	fp,44(sp)
 4008c64:	df000b04 	addi	fp,sp,44
 4008c68:	e13ffc15 	stw	r4,-16(fp)
 4008c6c:	e17ffd15 	stw	r5,-12(fp)
 4008c70:	e1bffe15 	stw	r6,-8(fp)
 4008c74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4008c78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4008c7c:	e0bffd17 	ldw	r2,-12(fp)
 4008c80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4008c84:	00003706 	br	4008d64 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4008c88:	e0bffc17 	ldw	r2,-16(fp)
 4008c8c:	10800c17 	ldw	r2,48(r2)
 4008c90:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4008c94:	e0bffc17 	ldw	r2,-16(fp)
 4008c98:	10800d17 	ldw	r2,52(r2)
 4008c9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4008ca0:	e0fff917 	ldw	r3,-28(fp)
 4008ca4:	e0bff517 	ldw	r2,-44(fp)
 4008ca8:	1880062e 	bgeu	r3,r2,4008cc4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4008cac:	e0fff517 	ldw	r3,-44(fp)
 4008cb0:	e0bff917 	ldw	r2,-28(fp)
 4008cb4:	1885c83a 	sub	r2,r3,r2
 4008cb8:	10bfffc4 	addi	r2,r2,-1
 4008cbc:	e0bff615 	stw	r2,-40(fp)
 4008cc0:	00000b06 	br	4008cf0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4008cc4:	e0bff517 	ldw	r2,-44(fp)
 4008cc8:	10000526 	beq	r2,zero,4008ce0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4008ccc:	00c20004 	movi	r3,2048
 4008cd0:	e0bff917 	ldw	r2,-28(fp)
 4008cd4:	1885c83a 	sub	r2,r3,r2
 4008cd8:	e0bff615 	stw	r2,-40(fp)
 4008cdc:	00000406 	br	4008cf0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4008ce0:	00c1ffc4 	movi	r3,2047
 4008ce4:	e0bff917 	ldw	r2,-28(fp)
 4008ce8:	1885c83a 	sub	r2,r3,r2
 4008cec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4008cf0:	e0bff617 	ldw	r2,-40(fp)
 4008cf4:	10001e26 	beq	r2,zero,4008d70 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4008cf8:	e0fffe17 	ldw	r3,-8(fp)
 4008cfc:	e0bff617 	ldw	r2,-40(fp)
 4008d00:	1880022e 	bgeu	r3,r2,4008d0c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4008d04:	e0bffe17 	ldw	r2,-8(fp)
 4008d08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4008d0c:	e0bffc17 	ldw	r2,-16(fp)
 4008d10:	10c20e04 	addi	r3,r2,2104
 4008d14:	e0bff917 	ldw	r2,-28(fp)
 4008d18:	1885883a 	add	r2,r3,r2
 4008d1c:	e1bff617 	ldw	r6,-40(fp)
 4008d20:	e17ffd17 	ldw	r5,-12(fp)
 4008d24:	1009883a 	mov	r4,r2
 4008d28:	400a04c0 	call	400a04c <memcpy>
      ptr   += n;
 4008d2c:	e0fffd17 	ldw	r3,-12(fp)
 4008d30:	e0bff617 	ldw	r2,-40(fp)
 4008d34:	1885883a 	add	r2,r3,r2
 4008d38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4008d3c:	e0fffe17 	ldw	r3,-8(fp)
 4008d40:	e0bff617 	ldw	r2,-40(fp)
 4008d44:	1885c83a 	sub	r2,r3,r2
 4008d48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4008d4c:	e0fff917 	ldw	r3,-28(fp)
 4008d50:	e0bff617 	ldw	r2,-40(fp)
 4008d54:	1885883a 	add	r2,r3,r2
 4008d58:	10c1ffcc 	andi	r3,r2,2047
 4008d5c:	e0bffc17 	ldw	r2,-16(fp)
 4008d60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4008d64:	e0bffe17 	ldw	r2,-8(fp)
 4008d68:	00bfc716 	blt	zero,r2,4008c88 <__alt_data_end+0xfc008c88>
 4008d6c:	00000106 	br	4008d74 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4008d70:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008d74:	0005303a 	rdctl	r2,status
 4008d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008d7c:	e0fffb17 	ldw	r3,-20(fp)
 4008d80:	00bfff84 	movi	r2,-2
 4008d84:	1884703a 	and	r2,r3,r2
 4008d88:	1001703a 	wrctl	status,r2
  
  return context;
 4008d8c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4008d90:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4008d94:	e0bffc17 	ldw	r2,-16(fp)
 4008d98:	10800817 	ldw	r2,32(r2)
 4008d9c:	10c00094 	ori	r3,r2,2
 4008da0:	e0bffc17 	ldw	r2,-16(fp)
 4008da4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4008da8:	e0bffc17 	ldw	r2,-16(fp)
 4008dac:	10800017 	ldw	r2,0(r2)
 4008db0:	10800104 	addi	r2,r2,4
 4008db4:	1007883a 	mov	r3,r2
 4008db8:	e0bffc17 	ldw	r2,-16(fp)
 4008dbc:	10800817 	ldw	r2,32(r2)
 4008dc0:	18800035 	stwio	r2,0(r3)
 4008dc4:	e0bffa17 	ldw	r2,-24(fp)
 4008dc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008dcc:	e0bff817 	ldw	r2,-32(fp)
 4008dd0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4008dd4:	e0bffe17 	ldw	r2,-8(fp)
 4008dd8:	0080100e 	bge	zero,r2,4008e1c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4008ddc:	e0bfff17 	ldw	r2,-4(fp)
 4008de0:	1090000c 	andi	r2,r2,16384
 4008de4:	1000101e 	bne	r2,zero,4008e28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4008de8:	0001883a 	nop
 4008dec:	e0bffc17 	ldw	r2,-16(fp)
 4008df0:	10c00d17 	ldw	r3,52(r2)
 4008df4:	e0bff517 	ldw	r2,-44(fp)
 4008df8:	1880051e 	bne	r3,r2,4008e10 <altera_avalon_jtag_uart_write+0x1b8>
 4008dfc:	e0bffc17 	ldw	r2,-16(fp)
 4008e00:	10c00917 	ldw	r3,36(r2)
 4008e04:	e0bffc17 	ldw	r2,-16(fp)
 4008e08:	10800117 	ldw	r2,4(r2)
 4008e0c:	18bff736 	bltu	r3,r2,4008dec <__alt_data_end+0xfc008dec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4008e10:	e0bffc17 	ldw	r2,-16(fp)
 4008e14:	10800917 	ldw	r2,36(r2)
 4008e18:	1000051e 	bne	r2,zero,4008e30 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4008e1c:	e0bffe17 	ldw	r2,-8(fp)
 4008e20:	00bfd016 	blt	zero,r2,4008d64 <__alt_data_end+0xfc008d64>
 4008e24:	00000306 	br	4008e34 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4008e28:	0001883a 	nop
 4008e2c:	00000106 	br	4008e34 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4008e30:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4008e34:	e0fffd17 	ldw	r3,-12(fp)
 4008e38:	e0bff717 	ldw	r2,-36(fp)
 4008e3c:	18800426 	beq	r3,r2,4008e50 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4008e40:	e0fffd17 	ldw	r3,-12(fp)
 4008e44:	e0bff717 	ldw	r2,-36(fp)
 4008e48:	1885c83a 	sub	r2,r3,r2
 4008e4c:	00000606 	br	4008e68 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4008e50:	e0bfff17 	ldw	r2,-4(fp)
 4008e54:	1090000c 	andi	r2,r2,16384
 4008e58:	10000226 	beq	r2,zero,4008e64 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4008e5c:	00bffd44 	movi	r2,-11
 4008e60:	00000106 	br	4008e68 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4008e64:	00bffec4 	movi	r2,-5
}
 4008e68:	e037883a 	mov	sp,fp
 4008e6c:	dfc00117 	ldw	ra,4(sp)
 4008e70:	df000017 	ldw	fp,0(sp)
 4008e74:	dec00204 	addi	sp,sp,8
 4008e78:	f800283a 	ret

04008e7c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4008e7c:	defffa04 	addi	sp,sp,-24
 4008e80:	dfc00515 	stw	ra,20(sp)
 4008e84:	df000415 	stw	fp,16(sp)
 4008e88:	df000404 	addi	fp,sp,16
 4008e8c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4008e90:	0007883a 	mov	r3,zero
 4008e94:	e0bfff17 	ldw	r2,-4(fp)
 4008e98:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4008e9c:	e0bfff17 	ldw	r2,-4(fp)
 4008ea0:	10800104 	addi	r2,r2,4
 4008ea4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008ea8:	0005303a 	rdctl	r2,status
 4008eac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008eb0:	e0fffd17 	ldw	r3,-12(fp)
 4008eb4:	00bfff84 	movi	r2,-2
 4008eb8:	1884703a 	and	r2,r3,r2
 4008ebc:	1001703a 	wrctl	status,r2
  
  return context;
 4008ec0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4008ec4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4008ec8:	4009b600 	call	4009b60 <alt_tick>
 4008ecc:	e0bffc17 	ldw	r2,-16(fp)
 4008ed0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008ed4:	e0bffe17 	ldw	r2,-8(fp)
 4008ed8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4008edc:	0001883a 	nop
 4008ee0:	e037883a 	mov	sp,fp
 4008ee4:	dfc00117 	ldw	ra,4(sp)
 4008ee8:	df000017 	ldw	fp,0(sp)
 4008eec:	dec00204 	addi	sp,sp,8
 4008ef0:	f800283a 	ret

04008ef4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4008ef4:	defff804 	addi	sp,sp,-32
 4008ef8:	dfc00715 	stw	ra,28(sp)
 4008efc:	df000615 	stw	fp,24(sp)
 4008f00:	df000604 	addi	fp,sp,24
 4008f04:	e13ffc15 	stw	r4,-16(fp)
 4008f08:	e17ffd15 	stw	r5,-12(fp)
 4008f0c:	e1bffe15 	stw	r6,-8(fp)
 4008f10:	e1ffff15 	stw	r7,-4(fp)
 4008f14:	e0bfff17 	ldw	r2,-4(fp)
 4008f18:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4008f1c:	d0a79717 	ldw	r2,-24996(gp)
 4008f20:	1000021e 	bne	r2,zero,4008f2c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4008f24:	e0bffb17 	ldw	r2,-20(fp)
 4008f28:	d0a79715 	stw	r2,-24996(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4008f2c:	e0bffc17 	ldw	r2,-16(fp)
 4008f30:	10800104 	addi	r2,r2,4
 4008f34:	00c001c4 	movi	r3,7
 4008f38:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4008f3c:	d8000015 	stw	zero,0(sp)
 4008f40:	e1fffc17 	ldw	r7,-16(fp)
 4008f44:	01810074 	movhi	r6,1025
 4008f48:	31a39f04 	addi	r6,r6,-29060
 4008f4c:	e17ffe17 	ldw	r5,-8(fp)
 4008f50:	e13ffd17 	ldw	r4,-12(fp)
 4008f54:	40093bc0 	call	40093bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4008f58:	0001883a 	nop
 4008f5c:	e037883a 	mov	sp,fp
 4008f60:	dfc00117 	ldw	ra,4(sp)
 4008f64:	df000017 	ldw	fp,0(sp)
 4008f68:	dec00204 	addi	sp,sp,8
 4008f6c:	f800283a 	ret

04008f70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4008f70:	defff504 	addi	sp,sp,-44
 4008f74:	df000a15 	stw	fp,40(sp)
 4008f78:	df000a04 	addi	fp,sp,40
 4008f7c:	e13ffc15 	stw	r4,-16(fp)
 4008f80:	e17ffd15 	stw	r5,-12(fp)
 4008f84:	e1bffe15 	stw	r6,-8(fp)
 4008f88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4008f8c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4008f90:	d0a79717 	ldw	r2,-24996(gp)
  
  if (alt_ticks_per_second ())
 4008f94:	10003c26 	beq	r2,zero,4009088 <alt_alarm_start+0x118>
  {
    if (alarm)
 4008f98:	e0bffc17 	ldw	r2,-16(fp)
 4008f9c:	10003826 	beq	r2,zero,4009080 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4008fa0:	e0bffc17 	ldw	r2,-16(fp)
 4008fa4:	e0fffe17 	ldw	r3,-8(fp)
 4008fa8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4008fac:	e0bffc17 	ldw	r2,-16(fp)
 4008fb0:	e0ffff17 	ldw	r3,-4(fp)
 4008fb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008fb8:	0005303a 	rdctl	r2,status
 4008fbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008fc0:	e0fff917 	ldw	r3,-28(fp)
 4008fc4:	00bfff84 	movi	r2,-2
 4008fc8:	1884703a 	and	r2,r3,r2
 4008fcc:	1001703a 	wrctl	status,r2
  
  return context;
 4008fd0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4008fd4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4008fd8:	d0a79817 	ldw	r2,-24992(gp)
      
      current_nticks = alt_nticks();
 4008fdc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4008fe0:	e0fffd17 	ldw	r3,-12(fp)
 4008fe4:	e0bff617 	ldw	r2,-40(fp)
 4008fe8:	1885883a 	add	r2,r3,r2
 4008fec:	10c00044 	addi	r3,r2,1
 4008ff0:	e0bffc17 	ldw	r2,-16(fp)
 4008ff4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4008ff8:	e0bffc17 	ldw	r2,-16(fp)
 4008ffc:	10c00217 	ldw	r3,8(r2)
 4009000:	e0bff617 	ldw	r2,-40(fp)
 4009004:	1880042e 	bgeu	r3,r2,4009018 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4009008:	e0bffc17 	ldw	r2,-16(fp)
 400900c:	00c00044 	movi	r3,1
 4009010:	10c00405 	stb	r3,16(r2)
 4009014:	00000206 	br	4009020 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4009018:	e0bffc17 	ldw	r2,-16(fp)
 400901c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4009020:	e0bffc17 	ldw	r2,-16(fp)
 4009024:	d0e00f04 	addi	r3,gp,-32708
 4009028:	e0fffa15 	stw	r3,-24(fp)
 400902c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4009030:	e0bffb17 	ldw	r2,-20(fp)
 4009034:	e0fffa17 	ldw	r3,-24(fp)
 4009038:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400903c:	e0bffa17 	ldw	r2,-24(fp)
 4009040:	10c00017 	ldw	r3,0(r2)
 4009044:	e0bffb17 	ldw	r2,-20(fp)
 4009048:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400904c:	e0bffa17 	ldw	r2,-24(fp)
 4009050:	10800017 	ldw	r2,0(r2)
 4009054:	e0fffb17 	ldw	r3,-20(fp)
 4009058:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400905c:	e0bffa17 	ldw	r2,-24(fp)
 4009060:	e0fffb17 	ldw	r3,-20(fp)
 4009064:	10c00015 	stw	r3,0(r2)
 4009068:	e0bff817 	ldw	r2,-32(fp)
 400906c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009070:	e0bff717 	ldw	r2,-36(fp)
 4009074:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4009078:	0005883a 	mov	r2,zero
 400907c:	00000306 	br	400908c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4009080:	00bffa84 	movi	r2,-22
 4009084:	00000106 	br	400908c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4009088:	00bfde84 	movi	r2,-134
  }
}
 400908c:	e037883a 	mov	sp,fp
 4009090:	df000017 	ldw	fp,0(sp)
 4009094:	dec00104 	addi	sp,sp,4
 4009098:	f800283a 	ret

0400909c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400909c:	defffe04 	addi	sp,sp,-8
 40090a0:	dfc00115 	stw	ra,4(sp)
 40090a4:	df000015 	stw	fp,0(sp)
 40090a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40090ac:	d0a00d17 	ldw	r2,-32716(gp)
 40090b0:	10000326 	beq	r2,zero,40090c0 <alt_get_errno+0x24>
 40090b4:	d0a00d17 	ldw	r2,-32716(gp)
 40090b8:	103ee83a 	callr	r2
 40090bc:	00000106 	br	40090c4 <alt_get_errno+0x28>
 40090c0:	d0a79204 	addi	r2,gp,-25016
}
 40090c4:	e037883a 	mov	sp,fp
 40090c8:	dfc00117 	ldw	ra,4(sp)
 40090cc:	df000017 	ldw	fp,0(sp)
 40090d0:	dec00204 	addi	sp,sp,8
 40090d4:	f800283a 	ret

040090d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40090d8:	defffb04 	addi	sp,sp,-20
 40090dc:	dfc00415 	stw	ra,16(sp)
 40090e0:	df000315 	stw	fp,12(sp)
 40090e4:	df000304 	addi	fp,sp,12
 40090e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40090ec:	e0bfff17 	ldw	r2,-4(fp)
 40090f0:	10000816 	blt	r2,zero,4009114 <close+0x3c>
 40090f4:	01400304 	movi	r5,12
 40090f8:	e13fff17 	ldw	r4,-4(fp)
 40090fc:	40073ec0 	call	40073ec <__mulsi3>
 4009100:	1007883a 	mov	r3,r2
 4009104:	00810074 	movhi	r2,1025
 4009108:	10b19304 	addi	r2,r2,-14772
 400910c:	1885883a 	add	r2,r3,r2
 4009110:	00000106 	br	4009118 <close+0x40>
 4009114:	0005883a 	mov	r2,zero
 4009118:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400911c:	e0bffd17 	ldw	r2,-12(fp)
 4009120:	10001926 	beq	r2,zero,4009188 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4009124:	e0bffd17 	ldw	r2,-12(fp)
 4009128:	10800017 	ldw	r2,0(r2)
 400912c:	10800417 	ldw	r2,16(r2)
 4009130:	10000626 	beq	r2,zero,400914c <close+0x74>
 4009134:	e0bffd17 	ldw	r2,-12(fp)
 4009138:	10800017 	ldw	r2,0(r2)
 400913c:	10800417 	ldw	r2,16(r2)
 4009140:	e13ffd17 	ldw	r4,-12(fp)
 4009144:	103ee83a 	callr	r2
 4009148:	00000106 	br	4009150 <close+0x78>
 400914c:	0005883a 	mov	r2,zero
 4009150:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4009154:	e13fff17 	ldw	r4,-4(fp)
 4009158:	4009a400 	call	4009a40 <alt_release_fd>
    if (rval < 0)
 400915c:	e0bffe17 	ldw	r2,-8(fp)
 4009160:	1000070e 	bge	r2,zero,4009180 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4009164:	400909c0 	call	400909c <alt_get_errno>
 4009168:	1007883a 	mov	r3,r2
 400916c:	e0bffe17 	ldw	r2,-8(fp)
 4009170:	0085c83a 	sub	r2,zero,r2
 4009174:	18800015 	stw	r2,0(r3)
      return -1;
 4009178:	00bfffc4 	movi	r2,-1
 400917c:	00000706 	br	400919c <close+0xc4>
    }
    return 0;
 4009180:	0005883a 	mov	r2,zero
 4009184:	00000506 	br	400919c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009188:	400909c0 	call	400909c <alt_get_errno>
 400918c:	1007883a 	mov	r3,r2
 4009190:	00801444 	movi	r2,81
 4009194:	18800015 	stw	r2,0(r3)
    return -1;
 4009198:	00bfffc4 	movi	r2,-1
  }
}
 400919c:	e037883a 	mov	sp,fp
 40091a0:	dfc00117 	ldw	ra,4(sp)
 40091a4:	df000017 	ldw	fp,0(sp)
 40091a8:	dec00204 	addi	sp,sp,8
 40091ac:	f800283a 	ret

040091b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40091b0:	deffff04 	addi	sp,sp,-4
 40091b4:	df000015 	stw	fp,0(sp)
 40091b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40091bc:	0001883a 	nop
 40091c0:	e037883a 	mov	sp,fp
 40091c4:	df000017 	ldw	fp,0(sp)
 40091c8:	dec00104 	addi	sp,sp,4
 40091cc:	f800283a 	ret

040091d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40091d0:	defffc04 	addi	sp,sp,-16
 40091d4:	df000315 	stw	fp,12(sp)
 40091d8:	df000304 	addi	fp,sp,12
 40091dc:	e13ffd15 	stw	r4,-12(fp)
 40091e0:	e17ffe15 	stw	r5,-8(fp)
 40091e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40091e8:	e0bfff17 	ldw	r2,-4(fp)
}
 40091ec:	e037883a 	mov	sp,fp
 40091f0:	df000017 	ldw	fp,0(sp)
 40091f4:	dec00104 	addi	sp,sp,4
 40091f8:	f800283a 	ret

040091fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40091fc:	defffe04 	addi	sp,sp,-8
 4009200:	dfc00115 	stw	ra,4(sp)
 4009204:	df000015 	stw	fp,0(sp)
 4009208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400920c:	d0a00d17 	ldw	r2,-32716(gp)
 4009210:	10000326 	beq	r2,zero,4009220 <alt_get_errno+0x24>
 4009214:	d0a00d17 	ldw	r2,-32716(gp)
 4009218:	103ee83a 	callr	r2
 400921c:	00000106 	br	4009224 <alt_get_errno+0x28>
 4009220:	d0a79204 	addi	r2,gp,-25016
}
 4009224:	e037883a 	mov	sp,fp
 4009228:	dfc00117 	ldw	ra,4(sp)
 400922c:	df000017 	ldw	fp,0(sp)
 4009230:	dec00204 	addi	sp,sp,8
 4009234:	f800283a 	ret

04009238 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4009238:	defffa04 	addi	sp,sp,-24
 400923c:	dfc00515 	stw	ra,20(sp)
 4009240:	df000415 	stw	fp,16(sp)
 4009244:	df000404 	addi	fp,sp,16
 4009248:	e13ffe15 	stw	r4,-8(fp)
 400924c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4009250:	e0bffe17 	ldw	r2,-8(fp)
 4009254:	10000326 	beq	r2,zero,4009264 <alt_dev_llist_insert+0x2c>
 4009258:	e0bffe17 	ldw	r2,-8(fp)
 400925c:	10800217 	ldw	r2,8(r2)
 4009260:	1000061e 	bne	r2,zero,400927c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4009264:	40091fc0 	call	40091fc <alt_get_errno>
 4009268:	1007883a 	mov	r3,r2
 400926c:	00800584 	movi	r2,22
 4009270:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4009274:	00bffa84 	movi	r2,-22
 4009278:	00001306 	br	40092c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400927c:	e0bffe17 	ldw	r2,-8(fp)
 4009280:	e0ffff17 	ldw	r3,-4(fp)
 4009284:	e0fffc15 	stw	r3,-16(fp)
 4009288:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400928c:	e0bffd17 	ldw	r2,-12(fp)
 4009290:	e0fffc17 	ldw	r3,-16(fp)
 4009294:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4009298:	e0bffc17 	ldw	r2,-16(fp)
 400929c:	10c00017 	ldw	r3,0(r2)
 40092a0:	e0bffd17 	ldw	r2,-12(fp)
 40092a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40092a8:	e0bffc17 	ldw	r2,-16(fp)
 40092ac:	10800017 	ldw	r2,0(r2)
 40092b0:	e0fffd17 	ldw	r3,-12(fp)
 40092b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40092b8:	e0bffc17 	ldw	r2,-16(fp)
 40092bc:	e0fffd17 	ldw	r3,-12(fp)
 40092c0:	10c00015 	stw	r3,0(r2)

  return 0;  
 40092c4:	0005883a 	mov	r2,zero
}
 40092c8:	e037883a 	mov	sp,fp
 40092cc:	dfc00117 	ldw	ra,4(sp)
 40092d0:	df000017 	ldw	fp,0(sp)
 40092d4:	dec00204 	addi	sp,sp,8
 40092d8:	f800283a 	ret

040092dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40092dc:	defffd04 	addi	sp,sp,-12
 40092e0:	dfc00215 	stw	ra,8(sp)
 40092e4:	df000115 	stw	fp,4(sp)
 40092e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40092ec:	00810074 	movhi	r2,1025
 40092f0:	10a93d04 	addi	r2,r2,-23308
 40092f4:	e0bfff15 	stw	r2,-4(fp)
 40092f8:	00000606 	br	4009314 <_do_ctors+0x38>
        (*ctor) (); 
 40092fc:	e0bfff17 	ldw	r2,-4(fp)
 4009300:	10800017 	ldw	r2,0(r2)
 4009304:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4009308:	e0bfff17 	ldw	r2,-4(fp)
 400930c:	10bfff04 	addi	r2,r2,-4
 4009310:	e0bfff15 	stw	r2,-4(fp)
 4009314:	e0ffff17 	ldw	r3,-4(fp)
 4009318:	00810074 	movhi	r2,1025
 400931c:	10a93e04 	addi	r2,r2,-23304
 4009320:	18bff62e 	bgeu	r3,r2,40092fc <__alt_data_end+0xfc0092fc>
        (*ctor) (); 
}
 4009324:	0001883a 	nop
 4009328:	e037883a 	mov	sp,fp
 400932c:	dfc00117 	ldw	ra,4(sp)
 4009330:	df000017 	ldw	fp,0(sp)
 4009334:	dec00204 	addi	sp,sp,8
 4009338:	f800283a 	ret

0400933c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400933c:	defffd04 	addi	sp,sp,-12
 4009340:	dfc00215 	stw	ra,8(sp)
 4009344:	df000115 	stw	fp,4(sp)
 4009348:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400934c:	00810074 	movhi	r2,1025
 4009350:	10a93d04 	addi	r2,r2,-23308
 4009354:	e0bfff15 	stw	r2,-4(fp)
 4009358:	00000606 	br	4009374 <_do_dtors+0x38>
        (*dtor) (); 
 400935c:	e0bfff17 	ldw	r2,-4(fp)
 4009360:	10800017 	ldw	r2,0(r2)
 4009364:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4009368:	e0bfff17 	ldw	r2,-4(fp)
 400936c:	10bfff04 	addi	r2,r2,-4
 4009370:	e0bfff15 	stw	r2,-4(fp)
 4009374:	e0ffff17 	ldw	r3,-4(fp)
 4009378:	00810074 	movhi	r2,1025
 400937c:	10a93e04 	addi	r2,r2,-23304
 4009380:	18bff62e 	bgeu	r3,r2,400935c <__alt_data_end+0xfc00935c>
        (*dtor) (); 
}
 4009384:	0001883a 	nop
 4009388:	e037883a 	mov	sp,fp
 400938c:	dfc00117 	ldw	ra,4(sp)
 4009390:	df000017 	ldw	fp,0(sp)
 4009394:	dec00204 	addi	sp,sp,8
 4009398:	f800283a 	ret

0400939c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400939c:	deffff04 	addi	sp,sp,-4
 40093a0:	df000015 	stw	fp,0(sp)
 40093a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40093a8:	0001883a 	nop
 40093ac:	e037883a 	mov	sp,fp
 40093b0:	df000017 	ldw	fp,0(sp)
 40093b4:	dec00104 	addi	sp,sp,4
 40093b8:	f800283a 	ret

040093bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40093bc:	defff904 	addi	sp,sp,-28
 40093c0:	dfc00615 	stw	ra,24(sp)
 40093c4:	df000515 	stw	fp,20(sp)
 40093c8:	df000504 	addi	fp,sp,20
 40093cc:	e13ffc15 	stw	r4,-16(fp)
 40093d0:	e17ffd15 	stw	r5,-12(fp)
 40093d4:	e1bffe15 	stw	r6,-8(fp)
 40093d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40093dc:	e0800217 	ldw	r2,8(fp)
 40093e0:	d8800015 	stw	r2,0(sp)
 40093e4:	e1ffff17 	ldw	r7,-4(fp)
 40093e8:	e1bffe17 	ldw	r6,-8(fp)
 40093ec:	e17ffd17 	ldw	r5,-12(fp)
 40093f0:	e13ffc17 	ldw	r4,-16(fp)
 40093f4:	400956c0 	call	400956c <alt_iic_isr_register>
}  
 40093f8:	e037883a 	mov	sp,fp
 40093fc:	dfc00117 	ldw	ra,4(sp)
 4009400:	df000017 	ldw	fp,0(sp)
 4009404:	dec00204 	addi	sp,sp,8
 4009408:	f800283a 	ret

0400940c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400940c:	defff904 	addi	sp,sp,-28
 4009410:	df000615 	stw	fp,24(sp)
 4009414:	df000604 	addi	fp,sp,24
 4009418:	e13ffe15 	stw	r4,-8(fp)
 400941c:	e17fff15 	stw	r5,-4(fp)
 4009420:	e0bfff17 	ldw	r2,-4(fp)
 4009424:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009428:	0005303a 	rdctl	r2,status
 400942c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009430:	e0fffb17 	ldw	r3,-20(fp)
 4009434:	00bfff84 	movi	r2,-2
 4009438:	1884703a 	and	r2,r3,r2
 400943c:	1001703a 	wrctl	status,r2
  
  return context;
 4009440:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4009444:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4009448:	00c00044 	movi	r3,1
 400944c:	e0bffa17 	ldw	r2,-24(fp)
 4009450:	1884983a 	sll	r2,r3,r2
 4009454:	1007883a 	mov	r3,r2
 4009458:	d0a79617 	ldw	r2,-25000(gp)
 400945c:	1884b03a 	or	r2,r3,r2
 4009460:	d0a79615 	stw	r2,-25000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4009464:	d0a79617 	ldw	r2,-25000(gp)
 4009468:	100170fa 	wrctl	ienable,r2
 400946c:	e0bffc17 	ldw	r2,-16(fp)
 4009470:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009474:	e0bffd17 	ldw	r2,-12(fp)
 4009478:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400947c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4009480:	0001883a 	nop
}
 4009484:	e037883a 	mov	sp,fp
 4009488:	df000017 	ldw	fp,0(sp)
 400948c:	dec00104 	addi	sp,sp,4
 4009490:	f800283a 	ret

04009494 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4009494:	defff904 	addi	sp,sp,-28
 4009498:	df000615 	stw	fp,24(sp)
 400949c:	df000604 	addi	fp,sp,24
 40094a0:	e13ffe15 	stw	r4,-8(fp)
 40094a4:	e17fff15 	stw	r5,-4(fp)
 40094a8:	e0bfff17 	ldw	r2,-4(fp)
 40094ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40094b0:	0005303a 	rdctl	r2,status
 40094b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40094b8:	e0fffb17 	ldw	r3,-20(fp)
 40094bc:	00bfff84 	movi	r2,-2
 40094c0:	1884703a 	and	r2,r3,r2
 40094c4:	1001703a 	wrctl	status,r2
  
  return context;
 40094c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40094cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40094d0:	00c00044 	movi	r3,1
 40094d4:	e0bffa17 	ldw	r2,-24(fp)
 40094d8:	1884983a 	sll	r2,r3,r2
 40094dc:	0084303a 	nor	r2,zero,r2
 40094e0:	1007883a 	mov	r3,r2
 40094e4:	d0a79617 	ldw	r2,-25000(gp)
 40094e8:	1884703a 	and	r2,r3,r2
 40094ec:	d0a79615 	stw	r2,-25000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40094f0:	d0a79617 	ldw	r2,-25000(gp)
 40094f4:	100170fa 	wrctl	ienable,r2
 40094f8:	e0bffc17 	ldw	r2,-16(fp)
 40094fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009500:	e0bffd17 	ldw	r2,-12(fp)
 4009504:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4009508:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400950c:	0001883a 	nop
}
 4009510:	e037883a 	mov	sp,fp
 4009514:	df000017 	ldw	fp,0(sp)
 4009518:	dec00104 	addi	sp,sp,4
 400951c:	f800283a 	ret

04009520 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4009520:	defffc04 	addi	sp,sp,-16
 4009524:	df000315 	stw	fp,12(sp)
 4009528:	df000304 	addi	fp,sp,12
 400952c:	e13ffe15 	stw	r4,-8(fp)
 4009530:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4009534:	000530fa 	rdctl	r2,ienable
 4009538:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400953c:	00c00044 	movi	r3,1
 4009540:	e0bfff17 	ldw	r2,-4(fp)
 4009544:	1884983a 	sll	r2,r3,r2
 4009548:	1007883a 	mov	r3,r2
 400954c:	e0bffd17 	ldw	r2,-12(fp)
 4009550:	1884703a 	and	r2,r3,r2
 4009554:	1004c03a 	cmpne	r2,r2,zero
 4009558:	10803fcc 	andi	r2,r2,255
}
 400955c:	e037883a 	mov	sp,fp
 4009560:	df000017 	ldw	fp,0(sp)
 4009564:	dec00104 	addi	sp,sp,4
 4009568:	f800283a 	ret

0400956c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400956c:	defff504 	addi	sp,sp,-44
 4009570:	dfc00a15 	stw	ra,40(sp)
 4009574:	df000915 	stw	fp,36(sp)
 4009578:	df000904 	addi	fp,sp,36
 400957c:	e13ffc15 	stw	r4,-16(fp)
 4009580:	e17ffd15 	stw	r5,-12(fp)
 4009584:	e1bffe15 	stw	r6,-8(fp)
 4009588:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400958c:	00bffa84 	movi	r2,-22
 4009590:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4009594:	e0bffd17 	ldw	r2,-12(fp)
 4009598:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400959c:	e0bff817 	ldw	r2,-32(fp)
 40095a0:	10800808 	cmpgei	r2,r2,32
 40095a4:	1000271e 	bne	r2,zero,4009644 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40095a8:	0005303a 	rdctl	r2,status
 40095ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40095b0:	e0fffb17 	ldw	r3,-20(fp)
 40095b4:	00bfff84 	movi	r2,-2
 40095b8:	1884703a 	and	r2,r3,r2
 40095bc:	1001703a 	wrctl	status,r2
  
  return context;
 40095c0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40095c4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40095c8:	00810074 	movhi	r2,1025
 40095cc:	10b99704 	addi	r2,r2,-6564
 40095d0:	e0fff817 	ldw	r3,-32(fp)
 40095d4:	180690fa 	slli	r3,r3,3
 40095d8:	10c5883a 	add	r2,r2,r3
 40095dc:	e0fffe17 	ldw	r3,-8(fp)
 40095e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40095e4:	00810074 	movhi	r2,1025
 40095e8:	10b99704 	addi	r2,r2,-6564
 40095ec:	e0fff817 	ldw	r3,-32(fp)
 40095f0:	180690fa 	slli	r3,r3,3
 40095f4:	10c5883a 	add	r2,r2,r3
 40095f8:	10800104 	addi	r2,r2,4
 40095fc:	e0ffff17 	ldw	r3,-4(fp)
 4009600:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4009604:	e0bffe17 	ldw	r2,-8(fp)
 4009608:	10000526 	beq	r2,zero,4009620 <alt_iic_isr_register+0xb4>
 400960c:	e0bff817 	ldw	r2,-32(fp)
 4009610:	100b883a 	mov	r5,r2
 4009614:	e13ffc17 	ldw	r4,-16(fp)
 4009618:	400940c0 	call	400940c <alt_ic_irq_enable>
 400961c:	00000406 	br	4009630 <alt_iic_isr_register+0xc4>
 4009620:	e0bff817 	ldw	r2,-32(fp)
 4009624:	100b883a 	mov	r5,r2
 4009628:	e13ffc17 	ldw	r4,-16(fp)
 400962c:	40094940 	call	4009494 <alt_ic_irq_disable>
 4009630:	e0bff715 	stw	r2,-36(fp)
 4009634:	e0bffa17 	ldw	r2,-24(fp)
 4009638:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400963c:	e0bff917 	ldw	r2,-28(fp)
 4009640:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4009644:	e0bff717 	ldw	r2,-36(fp)
}
 4009648:	e037883a 	mov	sp,fp
 400964c:	dfc00117 	ldw	ra,4(sp)
 4009650:	df000017 	ldw	fp,0(sp)
 4009654:	dec00204 	addi	sp,sp,8
 4009658:	f800283a 	ret

0400965c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400965c:	defff804 	addi	sp,sp,-32
 4009660:	dfc00715 	stw	ra,28(sp)
 4009664:	df000615 	stw	fp,24(sp)
 4009668:	dc000515 	stw	r16,20(sp)
 400966c:	df000604 	addi	fp,sp,24
 4009670:	e13ffb15 	stw	r4,-20(fp)
 4009674:	e17ffc15 	stw	r5,-16(fp)
 4009678:	e1bffd15 	stw	r6,-12(fp)
 400967c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4009680:	e1bffe17 	ldw	r6,-8(fp)
 4009684:	e17ffd17 	ldw	r5,-12(fp)
 4009688:	e13ffc17 	ldw	r4,-16(fp)
 400968c:	40098e40 	call	40098e4 <open>
 4009690:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4009694:	e0bffa17 	ldw	r2,-24(fp)
 4009698:	10002216 	blt	r2,zero,4009724 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 400969c:	04010074 	movhi	r16,1025
 40096a0:	84319304 	addi	r16,r16,-14772
 40096a4:	e0bffa17 	ldw	r2,-24(fp)
 40096a8:	01400304 	movi	r5,12
 40096ac:	1009883a 	mov	r4,r2
 40096b0:	40073ec0 	call	40073ec <__mulsi3>
 40096b4:	8085883a 	add	r2,r16,r2
 40096b8:	10c00017 	ldw	r3,0(r2)
 40096bc:	e0bffb17 	ldw	r2,-20(fp)
 40096c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40096c4:	04010074 	movhi	r16,1025
 40096c8:	84319304 	addi	r16,r16,-14772
 40096cc:	e0bffa17 	ldw	r2,-24(fp)
 40096d0:	01400304 	movi	r5,12
 40096d4:	1009883a 	mov	r4,r2
 40096d8:	40073ec0 	call	40073ec <__mulsi3>
 40096dc:	8085883a 	add	r2,r16,r2
 40096e0:	10800104 	addi	r2,r2,4
 40096e4:	10c00017 	ldw	r3,0(r2)
 40096e8:	e0bffb17 	ldw	r2,-20(fp)
 40096ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40096f0:	04010074 	movhi	r16,1025
 40096f4:	84319304 	addi	r16,r16,-14772
 40096f8:	e0bffa17 	ldw	r2,-24(fp)
 40096fc:	01400304 	movi	r5,12
 4009700:	1009883a 	mov	r4,r2
 4009704:	40073ec0 	call	40073ec <__mulsi3>
 4009708:	8085883a 	add	r2,r16,r2
 400970c:	10800204 	addi	r2,r2,8
 4009710:	10c00017 	ldw	r3,0(r2)
 4009714:	e0bffb17 	ldw	r2,-20(fp)
 4009718:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400971c:	e13ffa17 	ldw	r4,-24(fp)
 4009720:	4009a400 	call	4009a40 <alt_release_fd>
  }
} 
 4009724:	0001883a 	nop
 4009728:	e6ffff04 	addi	sp,fp,-4
 400972c:	dfc00217 	ldw	ra,8(sp)
 4009730:	df000117 	ldw	fp,4(sp)
 4009734:	dc000017 	ldw	r16,0(sp)
 4009738:	dec00304 	addi	sp,sp,12
 400973c:	f800283a 	ret

04009740 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4009740:	defffb04 	addi	sp,sp,-20
 4009744:	dfc00415 	stw	ra,16(sp)
 4009748:	df000315 	stw	fp,12(sp)
 400974c:	df000304 	addi	fp,sp,12
 4009750:	e13ffd15 	stw	r4,-12(fp)
 4009754:	e17ffe15 	stw	r5,-8(fp)
 4009758:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400975c:	01c07fc4 	movi	r7,511
 4009760:	01800044 	movi	r6,1
 4009764:	e17ffd17 	ldw	r5,-12(fp)
 4009768:	01010074 	movhi	r4,1025
 400976c:	21319604 	addi	r4,r4,-14760
 4009770:	400965c0 	call	400965c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4009774:	01c07fc4 	movi	r7,511
 4009778:	000d883a 	mov	r6,zero
 400977c:	e17ffe17 	ldw	r5,-8(fp)
 4009780:	01010074 	movhi	r4,1025
 4009784:	21319304 	addi	r4,r4,-14772
 4009788:	400965c0 	call	400965c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400978c:	01c07fc4 	movi	r7,511
 4009790:	01800044 	movi	r6,1
 4009794:	e17fff17 	ldw	r5,-4(fp)
 4009798:	01010074 	movhi	r4,1025
 400979c:	21319904 	addi	r4,r4,-14748
 40097a0:	400965c0 	call	400965c <alt_open_fd>
}  
 40097a4:	0001883a 	nop
 40097a8:	e037883a 	mov	sp,fp
 40097ac:	dfc00117 	ldw	ra,4(sp)
 40097b0:	df000017 	ldw	fp,0(sp)
 40097b4:	dec00204 	addi	sp,sp,8
 40097b8:	f800283a 	ret

040097bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40097bc:	defffe04 	addi	sp,sp,-8
 40097c0:	dfc00115 	stw	ra,4(sp)
 40097c4:	df000015 	stw	fp,0(sp)
 40097c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40097cc:	d0a00d17 	ldw	r2,-32716(gp)
 40097d0:	10000326 	beq	r2,zero,40097e0 <alt_get_errno+0x24>
 40097d4:	d0a00d17 	ldw	r2,-32716(gp)
 40097d8:	103ee83a 	callr	r2
 40097dc:	00000106 	br	40097e4 <alt_get_errno+0x28>
 40097e0:	d0a79204 	addi	r2,gp,-25016
}
 40097e4:	e037883a 	mov	sp,fp
 40097e8:	dfc00117 	ldw	ra,4(sp)
 40097ec:	df000017 	ldw	fp,0(sp)
 40097f0:	dec00204 	addi	sp,sp,8
 40097f4:	f800283a 	ret

040097f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40097f8:	defffb04 	addi	sp,sp,-20
 40097fc:	dfc00415 	stw	ra,16(sp)
 4009800:	df000315 	stw	fp,12(sp)
 4009804:	dc000215 	stw	r16,8(sp)
 4009808:	df000304 	addi	fp,sp,12
 400980c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4009810:	e0bffe17 	ldw	r2,-8(fp)
 4009814:	10800217 	ldw	r2,8(r2)
 4009818:	10d00034 	orhi	r3,r2,16384
 400981c:	e0bffe17 	ldw	r2,-8(fp)
 4009820:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4009824:	e03ffd15 	stw	zero,-12(fp)
 4009828:	00002306 	br	40098b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400982c:	04010074 	movhi	r16,1025
 4009830:	84319304 	addi	r16,r16,-14772
 4009834:	e0bffd17 	ldw	r2,-12(fp)
 4009838:	01400304 	movi	r5,12
 400983c:	1009883a 	mov	r4,r2
 4009840:	40073ec0 	call	40073ec <__mulsi3>
 4009844:	8085883a 	add	r2,r16,r2
 4009848:	10c00017 	ldw	r3,0(r2)
 400984c:	e0bffe17 	ldw	r2,-8(fp)
 4009850:	10800017 	ldw	r2,0(r2)
 4009854:	1880151e 	bne	r3,r2,40098ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4009858:	04010074 	movhi	r16,1025
 400985c:	84319304 	addi	r16,r16,-14772
 4009860:	e0bffd17 	ldw	r2,-12(fp)
 4009864:	01400304 	movi	r5,12
 4009868:	1009883a 	mov	r4,r2
 400986c:	40073ec0 	call	40073ec <__mulsi3>
 4009870:	8085883a 	add	r2,r16,r2
 4009874:	10800204 	addi	r2,r2,8
 4009878:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400987c:	10000b0e 	bge	r2,zero,40098ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4009880:	01400304 	movi	r5,12
 4009884:	e13ffd17 	ldw	r4,-12(fp)
 4009888:	40073ec0 	call	40073ec <__mulsi3>
 400988c:	1007883a 	mov	r3,r2
 4009890:	00810074 	movhi	r2,1025
 4009894:	10b19304 	addi	r2,r2,-14772
 4009898:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400989c:	e0bffe17 	ldw	r2,-8(fp)
 40098a0:	18800226 	beq	r3,r2,40098ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40098a4:	00bffcc4 	movi	r2,-13
 40098a8:	00000806 	br	40098cc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40098ac:	e0bffd17 	ldw	r2,-12(fp)
 40098b0:	10800044 	addi	r2,r2,1
 40098b4:	e0bffd15 	stw	r2,-12(fp)
 40098b8:	d0a00c17 	ldw	r2,-32720(gp)
 40098bc:	1007883a 	mov	r3,r2
 40098c0:	e0bffd17 	ldw	r2,-12(fp)
 40098c4:	18bfd92e 	bgeu	r3,r2,400982c <__alt_data_end+0xfc00982c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40098c8:	0005883a 	mov	r2,zero
}
 40098cc:	e6ffff04 	addi	sp,fp,-4
 40098d0:	dfc00217 	ldw	ra,8(sp)
 40098d4:	df000117 	ldw	fp,4(sp)
 40098d8:	dc000017 	ldw	r16,0(sp)
 40098dc:	dec00304 	addi	sp,sp,12
 40098e0:	f800283a 	ret

040098e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40098e4:	defff604 	addi	sp,sp,-40
 40098e8:	dfc00915 	stw	ra,36(sp)
 40098ec:	df000815 	stw	fp,32(sp)
 40098f0:	df000804 	addi	fp,sp,32
 40098f4:	e13ffd15 	stw	r4,-12(fp)
 40098f8:	e17ffe15 	stw	r5,-8(fp)
 40098fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4009900:	00bfffc4 	movi	r2,-1
 4009904:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4009908:	00bffb44 	movi	r2,-19
 400990c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4009910:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4009914:	d1600a04 	addi	r5,gp,-32728
 4009918:	e13ffd17 	ldw	r4,-12(fp)
 400991c:	4009c8c0 	call	4009c8c <alt_find_dev>
 4009920:	e0bff815 	stw	r2,-32(fp)
 4009924:	e0bff817 	ldw	r2,-32(fp)
 4009928:	1000051e 	bne	r2,zero,4009940 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400992c:	e13ffd17 	ldw	r4,-12(fp)
 4009930:	4009d1c0 	call	4009d1c <alt_find_file>
 4009934:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4009938:	00800044 	movi	r2,1
 400993c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4009940:	e0bff817 	ldw	r2,-32(fp)
 4009944:	10002b26 	beq	r2,zero,40099f4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4009948:	e13ff817 	ldw	r4,-32(fp)
 400994c:	4009e240 	call	4009e24 <alt_get_fd>
 4009950:	e0bff915 	stw	r2,-28(fp)
 4009954:	e0bff917 	ldw	r2,-28(fp)
 4009958:	1000030e 	bge	r2,zero,4009968 <open+0x84>
    {
      status = index;
 400995c:	e0bff917 	ldw	r2,-28(fp)
 4009960:	e0bffa15 	stw	r2,-24(fp)
 4009964:	00002506 	br	40099fc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4009968:	01400304 	movi	r5,12
 400996c:	e13ff917 	ldw	r4,-28(fp)
 4009970:	40073ec0 	call	40073ec <__mulsi3>
 4009974:	1007883a 	mov	r3,r2
 4009978:	00810074 	movhi	r2,1025
 400997c:	10b19304 	addi	r2,r2,-14772
 4009980:	1885883a 	add	r2,r3,r2
 4009984:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4009988:	e0fffe17 	ldw	r3,-8(fp)
 400998c:	00900034 	movhi	r2,16384
 4009990:	10bfffc4 	addi	r2,r2,-1
 4009994:	1886703a 	and	r3,r3,r2
 4009998:	e0bffc17 	ldw	r2,-16(fp)
 400999c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40099a0:	e0bffb17 	ldw	r2,-20(fp)
 40099a4:	1000051e 	bne	r2,zero,40099bc <open+0xd8>
 40099a8:	e13ffc17 	ldw	r4,-16(fp)
 40099ac:	40097f80 	call	40097f8 <alt_file_locked>
 40099b0:	e0bffa15 	stw	r2,-24(fp)
 40099b4:	e0bffa17 	ldw	r2,-24(fp)
 40099b8:	10001016 	blt	r2,zero,40099fc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40099bc:	e0bff817 	ldw	r2,-32(fp)
 40099c0:	10800317 	ldw	r2,12(r2)
 40099c4:	10000826 	beq	r2,zero,40099e8 <open+0x104>
 40099c8:	e0bff817 	ldw	r2,-32(fp)
 40099cc:	10800317 	ldw	r2,12(r2)
 40099d0:	e1ffff17 	ldw	r7,-4(fp)
 40099d4:	e1bffe17 	ldw	r6,-8(fp)
 40099d8:	e17ffd17 	ldw	r5,-12(fp)
 40099dc:	e13ffc17 	ldw	r4,-16(fp)
 40099e0:	103ee83a 	callr	r2
 40099e4:	00000106 	br	40099ec <open+0x108>
 40099e8:	0005883a 	mov	r2,zero
 40099ec:	e0bffa15 	stw	r2,-24(fp)
 40099f0:	00000206 	br	40099fc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40099f4:	00bffb44 	movi	r2,-19
 40099f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40099fc:	e0bffa17 	ldw	r2,-24(fp)
 4009a00:	1000090e 	bge	r2,zero,4009a28 <open+0x144>
  {
    alt_release_fd (index);  
 4009a04:	e13ff917 	ldw	r4,-28(fp)
 4009a08:	4009a400 	call	4009a40 <alt_release_fd>
    ALT_ERRNO = -status;
 4009a0c:	40097bc0 	call	40097bc <alt_get_errno>
 4009a10:	1007883a 	mov	r3,r2
 4009a14:	e0bffa17 	ldw	r2,-24(fp)
 4009a18:	0085c83a 	sub	r2,zero,r2
 4009a1c:	18800015 	stw	r2,0(r3)
    return -1;
 4009a20:	00bfffc4 	movi	r2,-1
 4009a24:	00000106 	br	4009a2c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4009a28:	e0bff917 	ldw	r2,-28(fp)
}
 4009a2c:	e037883a 	mov	sp,fp
 4009a30:	dfc00117 	ldw	ra,4(sp)
 4009a34:	df000017 	ldw	fp,0(sp)
 4009a38:	dec00204 	addi	sp,sp,8
 4009a3c:	f800283a 	ret

04009a40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4009a40:	defffc04 	addi	sp,sp,-16
 4009a44:	dfc00315 	stw	ra,12(sp)
 4009a48:	df000215 	stw	fp,8(sp)
 4009a4c:	dc000115 	stw	r16,4(sp)
 4009a50:	df000204 	addi	fp,sp,8
 4009a54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4009a58:	e0bffe17 	ldw	r2,-8(fp)
 4009a5c:	108000d0 	cmplti	r2,r2,3
 4009a60:	1000111e 	bne	r2,zero,4009aa8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4009a64:	04010074 	movhi	r16,1025
 4009a68:	84319304 	addi	r16,r16,-14772
 4009a6c:	e0bffe17 	ldw	r2,-8(fp)
 4009a70:	01400304 	movi	r5,12
 4009a74:	1009883a 	mov	r4,r2
 4009a78:	40073ec0 	call	40073ec <__mulsi3>
 4009a7c:	8085883a 	add	r2,r16,r2
 4009a80:	10800204 	addi	r2,r2,8
 4009a84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4009a88:	04010074 	movhi	r16,1025
 4009a8c:	84319304 	addi	r16,r16,-14772
 4009a90:	e0bffe17 	ldw	r2,-8(fp)
 4009a94:	01400304 	movi	r5,12
 4009a98:	1009883a 	mov	r4,r2
 4009a9c:	40073ec0 	call	40073ec <__mulsi3>
 4009aa0:	8085883a 	add	r2,r16,r2
 4009aa4:	10000015 	stw	zero,0(r2)
  }
}
 4009aa8:	0001883a 	nop
 4009aac:	e6ffff04 	addi	sp,fp,-4
 4009ab0:	dfc00217 	ldw	ra,8(sp)
 4009ab4:	df000117 	ldw	fp,4(sp)
 4009ab8:	dc000017 	ldw	r16,0(sp)
 4009abc:	dec00304 	addi	sp,sp,12
 4009ac0:	f800283a 	ret

04009ac4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4009ac4:	defffa04 	addi	sp,sp,-24
 4009ac8:	df000515 	stw	fp,20(sp)
 4009acc:	df000504 	addi	fp,sp,20
 4009ad0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009ad4:	0005303a 	rdctl	r2,status
 4009ad8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009adc:	e0fffc17 	ldw	r3,-16(fp)
 4009ae0:	00bfff84 	movi	r2,-2
 4009ae4:	1884703a 	and	r2,r3,r2
 4009ae8:	1001703a 	wrctl	status,r2
  
  return context;
 4009aec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4009af0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4009af4:	e0bfff17 	ldw	r2,-4(fp)
 4009af8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4009afc:	e0bffd17 	ldw	r2,-12(fp)
 4009b00:	10800017 	ldw	r2,0(r2)
 4009b04:	e0fffd17 	ldw	r3,-12(fp)
 4009b08:	18c00117 	ldw	r3,4(r3)
 4009b0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4009b10:	e0bffd17 	ldw	r2,-12(fp)
 4009b14:	10800117 	ldw	r2,4(r2)
 4009b18:	e0fffd17 	ldw	r3,-12(fp)
 4009b1c:	18c00017 	ldw	r3,0(r3)
 4009b20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4009b24:	e0bffd17 	ldw	r2,-12(fp)
 4009b28:	e0fffd17 	ldw	r3,-12(fp)
 4009b2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4009b30:	e0bffd17 	ldw	r2,-12(fp)
 4009b34:	e0fffd17 	ldw	r3,-12(fp)
 4009b38:	10c00015 	stw	r3,0(r2)
 4009b3c:	e0bffb17 	ldw	r2,-20(fp)
 4009b40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009b44:	e0bffe17 	ldw	r2,-8(fp)
 4009b48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4009b4c:	0001883a 	nop
 4009b50:	e037883a 	mov	sp,fp
 4009b54:	df000017 	ldw	fp,0(sp)
 4009b58:	dec00104 	addi	sp,sp,4
 4009b5c:	f800283a 	ret

04009b60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4009b60:	defffb04 	addi	sp,sp,-20
 4009b64:	dfc00415 	stw	ra,16(sp)
 4009b68:	df000315 	stw	fp,12(sp)
 4009b6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4009b70:	d0a00f17 	ldw	r2,-32708(gp)
 4009b74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4009b78:	d0a79817 	ldw	r2,-24992(gp)
 4009b7c:	10800044 	addi	r2,r2,1
 4009b80:	d0a79815 	stw	r2,-24992(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4009b84:	00002e06 	br	4009c40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4009b88:	e0bffd17 	ldw	r2,-12(fp)
 4009b8c:	10800017 	ldw	r2,0(r2)
 4009b90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4009b94:	e0bffd17 	ldw	r2,-12(fp)
 4009b98:	10800403 	ldbu	r2,16(r2)
 4009b9c:	10803fcc 	andi	r2,r2,255
 4009ba0:	10000426 	beq	r2,zero,4009bb4 <alt_tick+0x54>
 4009ba4:	d0a79817 	ldw	r2,-24992(gp)
 4009ba8:	1000021e 	bne	r2,zero,4009bb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4009bac:	e0bffd17 	ldw	r2,-12(fp)
 4009bb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4009bb4:	e0bffd17 	ldw	r2,-12(fp)
 4009bb8:	10800217 	ldw	r2,8(r2)
 4009bbc:	d0e79817 	ldw	r3,-24992(gp)
 4009bc0:	18801d36 	bltu	r3,r2,4009c38 <alt_tick+0xd8>
 4009bc4:	e0bffd17 	ldw	r2,-12(fp)
 4009bc8:	10800403 	ldbu	r2,16(r2)
 4009bcc:	10803fcc 	andi	r2,r2,255
 4009bd0:	1000191e 	bne	r2,zero,4009c38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4009bd4:	e0bffd17 	ldw	r2,-12(fp)
 4009bd8:	10800317 	ldw	r2,12(r2)
 4009bdc:	e0fffd17 	ldw	r3,-12(fp)
 4009be0:	18c00517 	ldw	r3,20(r3)
 4009be4:	1809883a 	mov	r4,r3
 4009be8:	103ee83a 	callr	r2
 4009bec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4009bf0:	e0bfff17 	ldw	r2,-4(fp)
 4009bf4:	1000031e 	bne	r2,zero,4009c04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4009bf8:	e13ffd17 	ldw	r4,-12(fp)
 4009bfc:	4009ac40 	call	4009ac4 <alt_alarm_stop>
 4009c00:	00000d06 	br	4009c38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4009c04:	e0bffd17 	ldw	r2,-12(fp)
 4009c08:	10c00217 	ldw	r3,8(r2)
 4009c0c:	e0bfff17 	ldw	r2,-4(fp)
 4009c10:	1887883a 	add	r3,r3,r2
 4009c14:	e0bffd17 	ldw	r2,-12(fp)
 4009c18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4009c1c:	e0bffd17 	ldw	r2,-12(fp)
 4009c20:	10c00217 	ldw	r3,8(r2)
 4009c24:	d0a79817 	ldw	r2,-24992(gp)
 4009c28:	1880032e 	bgeu	r3,r2,4009c38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4009c2c:	e0bffd17 	ldw	r2,-12(fp)
 4009c30:	00c00044 	movi	r3,1
 4009c34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4009c38:	e0bffe17 	ldw	r2,-8(fp)
 4009c3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4009c40:	e0fffd17 	ldw	r3,-12(fp)
 4009c44:	d0a00f04 	addi	r2,gp,-32708
 4009c48:	18bfcf1e 	bne	r3,r2,4009b88 <__alt_data_end+0xfc009b88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4009c4c:	0001883a 	nop
}
 4009c50:	0001883a 	nop
 4009c54:	e037883a 	mov	sp,fp
 4009c58:	dfc00117 	ldw	ra,4(sp)
 4009c5c:	df000017 	ldw	fp,0(sp)
 4009c60:	dec00204 	addi	sp,sp,8
 4009c64:	f800283a 	ret

04009c68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4009c68:	deffff04 	addi	sp,sp,-4
 4009c6c:	df000015 	stw	fp,0(sp)
 4009c70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4009c74:	000170fa 	wrctl	ienable,zero
}
 4009c78:	0001883a 	nop
 4009c7c:	e037883a 	mov	sp,fp
 4009c80:	df000017 	ldw	fp,0(sp)
 4009c84:	dec00104 	addi	sp,sp,4
 4009c88:	f800283a 	ret

04009c8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4009c8c:	defffa04 	addi	sp,sp,-24
 4009c90:	dfc00515 	stw	ra,20(sp)
 4009c94:	df000415 	stw	fp,16(sp)
 4009c98:	df000404 	addi	fp,sp,16
 4009c9c:	e13ffe15 	stw	r4,-8(fp)
 4009ca0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4009ca4:	e0bfff17 	ldw	r2,-4(fp)
 4009ca8:	10800017 	ldw	r2,0(r2)
 4009cac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4009cb0:	e13ffe17 	ldw	r4,-8(fp)
 4009cb4:	400a1940 	call	400a194 <strlen>
 4009cb8:	10800044 	addi	r2,r2,1
 4009cbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4009cc0:	00000d06 	br	4009cf8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4009cc4:	e0bffc17 	ldw	r2,-16(fp)
 4009cc8:	10800217 	ldw	r2,8(r2)
 4009ccc:	e0fffd17 	ldw	r3,-12(fp)
 4009cd0:	180d883a 	mov	r6,r3
 4009cd4:	e17ffe17 	ldw	r5,-8(fp)
 4009cd8:	1009883a 	mov	r4,r2
 4009cdc:	4009fd00 	call	4009fd0 <memcmp>
 4009ce0:	1000021e 	bne	r2,zero,4009cec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4009ce4:	e0bffc17 	ldw	r2,-16(fp)
 4009ce8:	00000706 	br	4009d08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4009cec:	e0bffc17 	ldw	r2,-16(fp)
 4009cf0:	10800017 	ldw	r2,0(r2)
 4009cf4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4009cf8:	e0fffc17 	ldw	r3,-16(fp)
 4009cfc:	e0bfff17 	ldw	r2,-4(fp)
 4009d00:	18bff01e 	bne	r3,r2,4009cc4 <__alt_data_end+0xfc009cc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4009d04:	0005883a 	mov	r2,zero
}
 4009d08:	e037883a 	mov	sp,fp
 4009d0c:	dfc00117 	ldw	ra,4(sp)
 4009d10:	df000017 	ldw	fp,0(sp)
 4009d14:	dec00204 	addi	sp,sp,8
 4009d18:	f800283a 	ret

04009d1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4009d1c:	defffb04 	addi	sp,sp,-20
 4009d20:	dfc00415 	stw	ra,16(sp)
 4009d24:	df000315 	stw	fp,12(sp)
 4009d28:	df000304 	addi	fp,sp,12
 4009d2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4009d30:	d0a00817 	ldw	r2,-32736(gp)
 4009d34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4009d38:	00003106 	br	4009e00 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4009d3c:	e0bffd17 	ldw	r2,-12(fp)
 4009d40:	10800217 	ldw	r2,8(r2)
 4009d44:	1009883a 	mov	r4,r2
 4009d48:	400a1940 	call	400a194 <strlen>
 4009d4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4009d50:	e0bffd17 	ldw	r2,-12(fp)
 4009d54:	10c00217 	ldw	r3,8(r2)
 4009d58:	e0bffe17 	ldw	r2,-8(fp)
 4009d5c:	10bfffc4 	addi	r2,r2,-1
 4009d60:	1885883a 	add	r2,r3,r2
 4009d64:	10800003 	ldbu	r2,0(r2)
 4009d68:	10803fcc 	andi	r2,r2,255
 4009d6c:	1080201c 	xori	r2,r2,128
 4009d70:	10bfe004 	addi	r2,r2,-128
 4009d74:	10800bd8 	cmpnei	r2,r2,47
 4009d78:	1000031e 	bne	r2,zero,4009d88 <alt_find_file+0x6c>
    {
      len -= 1;
 4009d7c:	e0bffe17 	ldw	r2,-8(fp)
 4009d80:	10bfffc4 	addi	r2,r2,-1
 4009d84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4009d88:	e0bffe17 	ldw	r2,-8(fp)
 4009d8c:	e0ffff17 	ldw	r3,-4(fp)
 4009d90:	1885883a 	add	r2,r3,r2
 4009d94:	10800003 	ldbu	r2,0(r2)
 4009d98:	10803fcc 	andi	r2,r2,255
 4009d9c:	1080201c 	xori	r2,r2,128
 4009da0:	10bfe004 	addi	r2,r2,-128
 4009da4:	10800be0 	cmpeqi	r2,r2,47
 4009da8:	1000081e 	bne	r2,zero,4009dcc <alt_find_file+0xb0>
 4009dac:	e0bffe17 	ldw	r2,-8(fp)
 4009db0:	e0ffff17 	ldw	r3,-4(fp)
 4009db4:	1885883a 	add	r2,r3,r2
 4009db8:	10800003 	ldbu	r2,0(r2)
 4009dbc:	10803fcc 	andi	r2,r2,255
 4009dc0:	1080201c 	xori	r2,r2,128
 4009dc4:	10bfe004 	addi	r2,r2,-128
 4009dc8:	10000a1e 	bne	r2,zero,4009df4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4009dcc:	e0bffd17 	ldw	r2,-12(fp)
 4009dd0:	10800217 	ldw	r2,8(r2)
 4009dd4:	e0fffe17 	ldw	r3,-8(fp)
 4009dd8:	180d883a 	mov	r6,r3
 4009ddc:	e17fff17 	ldw	r5,-4(fp)
 4009de0:	1009883a 	mov	r4,r2
 4009de4:	4009fd00 	call	4009fd0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4009de8:	1000021e 	bne	r2,zero,4009df4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4009dec:	e0bffd17 	ldw	r2,-12(fp)
 4009df0:	00000706 	br	4009e10 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4009df4:	e0bffd17 	ldw	r2,-12(fp)
 4009df8:	10800017 	ldw	r2,0(r2)
 4009dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4009e00:	e0fffd17 	ldw	r3,-12(fp)
 4009e04:	d0a00804 	addi	r2,gp,-32736
 4009e08:	18bfcc1e 	bne	r3,r2,4009d3c <__alt_data_end+0xfc009d3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4009e0c:	0005883a 	mov	r2,zero
}
 4009e10:	e037883a 	mov	sp,fp
 4009e14:	dfc00117 	ldw	ra,4(sp)
 4009e18:	df000017 	ldw	fp,0(sp)
 4009e1c:	dec00204 	addi	sp,sp,8
 4009e20:	f800283a 	ret

04009e24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4009e24:	defffa04 	addi	sp,sp,-24
 4009e28:	dfc00515 	stw	ra,20(sp)
 4009e2c:	df000415 	stw	fp,16(sp)
 4009e30:	dc000315 	stw	r16,12(sp)
 4009e34:	df000404 	addi	fp,sp,16
 4009e38:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4009e3c:	00bffa04 	movi	r2,-24
 4009e40:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4009e44:	e03ffc15 	stw	zero,-16(fp)
 4009e48:	00001d06 	br	4009ec0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4009e4c:	04010074 	movhi	r16,1025
 4009e50:	84319304 	addi	r16,r16,-14772
 4009e54:	e0bffc17 	ldw	r2,-16(fp)
 4009e58:	01400304 	movi	r5,12
 4009e5c:	1009883a 	mov	r4,r2
 4009e60:	40073ec0 	call	40073ec <__mulsi3>
 4009e64:	8085883a 	add	r2,r16,r2
 4009e68:	10800017 	ldw	r2,0(r2)
 4009e6c:	1000111e 	bne	r2,zero,4009eb4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4009e70:	04010074 	movhi	r16,1025
 4009e74:	84319304 	addi	r16,r16,-14772
 4009e78:	e0bffc17 	ldw	r2,-16(fp)
 4009e7c:	01400304 	movi	r5,12
 4009e80:	1009883a 	mov	r4,r2
 4009e84:	40073ec0 	call	40073ec <__mulsi3>
 4009e88:	8085883a 	add	r2,r16,r2
 4009e8c:	e0fffe17 	ldw	r3,-8(fp)
 4009e90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4009e94:	d0e00c17 	ldw	r3,-32720(gp)
 4009e98:	e0bffc17 	ldw	r2,-16(fp)
 4009e9c:	1880020e 	bge	r3,r2,4009ea8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4009ea0:	e0bffc17 	ldw	r2,-16(fp)
 4009ea4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 4009ea8:	e0bffc17 	ldw	r2,-16(fp)
 4009eac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4009eb0:	00000606 	br	4009ecc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4009eb4:	e0bffc17 	ldw	r2,-16(fp)
 4009eb8:	10800044 	addi	r2,r2,1
 4009ebc:	e0bffc15 	stw	r2,-16(fp)
 4009ec0:	e0bffc17 	ldw	r2,-16(fp)
 4009ec4:	10800810 	cmplti	r2,r2,32
 4009ec8:	103fe01e 	bne	r2,zero,4009e4c <__alt_data_end+0xfc009e4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4009ecc:	e0bffd17 	ldw	r2,-12(fp)
}
 4009ed0:	e6ffff04 	addi	sp,fp,-4
 4009ed4:	dfc00217 	ldw	ra,8(sp)
 4009ed8:	df000117 	ldw	fp,4(sp)
 4009edc:	dc000017 	ldw	r16,0(sp)
 4009ee0:	dec00304 	addi	sp,sp,12
 4009ee4:	f800283a 	ret

04009ee8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4009ee8:	defffe04 	addi	sp,sp,-8
 4009eec:	df000115 	stw	fp,4(sp)
 4009ef0:	df000104 	addi	fp,sp,4
 4009ef4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4009ef8:	e0bfff17 	ldw	r2,-4(fp)
 4009efc:	10bffe84 	addi	r2,r2,-6
 4009f00:	10c00428 	cmpgeui	r3,r2,16
 4009f04:	18001a1e 	bne	r3,zero,4009f70 <alt_exception_cause_generated_bad_addr+0x88>
 4009f08:	100690ba 	slli	r3,r2,2
 4009f0c:	00810074 	movhi	r2,1025
 4009f10:	10a7c804 	addi	r2,r2,-24800
 4009f14:	1885883a 	add	r2,r3,r2
 4009f18:	10800017 	ldw	r2,0(r2)
 4009f1c:	1000683a 	jmp	r2
 4009f20:	04009f60 	cmpeqi	r16,zero,637
 4009f24:	04009f60 	cmpeqi	r16,zero,637
 4009f28:	04009f70 	cmpltui	r16,zero,637
 4009f2c:	04009f70 	cmpltui	r16,zero,637
 4009f30:	04009f70 	cmpltui	r16,zero,637
 4009f34:	04009f60 	cmpeqi	r16,zero,637
 4009f38:	04009f68 	cmpgeui	r16,zero,637
 4009f3c:	04009f70 	cmpltui	r16,zero,637
 4009f40:	04009f60 	cmpeqi	r16,zero,637
 4009f44:	04009f60 	cmpeqi	r16,zero,637
 4009f48:	04009f70 	cmpltui	r16,zero,637
 4009f4c:	04009f60 	cmpeqi	r16,zero,637
 4009f50:	04009f68 	cmpgeui	r16,zero,637
 4009f54:	04009f70 	cmpltui	r16,zero,637
 4009f58:	04009f70 	cmpltui	r16,zero,637
 4009f5c:	04009f60 	cmpeqi	r16,zero,637
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4009f60:	00800044 	movi	r2,1
 4009f64:	00000306 	br	4009f74 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4009f68:	0005883a 	mov	r2,zero
 4009f6c:	00000106 	br	4009f74 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4009f70:	0005883a 	mov	r2,zero
  }
}
 4009f74:	e037883a 	mov	sp,fp
 4009f78:	df000017 	ldw	fp,0(sp)
 4009f7c:	dec00104 	addi	sp,sp,4
 4009f80:	f800283a 	ret

04009f84 <atexit>:
 4009f84:	200b883a 	mov	r5,r4
 4009f88:	000f883a 	mov	r7,zero
 4009f8c:	000d883a 	mov	r6,zero
 4009f90:	0009883a 	mov	r4,zero
 4009f94:	400a22c1 	jmpi	400a22c <__register_exitproc>

04009f98 <exit>:
 4009f98:	defffe04 	addi	sp,sp,-8
 4009f9c:	000b883a 	mov	r5,zero
 4009fa0:	dc000015 	stw	r16,0(sp)
 4009fa4:	dfc00115 	stw	ra,4(sp)
 4009fa8:	2021883a 	mov	r16,r4
 4009fac:	400a3440 	call	400a344 <__call_exitprocs>
 4009fb0:	00810074 	movhi	r2,1025
 4009fb4:	10b1f604 	addi	r2,r2,-14376
 4009fb8:	11000017 	ldw	r4,0(r2)
 4009fbc:	20800f17 	ldw	r2,60(r4)
 4009fc0:	10000126 	beq	r2,zero,4009fc8 <exit+0x30>
 4009fc4:	103ee83a 	callr	r2
 4009fc8:	8009883a 	mov	r4,r16
 4009fcc:	400a4c40 	call	400a4c4 <_exit>

04009fd0 <memcmp>:
 4009fd0:	01c000c4 	movi	r7,3
 4009fd4:	3980192e 	bgeu	r7,r6,400a03c <memcmp+0x6c>
 4009fd8:	2144b03a 	or	r2,r4,r5
 4009fdc:	11c4703a 	and	r2,r2,r7
 4009fe0:	10000f26 	beq	r2,zero,400a020 <memcmp+0x50>
 4009fe4:	20800003 	ldbu	r2,0(r4)
 4009fe8:	28c00003 	ldbu	r3,0(r5)
 4009fec:	10c0151e 	bne	r2,r3,400a044 <memcmp+0x74>
 4009ff0:	31bfff84 	addi	r6,r6,-2
 4009ff4:	01ffffc4 	movi	r7,-1
 4009ff8:	00000406 	br	400a00c <memcmp+0x3c>
 4009ffc:	20800003 	ldbu	r2,0(r4)
 400a000:	28c00003 	ldbu	r3,0(r5)
 400a004:	31bfffc4 	addi	r6,r6,-1
 400a008:	10c00e1e 	bne	r2,r3,400a044 <memcmp+0x74>
 400a00c:	21000044 	addi	r4,r4,1
 400a010:	29400044 	addi	r5,r5,1
 400a014:	31fff91e 	bne	r6,r7,4009ffc <__alt_data_end+0xfc009ffc>
 400a018:	0005883a 	mov	r2,zero
 400a01c:	f800283a 	ret
 400a020:	20c00017 	ldw	r3,0(r4)
 400a024:	28800017 	ldw	r2,0(r5)
 400a028:	18bfee1e 	bne	r3,r2,4009fe4 <__alt_data_end+0xfc009fe4>
 400a02c:	31bfff04 	addi	r6,r6,-4
 400a030:	21000104 	addi	r4,r4,4
 400a034:	29400104 	addi	r5,r5,4
 400a038:	39bff936 	bltu	r7,r6,400a020 <__alt_data_end+0xfc00a020>
 400a03c:	303fe91e 	bne	r6,zero,4009fe4 <__alt_data_end+0xfc009fe4>
 400a040:	003ff506 	br	400a018 <__alt_data_end+0xfc00a018>
 400a044:	10c5c83a 	sub	r2,r2,r3
 400a048:	f800283a 	ret

0400a04c <memcpy>:
 400a04c:	defffd04 	addi	sp,sp,-12
 400a050:	dfc00215 	stw	ra,8(sp)
 400a054:	dc400115 	stw	r17,4(sp)
 400a058:	dc000015 	stw	r16,0(sp)
 400a05c:	00c003c4 	movi	r3,15
 400a060:	2005883a 	mov	r2,r4
 400a064:	1980452e 	bgeu	r3,r6,400a17c <memcpy+0x130>
 400a068:	2906b03a 	or	r3,r5,r4
 400a06c:	18c000cc 	andi	r3,r3,3
 400a070:	1800441e 	bne	r3,zero,400a184 <memcpy+0x138>
 400a074:	347ffc04 	addi	r17,r6,-16
 400a078:	8822d13a 	srli	r17,r17,4
 400a07c:	28c00104 	addi	r3,r5,4
 400a080:	23400104 	addi	r13,r4,4
 400a084:	8820913a 	slli	r16,r17,4
 400a088:	2b000204 	addi	r12,r5,8
 400a08c:	22c00204 	addi	r11,r4,8
 400a090:	84000504 	addi	r16,r16,20
 400a094:	2a800304 	addi	r10,r5,12
 400a098:	22400304 	addi	r9,r4,12
 400a09c:	2c21883a 	add	r16,r5,r16
 400a0a0:	2811883a 	mov	r8,r5
 400a0a4:	200f883a 	mov	r7,r4
 400a0a8:	41000017 	ldw	r4,0(r8)
 400a0ac:	1fc00017 	ldw	ra,0(r3)
 400a0b0:	63c00017 	ldw	r15,0(r12)
 400a0b4:	39000015 	stw	r4,0(r7)
 400a0b8:	53800017 	ldw	r14,0(r10)
 400a0bc:	6fc00015 	stw	ra,0(r13)
 400a0c0:	5bc00015 	stw	r15,0(r11)
 400a0c4:	4b800015 	stw	r14,0(r9)
 400a0c8:	18c00404 	addi	r3,r3,16
 400a0cc:	39c00404 	addi	r7,r7,16
 400a0d0:	42000404 	addi	r8,r8,16
 400a0d4:	6b400404 	addi	r13,r13,16
 400a0d8:	63000404 	addi	r12,r12,16
 400a0dc:	5ac00404 	addi	r11,r11,16
 400a0e0:	52800404 	addi	r10,r10,16
 400a0e4:	4a400404 	addi	r9,r9,16
 400a0e8:	1c3fef1e 	bne	r3,r16,400a0a8 <__alt_data_end+0xfc00a0a8>
 400a0ec:	89c00044 	addi	r7,r17,1
 400a0f0:	380e913a 	slli	r7,r7,4
 400a0f4:	310003cc 	andi	r4,r6,15
 400a0f8:	02c000c4 	movi	r11,3
 400a0fc:	11c7883a 	add	r3,r2,r7
 400a100:	29cb883a 	add	r5,r5,r7
 400a104:	5900212e 	bgeu	r11,r4,400a18c <memcpy+0x140>
 400a108:	1813883a 	mov	r9,r3
 400a10c:	2811883a 	mov	r8,r5
 400a110:	200f883a 	mov	r7,r4
 400a114:	42800017 	ldw	r10,0(r8)
 400a118:	4a400104 	addi	r9,r9,4
 400a11c:	39ffff04 	addi	r7,r7,-4
 400a120:	4abfff15 	stw	r10,-4(r9)
 400a124:	42000104 	addi	r8,r8,4
 400a128:	59fffa36 	bltu	r11,r7,400a114 <__alt_data_end+0xfc00a114>
 400a12c:	213fff04 	addi	r4,r4,-4
 400a130:	2008d0ba 	srli	r4,r4,2
 400a134:	318000cc 	andi	r6,r6,3
 400a138:	21000044 	addi	r4,r4,1
 400a13c:	2109883a 	add	r4,r4,r4
 400a140:	2109883a 	add	r4,r4,r4
 400a144:	1907883a 	add	r3,r3,r4
 400a148:	290b883a 	add	r5,r5,r4
 400a14c:	30000626 	beq	r6,zero,400a168 <memcpy+0x11c>
 400a150:	198d883a 	add	r6,r3,r6
 400a154:	29c00003 	ldbu	r7,0(r5)
 400a158:	18c00044 	addi	r3,r3,1
 400a15c:	29400044 	addi	r5,r5,1
 400a160:	19ffffc5 	stb	r7,-1(r3)
 400a164:	19bffb1e 	bne	r3,r6,400a154 <__alt_data_end+0xfc00a154>
 400a168:	dfc00217 	ldw	ra,8(sp)
 400a16c:	dc400117 	ldw	r17,4(sp)
 400a170:	dc000017 	ldw	r16,0(sp)
 400a174:	dec00304 	addi	sp,sp,12
 400a178:	f800283a 	ret
 400a17c:	2007883a 	mov	r3,r4
 400a180:	003ff206 	br	400a14c <__alt_data_end+0xfc00a14c>
 400a184:	2007883a 	mov	r3,r4
 400a188:	003ff106 	br	400a150 <__alt_data_end+0xfc00a150>
 400a18c:	200d883a 	mov	r6,r4
 400a190:	003fee06 	br	400a14c <__alt_data_end+0xfc00a14c>

0400a194 <strlen>:
 400a194:	208000cc 	andi	r2,r4,3
 400a198:	10002026 	beq	r2,zero,400a21c <strlen+0x88>
 400a19c:	20800007 	ldb	r2,0(r4)
 400a1a0:	10002026 	beq	r2,zero,400a224 <strlen+0x90>
 400a1a4:	2005883a 	mov	r2,r4
 400a1a8:	00000206 	br	400a1b4 <strlen+0x20>
 400a1ac:	10c00007 	ldb	r3,0(r2)
 400a1b0:	18001826 	beq	r3,zero,400a214 <strlen+0x80>
 400a1b4:	10800044 	addi	r2,r2,1
 400a1b8:	10c000cc 	andi	r3,r2,3
 400a1bc:	183ffb1e 	bne	r3,zero,400a1ac <__alt_data_end+0xfc00a1ac>
 400a1c0:	10c00017 	ldw	r3,0(r2)
 400a1c4:	01ffbff4 	movhi	r7,65279
 400a1c8:	39ffbfc4 	addi	r7,r7,-257
 400a1cc:	00ca303a 	nor	r5,zero,r3
 400a1d0:	01a02074 	movhi	r6,32897
 400a1d4:	19c7883a 	add	r3,r3,r7
 400a1d8:	31a02004 	addi	r6,r6,-32640
 400a1dc:	1946703a 	and	r3,r3,r5
 400a1e0:	1986703a 	and	r3,r3,r6
 400a1e4:	1800091e 	bne	r3,zero,400a20c <strlen+0x78>
 400a1e8:	10800104 	addi	r2,r2,4
 400a1ec:	10c00017 	ldw	r3,0(r2)
 400a1f0:	19cb883a 	add	r5,r3,r7
 400a1f4:	00c6303a 	nor	r3,zero,r3
 400a1f8:	28c6703a 	and	r3,r5,r3
 400a1fc:	1986703a 	and	r3,r3,r6
 400a200:	183ff926 	beq	r3,zero,400a1e8 <__alt_data_end+0xfc00a1e8>
 400a204:	00000106 	br	400a20c <strlen+0x78>
 400a208:	10800044 	addi	r2,r2,1
 400a20c:	10c00007 	ldb	r3,0(r2)
 400a210:	183ffd1e 	bne	r3,zero,400a208 <__alt_data_end+0xfc00a208>
 400a214:	1105c83a 	sub	r2,r2,r4
 400a218:	f800283a 	ret
 400a21c:	2005883a 	mov	r2,r4
 400a220:	003fe706 	br	400a1c0 <__alt_data_end+0xfc00a1c0>
 400a224:	0005883a 	mov	r2,zero
 400a228:	f800283a 	ret

0400a22c <__register_exitproc>:
 400a22c:	defffa04 	addi	sp,sp,-24
 400a230:	dc000315 	stw	r16,12(sp)
 400a234:	04010074 	movhi	r16,1025
 400a238:	8431f604 	addi	r16,r16,-14376
 400a23c:	80c00017 	ldw	r3,0(r16)
 400a240:	dc400415 	stw	r17,16(sp)
 400a244:	dfc00515 	stw	ra,20(sp)
 400a248:	18805217 	ldw	r2,328(r3)
 400a24c:	2023883a 	mov	r17,r4
 400a250:	10003726 	beq	r2,zero,400a330 <__register_exitproc+0x104>
 400a254:	10c00117 	ldw	r3,4(r2)
 400a258:	010007c4 	movi	r4,31
 400a25c:	20c00e16 	blt	r4,r3,400a298 <__register_exitproc+0x6c>
 400a260:	1a000044 	addi	r8,r3,1
 400a264:	8800221e 	bne	r17,zero,400a2f0 <__register_exitproc+0xc4>
 400a268:	18c00084 	addi	r3,r3,2
 400a26c:	18c7883a 	add	r3,r3,r3
 400a270:	18c7883a 	add	r3,r3,r3
 400a274:	12000115 	stw	r8,4(r2)
 400a278:	10c7883a 	add	r3,r2,r3
 400a27c:	19400015 	stw	r5,0(r3)
 400a280:	0005883a 	mov	r2,zero
 400a284:	dfc00517 	ldw	ra,20(sp)
 400a288:	dc400417 	ldw	r17,16(sp)
 400a28c:	dc000317 	ldw	r16,12(sp)
 400a290:	dec00604 	addi	sp,sp,24
 400a294:	f800283a 	ret
 400a298:	00810034 	movhi	r2,1024
 400a29c:	109d0904 	addi	r2,r2,29732
 400a2a0:	10002626 	beq	r2,zero,400a33c <__register_exitproc+0x110>
 400a2a4:	01006404 	movi	r4,400
 400a2a8:	d9400015 	stw	r5,0(sp)
 400a2ac:	d9800115 	stw	r6,4(sp)
 400a2b0:	d9c00215 	stw	r7,8(sp)
 400a2b4:	40074240 	call	4007424 <malloc>
 400a2b8:	d9400017 	ldw	r5,0(sp)
 400a2bc:	d9800117 	ldw	r6,4(sp)
 400a2c0:	d9c00217 	ldw	r7,8(sp)
 400a2c4:	10001d26 	beq	r2,zero,400a33c <__register_exitproc+0x110>
 400a2c8:	81000017 	ldw	r4,0(r16)
 400a2cc:	10000115 	stw	zero,4(r2)
 400a2d0:	02000044 	movi	r8,1
 400a2d4:	22405217 	ldw	r9,328(r4)
 400a2d8:	0007883a 	mov	r3,zero
 400a2dc:	12400015 	stw	r9,0(r2)
 400a2e0:	20805215 	stw	r2,328(r4)
 400a2e4:	10006215 	stw	zero,392(r2)
 400a2e8:	10006315 	stw	zero,396(r2)
 400a2ec:	883fde26 	beq	r17,zero,400a268 <__alt_data_end+0xfc00a268>
 400a2f0:	18c9883a 	add	r4,r3,r3
 400a2f4:	2109883a 	add	r4,r4,r4
 400a2f8:	1109883a 	add	r4,r2,r4
 400a2fc:	21802215 	stw	r6,136(r4)
 400a300:	01800044 	movi	r6,1
 400a304:	12406217 	ldw	r9,392(r2)
 400a308:	30cc983a 	sll	r6,r6,r3
 400a30c:	4992b03a 	or	r9,r9,r6
 400a310:	12406215 	stw	r9,392(r2)
 400a314:	21c04215 	stw	r7,264(r4)
 400a318:	01000084 	movi	r4,2
 400a31c:	893fd21e 	bne	r17,r4,400a268 <__alt_data_end+0xfc00a268>
 400a320:	11006317 	ldw	r4,396(r2)
 400a324:	218cb03a 	or	r6,r4,r6
 400a328:	11806315 	stw	r6,396(r2)
 400a32c:	003fce06 	br	400a268 <__alt_data_end+0xfc00a268>
 400a330:	18805304 	addi	r2,r3,332
 400a334:	18805215 	stw	r2,328(r3)
 400a338:	003fc606 	br	400a254 <__alt_data_end+0xfc00a254>
 400a33c:	00bfffc4 	movi	r2,-1
 400a340:	003fd006 	br	400a284 <__alt_data_end+0xfc00a284>

0400a344 <__call_exitprocs>:
 400a344:	defff504 	addi	sp,sp,-44
 400a348:	df000915 	stw	fp,36(sp)
 400a34c:	dd400615 	stw	r21,24(sp)
 400a350:	dc800315 	stw	r18,12(sp)
 400a354:	dfc00a15 	stw	ra,40(sp)
 400a358:	ddc00815 	stw	r23,32(sp)
 400a35c:	dd800715 	stw	r22,28(sp)
 400a360:	dd000515 	stw	r20,20(sp)
 400a364:	dcc00415 	stw	r19,16(sp)
 400a368:	dc400215 	stw	r17,8(sp)
 400a36c:	dc000115 	stw	r16,4(sp)
 400a370:	d9000015 	stw	r4,0(sp)
 400a374:	2839883a 	mov	fp,r5
 400a378:	04800044 	movi	r18,1
 400a37c:	057fffc4 	movi	r21,-1
 400a380:	00810074 	movhi	r2,1025
 400a384:	10b1f604 	addi	r2,r2,-14376
 400a388:	12000017 	ldw	r8,0(r2)
 400a38c:	45005217 	ldw	r20,328(r8)
 400a390:	44c05204 	addi	r19,r8,328
 400a394:	a0001c26 	beq	r20,zero,400a408 <__call_exitprocs+0xc4>
 400a398:	a0800117 	ldw	r2,4(r20)
 400a39c:	15ffffc4 	addi	r23,r2,-1
 400a3a0:	b8000d16 	blt	r23,zero,400a3d8 <__call_exitprocs+0x94>
 400a3a4:	14000044 	addi	r16,r2,1
 400a3a8:	8421883a 	add	r16,r16,r16
 400a3ac:	8421883a 	add	r16,r16,r16
 400a3b0:	84402004 	addi	r17,r16,128
 400a3b4:	a463883a 	add	r17,r20,r17
 400a3b8:	a421883a 	add	r16,r20,r16
 400a3bc:	e0001e26 	beq	fp,zero,400a438 <__call_exitprocs+0xf4>
 400a3c0:	80804017 	ldw	r2,256(r16)
 400a3c4:	e0801c26 	beq	fp,r2,400a438 <__call_exitprocs+0xf4>
 400a3c8:	bdffffc4 	addi	r23,r23,-1
 400a3cc:	843fff04 	addi	r16,r16,-4
 400a3d0:	8c7fff04 	addi	r17,r17,-4
 400a3d4:	bd7ff91e 	bne	r23,r21,400a3bc <__alt_data_end+0xfc00a3bc>
 400a3d8:	00810034 	movhi	r2,1024
 400a3dc:	109d0e04 	addi	r2,r2,29752
 400a3e0:	10000926 	beq	r2,zero,400a408 <__call_exitprocs+0xc4>
 400a3e4:	a0800117 	ldw	r2,4(r20)
 400a3e8:	1000301e 	bne	r2,zero,400a4ac <__call_exitprocs+0x168>
 400a3ec:	a0800017 	ldw	r2,0(r20)
 400a3f0:	10003226 	beq	r2,zero,400a4bc <__call_exitprocs+0x178>
 400a3f4:	a009883a 	mov	r4,r20
 400a3f8:	98800015 	stw	r2,0(r19)
 400a3fc:	40074380 	call	4007438 <free>
 400a400:	9d000017 	ldw	r20,0(r19)
 400a404:	a03fe41e 	bne	r20,zero,400a398 <__alt_data_end+0xfc00a398>
 400a408:	dfc00a17 	ldw	ra,40(sp)
 400a40c:	df000917 	ldw	fp,36(sp)
 400a410:	ddc00817 	ldw	r23,32(sp)
 400a414:	dd800717 	ldw	r22,28(sp)
 400a418:	dd400617 	ldw	r21,24(sp)
 400a41c:	dd000517 	ldw	r20,20(sp)
 400a420:	dcc00417 	ldw	r19,16(sp)
 400a424:	dc800317 	ldw	r18,12(sp)
 400a428:	dc400217 	ldw	r17,8(sp)
 400a42c:	dc000117 	ldw	r16,4(sp)
 400a430:	dec00b04 	addi	sp,sp,44
 400a434:	f800283a 	ret
 400a438:	a0800117 	ldw	r2,4(r20)
 400a43c:	80c00017 	ldw	r3,0(r16)
 400a440:	10bfffc4 	addi	r2,r2,-1
 400a444:	15c01426 	beq	r2,r23,400a498 <__call_exitprocs+0x154>
 400a448:	80000015 	stw	zero,0(r16)
 400a44c:	183fde26 	beq	r3,zero,400a3c8 <__alt_data_end+0xfc00a3c8>
 400a450:	95c8983a 	sll	r4,r18,r23
 400a454:	a0806217 	ldw	r2,392(r20)
 400a458:	a5800117 	ldw	r22,4(r20)
 400a45c:	2084703a 	and	r2,r4,r2
 400a460:	10000b26 	beq	r2,zero,400a490 <__call_exitprocs+0x14c>
 400a464:	a0806317 	ldw	r2,396(r20)
 400a468:	2088703a 	and	r4,r4,r2
 400a46c:	20000c1e 	bne	r4,zero,400a4a0 <__call_exitprocs+0x15c>
 400a470:	89400017 	ldw	r5,0(r17)
 400a474:	d9000017 	ldw	r4,0(sp)
 400a478:	183ee83a 	callr	r3
 400a47c:	a0800117 	ldw	r2,4(r20)
 400a480:	15bfbf1e 	bne	r2,r22,400a380 <__alt_data_end+0xfc00a380>
 400a484:	98800017 	ldw	r2,0(r19)
 400a488:	153fcf26 	beq	r2,r20,400a3c8 <__alt_data_end+0xfc00a3c8>
 400a48c:	003fbc06 	br	400a380 <__alt_data_end+0xfc00a380>
 400a490:	183ee83a 	callr	r3
 400a494:	003ff906 	br	400a47c <__alt_data_end+0xfc00a47c>
 400a498:	a5c00115 	stw	r23,4(r20)
 400a49c:	003feb06 	br	400a44c <__alt_data_end+0xfc00a44c>
 400a4a0:	89000017 	ldw	r4,0(r17)
 400a4a4:	183ee83a 	callr	r3
 400a4a8:	003ff406 	br	400a47c <__alt_data_end+0xfc00a47c>
 400a4ac:	a0800017 	ldw	r2,0(r20)
 400a4b0:	a027883a 	mov	r19,r20
 400a4b4:	1029883a 	mov	r20,r2
 400a4b8:	003fb606 	br	400a394 <__alt_data_end+0xfc00a394>
 400a4bc:	0005883a 	mov	r2,zero
 400a4c0:	003ffb06 	br	400a4b0 <__alt_data_end+0xfc00a4b0>

0400a4c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400a4c4:	defffd04 	addi	sp,sp,-12
 400a4c8:	df000215 	stw	fp,8(sp)
 400a4cc:	df000204 	addi	fp,sp,8
 400a4d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400a4d4:	0001883a 	nop
 400a4d8:	e0bfff17 	ldw	r2,-4(fp)
 400a4dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400a4e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400a4e4:	10000226 	beq	r2,zero,400a4f0 <_exit+0x2c>
    ALT_SIM_FAIL();
 400a4e8:	002af070 	cmpltui	zero,zero,43969
 400a4ec:	00000106 	br	400a4f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400a4f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400a4f4:	003fff06 	br	400a4f4 <__alt_data_end+0xfc00a4f4>
